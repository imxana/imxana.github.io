<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XANA&#39;s Blog</title>
  <subtitle>I can be who you are</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-23T09:05:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XANA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>看了100+小时的蓝营政治新闻节目有感</title>
    <link href="http://yoursite.com/2017/10/23/tw_think/"/>
    <id>http://yoursite.com/2017/10/23/tw_think/</id>
    <published>2017-10-23T07:47:21.000Z</published>
    <updated>2017-10-23T09:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>警告：本文5毛共吹，反共玻璃心党预警</p>
<p>欢迎讨论，欢迎反对</p>
</blockquote>
<h1 id="Foreword">Foreword</h1><p>个人利益相关：95-08年前于福建，之后在浙江生活至今，对台湾问题较为关注。父亲在闽时效命于94750空军部队至退役，我印象中获得过反台独斗争演习三等功。</p>
<p>从小，大家对台的态度大抵是宝岛台湾，阿里山很美这样，不过那个时候因为长期生活在军营之中，我可能于大家认识稍有不同：那个时间点是阿扁执政前后，父亲等抱着的态度很明确，肯定要打，台陆——切确的说是台闽之间必有一战，或早或晚的事情。现在看来中共对局势的把握是多么准确，果然现在就是一触即发的形态。</p>
<p>如果你不会翻墙，你不关心政治，你大概不知道台湾最近在干什么。我简单的描述一下（实际上一言难尽）台湾现状</p>
<p>台湾是个对民主观念消费过头的地区。去年5月民进党蔡英文利用台独口号，以压倒性选票获胜执政。上来就废除九二共识，让一个律师做经济部长，连经济学常识被质询的时候都答不出来，其他官员大同小异；台湾很喜欢让大学教授和律师参政；蔡和下面的各个部长做的蠢事数不胜数，比如废除核电用爱发电；纪念日本兵，到东南亚去寻亲；全民吃香蕉，行政院长说能减肥，然而因为产量过剩连上山猴子吃到肥肥的都不要吃了。正因为如此，你和5毛争论的时候，你只要抛出这个问题：你们民主这么优秀，怎么还会选出蔡英文来啊。他就哑口无言了。</p>
<p>九二共识废除的关键：九二共识在陆表示『一个中国』，在台表示『一中各表』，但是无论如何两边都是坚持一个中国，只是台湾表示为中华民国而已，也同样是反台独的，台独和独台一定程度上对立的两股势力（台湾当时实力较强，国民党认为中华民族伟大复兴的任务在台湾）。九二共识拿掉以后，台湾『天然独』的声音抬头，很多人开始拿掉中华民国这个帽子，或者假借着中华民国这个外壳来成立台湾国，这是深绿党。目前台湾普遍泛绿，并且越往台南越绿。</p>
<h1 id="The_Parties">The Parties</h1><p>民进党任何作为的出发点是选票，为反而反，国民党提出什么，他们就竭力反对；事实上因为台湾人对中国认知度不高，以及在野的大幅抹黑，最终导致国民党声望下降，绿营趁机夺权。民进党这个党很有意思，一个决策他做不好可以有很多套说辞，我是人民选出来的所以我的做法肯定代表民意啊不然你们为什么要选我/大多数人都支持这样做的所以我的做法错了也是民意啊错了怎么会是我。所以核电被废，禁止同性恋这种提案，就这样匪夷所思的通过了。简单的说，当权者决策为己，选民被利用了。</p>
<p>民进党实际已经积极为台独铺好路，却不敢宣布台独，一是打不过，二是没人帮。台独势力目前已经对民进党失望（只能且必须拥护一个台独总统），民进党为了笼络现在还在做很多蠢事来补偿心理落差，比如提案废除汉字改为拼音，提案改时区等等等等。然而自己的各种提案根本无法完成，却搞出各种乱七八糟的东西。</p>
<p>当然你也不要以为国民党好棒棒，实际上国民党就是两岸统一的最大阻碍。它属于拿了好处不作为的。民进党是不拿好处反作为的，实际上在加快统一步伐。因为台独一旦公投通过，OK根据反分裂国家法，师出有名直接武统。很多人是蓝皮绿党，这些人非台独而是独台，更为可恶。国民党执政时面对台独时的无能为力令人发笑，连自己的中华民国都维护不了，04年的太阳花事件更是让国民党声望一落千丈。</p>
<p>新党用本土人的话说就是个笑话。</p>
<h1 id="The_State">The State</h1><p>台湾现在和文革时期差不多，民进党在阿扁时期修改过教科书，丑化共党，美化日美。现在90%年轻人拥有强烈的台独意识，以中国人为耻，以日、韩、台人为荣。（和香港类似），统派只占台湾10%左右，而且大概都是父辈那代的人。任何与大陆相关的行为都会被绿营抹红，然后被说成是统派。人民的行为，不好意思，政治优先。具体参考最近台大体育场令人瞠目结舌的中国新声音冲突事件，没错，台大，台湾的最高学府。</p>
<p>台湾媒体的新闻基本上都是胡说八道，四大媒体的新闻为了点击量不择手段。什么神州飞船是假的，没有空气国旗怎么会飘；熊猫早就灭绝了，都是工作人员假扮的（对啊吃竹子吃的好辛苦）；在油管上搜十九大，负面新闻占大多数，各种阴谋论，91岁的长者被拿出来各种消费，什么架空权力，什么开会打哈欠。部分绿党的解读有的时候也挺佩服他们的想象力的，他们能看到我们想都没想过的东西。真的是，你在墙外呆的越久，就越爱国。</p>
<p>台湾很多年轻人对大陆的恨意是你们现在无法想象的，天然独的思想已经很大程度上进入了人民的思维。简体字的评论下，随处可见的支那猪，各种毛黑说，共匪滚。现在我担心的情况是，现在武统的声音越来越高，大陆的民意是很可怕的，万一我们的民意最终要求我党武统台湾，那么那一天还是要到来（好多台湾人叫嚣你打啊，姐放鸡只会丢石头，殊不知习川会美国已经默默的把青天白日旗从台湾地图上拿掉了，同时近期对台湾政府义正言辞的指责充耳不闻）。就是这样蔡当局在撕毁九二共识（即一个中国）还是宣称，需要大陆先释放善意。</p>
<h1 id="Solusion">Solusion</h1><p>十九大我是中途开始看直播的，看的异常认真，认真的不像我。很高兴的看到我国现在的主要矛盾变成不平衡不充分而不是落后的生产力了。我几个星期前就特别关注十九大就是因为蓝营节目中说不管是武统什么的对台政策最终还是看十九大的发言。然而三个半小时的谈话最终只有六百来个字谈到主权问题，而且较十八大来说内容不仅仅面向台湾，更是面向全国地区，六个任何掷地有声。发言很好的表达了我国反分裂的决心，相信每一个中国人听了都会热血沸腾。</p>
<p>对台的的政策从以前的各种反对，变成了『两岸一家亲』，这表明了我党目前已经对台湾执政党不抱有任何幻想。现在以对台人民友好为契机，提供各种便利，包括对台商的优惠，人才优待等等。（现在我觉得，共党的很多决策是科学且务实的，比如『经济是政治基础』，比西方那套民主的万能解药要不知道高到哪里去了。然而我觉得让人明白这一点，这是一项长久而艰巨的任务）</p>
<h1 id="The_Young">The Young</h1><p>我了解到台湾年轻人事实上根本不想支持这两个党，选票是迫于无奈。民进党无能，国民党无望，新党等对年轻人又根本没有什么吸引力。台湾的年轻人事实上并没有那么关心政治，但是对身份认同又很在意。当然是这样，从小开始唱的国歌，升的国旗和读的课本都是中华民国的，现在你让他认同PRC，我觉得也很难。</p>
<p>学生是一个很容易被煽动的群体，比如太阳花事件。被利用了都不知道，民主哪有那么简单？世界上哪一个国家民主独立不是需要血和汗的代价？中国新声音时间里一个台湾大学生被碰一下就各种炒作，难怪郑丽文说大学生连一个老伯都打不过，还搞什么台独？</p>
<p>（目前西方的民主思想在国际上影响力大不如前，发展中国家更愿意向中国模式学习。理论上，在经济发展水平没有到达一个临界点的时候，民主对国家是具有破坏性的。比如泰国现在认为它是除美国外的第二大国；印度也一样蜜汁自信，它看看中国，也打算搭建时速五六百的高铁（目前最高速度160km/h）。香港仍然认为发展变缓是大陆的问题，甚至要求恢复英国统治（不知道英国怎么想）。绝大多数民主国家把政府一般当做类似敌人的态度，又因为中国是一党制，所以中国是独裁国家。事实上民主并不是万能药，在发展中国家更是如此。</p>
<h1 id="My_Attitude">My Attitude</h1><p>台湾很多人现在蜜汁自信，认为让利、想方设法统一是在舔台湾，曾经解救外国的台湾群众被普遍认为是在吃豆腐，所以我希望你如果遇到台独（包括偏蓝的独台）观点的时候，能表达坚决的拒绝观点，请不要尝试任何的说明挽回：</p>
<p>『你們中國為什麼一直要。。』</p>
<p>『中国不欢迎你们，滚』</p>
<p>大家在油管发言的时候，有几点常识不要忘记：</p>
<p>大陆网民一般比较年轻，一般就可以认为是我们这代及以下，而国外是全民，在你面前是五六十岁的人也很正常。</p>
<p>统派一般是长辈，不要对台湾年轻人抱任何希望。</p>
<p>没有必要与激进派理论，国际舆论是站在我们这边的。国际舆论时时刻刻都在提醒台湾中国人的身份。未来中美关系会日益密切，台湾的美爸爸要变成叔叔了。</p>
<p>蓝皮（甚至红皮）绿蛆大有人在。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;警告：本文5毛共吹，反共玻璃心党预警&lt;/p&gt;
&lt;p&gt;欢迎讨论，欢迎反对&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Foreword&quot;&gt;Foreword&lt;/h1&gt;&lt;p&gt;个人利益相关：95-08年前于福建，之后在浙江生活至今，对台湾问题较为关
    
    </summary>
    
    
      <category term="politic" scheme="http://yoursite.com/tags/politic/"/>
    
  </entry>
  
  <entry>
    <title>读《快乐之道--游戏设计的黄金法则》二周目</title>
    <link href="http://yoursite.com/2017/10/21/rules_of_play/"/>
    <id>http://yoursite.com/2017/10/21/rules_of_play/</id>
    <published>2017-10-21T07:16:24.000Z</published>
    <updated>2017-10-23T07:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>写一点更一点 更新时间不定</p>
</blockquote>
<h1 id="概述">概述</h1><p>原书名：Rules of Play</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写一点更一点 更新时间不定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;&lt;p&gt;原书名：Rules of Play&lt;/p&gt;

    
    </summary>
    
    
      <category term="game" scheme="http://yoursite.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>读《游戏编程模式》</title>
    <link href="http://yoursite.com/2017/10/20/game_programming_patterns/"/>
    <id>http://yoursite.com/2017/10/20/game_programming_patterns/</id>
    <published>2017-10-20T14:16:24.000Z</published>
    <updated>2017-10-24T15:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>写一点更一点 更新时间不定</p>
</blockquote>
<h1 id="概述">概述</h1><blockquote>
<p>我读书有个习惯：先看作者面相。</p>
</blockquote>
<p>《游戏编程模式》的作者是一个从小学开始写游戏的全平台游戏开发者，这样一个超过20年编程经验的从业人员，对游戏开发的理解已经超出很多客观因素的见识限制。</p>
<p>我需要寻找的就是这种万千世界中纷纷扰扰、风格各异的规律中寻找普世的，相同的、漂亮而易用的规律。</p>
<h1 id="设计模式">设计模式</h1><h2 id="命令模式">命令模式</h2><p>模式说明：命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象，同时支持可撤消的操作。</p>
<p>我的理解：将命令抽象化，虚拟命令内容和执行方法，具体命令实现执行方法，之后将按键指针指向它；相当于增加一个间接调用层。如果将具体命令设计为需要传入角色参数（原来相当于默认主角），那么可以同时作为AI引擎与角色之间的接口，AI代码仅提供Commands以驱动，解除紧耦合。/每次命令时仅记录行为而非状态（游戏录像文件不大的原因），支持多次撤销的话，把记录类型改为队列即可。</p>
<p>举例说明：游戏按键绑定修改/策略游戏的撤销操作</p>
<h2 id="享元模式">享元模式</h2><p>模式说明：享元模式，以共享的方式高效地支持大量的细粒度的对象。通过复用内存中已存在的对象，降低系统创建对象实例的性能消耗。</p>
<p>我的理解：将对象分割成两个独立的类，一个通用类（model）记录不变部分，一个实例类（保存指向通用类的一个指针）记录可变部分。将数据存于内存中是个好办法，但对于渲染毫无助益。无论是Direct3D和OpenGL都能实现实例绘制，这两种API中都需要提供两种数据（通用数据&amp;实例列表）。/将地形相关的方法写在地形类中，而不是在世界对象的地形列表中取出枚举数据再判断逻辑而决定方法，因为这样符合OO思想，而且世界对象中不使用枚举，而使用指针，因为内存开销要小得多。</p>
<p>模式举例：渲染森林树木/瓦片地形技术</p>
<h2 id="观察者模式">观察者模式</h2><p>模式说明：观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</p>
<p>我的理解：被观察者对象（Subject）有两个职责，它拥有一个观察者（Observer）列表，以及暴露用来修改观察者列表的共有API，这样允许外部代码来控制谁可以接受通知；另一个职责就是发送通知。程序员潜意识里认为，『通知』太慢了，其实只要不是性能瓶颈的地方，它只是同步方法的间接实现，并没有什么开销。为了避免僵尸UI，最后学到的经验就是及时删除观察者。另外，程序员关心内存碎片回收胜于内存分配（如果你希望你的游戏能够运行相当长的一段时间的话）</p>
<p>模式举例：成就解锁功能/APP的UI界面响应/角色面板血条变化</p>
<h2 id="原型模式">原型模式</h2><p>模式说明：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象（你精通JS各种工厂模式的话，可以跳过这一章）</p>
<p>我的理解：不为所有独立的对象都写一个继承基础对象生成器的特殊对象生成器（比如GhostSpawner::Spawner），而是在基类上描述一个虚拟的clone()方法，给每一个子类都提供返回给自身类型和状态相同对象的方法；这样一旦任何子类实现这个接口，只需要实例化出一个原型，然后将其作为生成器即可。（当然clone没那么好写，比如深浅拷贝的问题）</p>
<p>模式举例：怪物生成器/孵化函数</p>
<h2 id="单例模式">单例模式</h2><p>模式说明：确保一个类只有一个实例，并为其提供一个全局访问入口。</p>
<p>我的理解：这是一个有争议的模式。它的优点如下：不使用就不创建；运行时才初始化；单例可以被继承扩展（比如跨平台的文件系统）。它的缺点也很明显：1. 它是一个全局变量。它令代码晦涩难懂；全局变量促进了耦合；它对并发不友好。2. 它是一个画蛇添足的方案。全局变量访问很方便，但对于允许多个实例的类，访问也并不麻烦，而且不利于多人开发沟通。3. 延迟初始化剥离了你的控制。使用静态函数比使用单例简单，而且还能表面你在使用静态内存。</p>
<p>建议做法：面向对象就是让对象自己管理自己，从对象思考是否需要类；用检测来防止创建多个实例；为实例提供便捷的访问方式：传入参数（比如上下文）、从基类获取、封装全局对象。</p>
<p>模式举例：全局变量</p>
<h2 id="状态模式">状态模式</h2><p>模式说明：允许对象在当内部状态改变时改变其行为，就好像此对象改变了自己的类一样</p>
<p>我的理解：有限状态机（借鉴了图灵机）相当于一种状态流程图；状态枚举优于分支，用状态判断逻辑能有效封装代码。状态模式下，为每一个状态定义一个类，在需要多状态对的象中私有一个状态对象用于委托，在这种情况下，推荐使用静态状态，也可以使用实例化状态。同时可以进一步封装，把状态进入和退出函数暴露以提供支持。并发状态机用于支持不同系统间的状态；层次状态机以继承的方式处理类似的状态；下推自动机用栈记录上一次操作前的状态。</p>
<p>模式举例：横版游戏主角动作逻辑</p>
<h1 id="序列型模式">序列型模式</h1><h2 id="双缓冲">双缓冲</h2><p>模式说明：使用序列操作来模拟瞬间或者同时发生的事情</p>
<p>我的理解：在一个不断被写入和读出的数据内存中，为了避免读出过快导致信息不完整，使用两块内存用于写入且在每次读出后交替指针，这样能够保证每次读出数据的完整性。</p>
<p>模式举例：图形渲染的帧缓冲区交换，以及任何适用双缓冲的模式</p>
<h2 id="游戏循环">游戏循环</h2><p>模式说明：游戏循环模式，实现游戏运行过程中对用户输入处理和时间处理的解耦。</p>
<p>我的理解：</p>
<p>模式举例：任何游戏或游戏引擎都拥有自己的游戏循环，因为游戏循环是游戏运行的主心骨。 </p>
<h2 id="更新方法">更新方法</h2><p>模式说明：更新方法，通过每次处理一帧的行为来模拟一系列独立对象。</p>
<h1 id="行为型模式">行为型模式</h1><h2 id="字节码">字节码</h2><p>模式说明：字节码模式，将行为编码为虚拟机器上的指令，来赋予其数据的灵活性。从而让数据易于修改，易于加载，并与其他可执行部分相隔离。</p>
<h2 id="子类沙盒">子类沙盒</h2><p>模式说明：用一系列由基类提供的操作定义子类中的行为。</p>
<h2 id="类型对象">类型对象</h2><p>模式说明：创造一个类A来允许灵活的创造新的类，而类A的每个实例都代表了不同类型的对象。</p>
<h2 id="组件模式">组件模式</h2><p>模式说明：允许单一的实体跨越多个领域，无需这些领域彼此耦合。</p>
<h2 id="事件队列">事件队列</h2><p>模式说明：事件队列模式，对消息或事件的发送与处理进行时间上的解耦。</p>
<h2 id="服务定位器">服务定位器</h2><p>模式说明：提供服务的全局接入点，而不必让用户和实现它的具体类耦合。</p>
<h1 id="优化型模式">优化型模式</h1><h2 id="数据局部性">数据局部性</h2><p>模式说明：合理组织数据，充分使用CPU的缓存来加速内存读取。</p>
<h2 id="脏标记模式">脏标记模式</h2><p>模式说明：将工作延期至需要其结果时才去执行，以避免不必要的工作。</p>
<h2 id="对象池">对象池</h2><p>模式说明：放弃单独地分配和释放对象，从固定的池中重用对象，以提高性能和内存使用率。</p>
<h2 id="空间分区">空间分区</h2><p>模式说明：将对象存储在基于位置组织的数据结构中，来有效的定位对象。</p>
<h1 id="笔记更新记录">笔记更新记录</h1><p>2017-10-20 文章大致结构 概述 命令模式 （终于决定开始写博客</p>
<p>2017-10-21 至 单例模式</p>
<p>2017-10-24 至 游戏循环</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写一点更一点 更新时间不定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我读书有个习惯：先看作者面相。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《游戏编程模式》的作者是一个从小学开始写
    
    </summary>
    
    
      <category term="game" scheme="http://yoursite.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>U3D Beginner</title>
    <link href="http://yoursite.com/2017/10/13/roll_a_ball/"/>
    <id>http://yoursite.com/2017/10/13/roll_a_ball/</id>
    <published>2017-10-12T18:54:24.000Z</published>
    <updated>2017-10-20T14:14:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>手撸了官方两个例子后稍微回忆一下</p>
</blockquote>
<h2 id="Roll_a_ball">Roll a ball</h2><p>U3D入门第一课，大概讲了一个Unity游戏的基本组成，比如摄像机，光源，实例化的物体和prefabs等。界面和iOS开发差不多，但是调参时基本上需要你自己定制界面。</p>
<p>物体碰撞模块那时候看的似懂非懂（物理引擎我还停留在box2d.js的阶段），到下一课明白基本Trigger的概念，简单来说，就是你希望Rigidbody（刚体）发生碰撞并由此发生相应的后续运动时，那就取消双方的trigger选项；如果你不希望某个物体因接触而运动时，仅仅是作为一个事件的触发器，那就将其设为Trigger。Trigger可以不受物理效果影响，一些可穿透区域的碰撞检测，可以使用Trigger来进行碰撞检测，包括进入和离开。</p>
<p>Is Kinematic 是否参与物理系统，有用的属性，相当于不受力的『恒星』，因为毕竟也是rigidbody，会有质量等参数。</p>
<p>整个游戏没有流程控制，得分事件绑定随意，最后作为PC/Mac/Linux端导出</p>
<h2 id="Space_Shooter">Space Shooter</h2><p>U3D入门第二课，教你做一个基本上完整的Web独立游戏（实际上和PC端相同）。最后补充了把此游戏构建于iOS上的补充步骤，包括控制判断和重启判断。</p>
<p>移动端和PC端的操控方式虽然不同，但是逻辑相同，所以这个部分的个人见解是需要把这个部分分离出来（当然这个时候 Oct.20 我已经知道这个实际上是一种游戏中常见的叫做『命令模式』的设计模式。例子中因为逻辑简单，比较简陋，但是如果你需要例如『改键』操作的话，是必须使用的）。</p>
<p>游戏重点包括光源（主光源，辅光源，还有补光），几种不同的碰撞器（简单的说按照游戏要求碰撞几何越简单越好）</p>
<p>任何游戏逻辑都要绑在一个gameobject上，比如总逻辑要绑在一个空的全局游戏对象上，然后任何全局设定相关的游戏参数可以一同绑在它上面，例如游戏总背景音乐。</p>
<p>所有的Controller都是Mono-Class。在Project里的都是类（当然包括Prefabs，当然），而在Hierachey里的物体都是实例化对象（如果你写过Android或者iOS原生应用就会知道这个概念），所以你把Project里的东西拖动至具体指定对象的时候<br>（非构造器），会发现拖不进去，这是当然的。这个时候我们要必须给实例化的对象加上tag，然后在Start()中用FindGameObject(s)WithTag（or CompareTag）来找到实例化的一个（类）对象。</p>
<p>PascalCase is better than camelCase for naming methods</p>
<p>U5和U4的方法大相径庭，以新的版本为准。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;手撸了官方两个例子后稍微回忆一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Roll_a_ball&quot;&gt;Roll a ball&lt;/h2&gt;&lt;p&gt;U3D入门第一课，大概讲了一个Unity游戏的基本组成，比如摄像机，光源，实例化的物体和prefa
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="djagno" scheme="http://yoursite.com/tags/djagno/"/>
    
  </entry>
  
  <entry>
    <title>我是个组装机白痴</title>
    <link href="http://yoursite.com/2017/09/19/comidiot/"/>
    <id>http://yoursite.com/2017/09/19/comidiot/</id>
    <published>2017-09-18T18:54:24.000Z</published>
    <updated>2017-09-21T07:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本来是计划近期内吃土买一台整机的，但是在好多人的指引下变得困惑不已</p>
</blockquote>
<h1 id="Foward">Foward</h1><p>事情是这样的，我在淘宝逛到这台主机：</p>
<p><img src="https://img.alicdn.com/imgextra/i2/832641540/TB2BjNqXBoHL1JjSZFAXXc1rXXa_!!832641540.jpg" alt="scboy.taobao.com"></p>
<p>马上我就去看看它的配置，在详情页下看到了它是根据不同配置分成五个价位，这里放出前三个：</p>
<p><img src="https://img.alicdn.com/imgextra/i3/832641540/TB2vuFxXgoQMeJjy0FoXXcShVXa_!!832641540.jpg" alt="¥6699.00"></p>
<p><img src="https://img.alicdn.com/imgextra/i1/832641540/TB2g0plXEAKL1JjSZFkXXa8cFXa_!!832641540.jpg" alt="¥8699.00"></p>
<p><img src="https://img.alicdn.com/imgextra/i4/832641540/TB2RaxvXgsSMeJjSspdXXXZ4pXa_!!832641540.jpg" alt="¥10999.00"></p>
<p>恩，这个价格我是可以接受的。我拿着图1去问gay哈，gay哈表示赞同，表示没被坑</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/17.9.19/c0.png" alt=""></p>
<p>我又拿着这个图去问桐哥，桐哥表示这明显价格不对，并发给我他的配置</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/17.9.19/c1.png" alt=""></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/17.9.19/c2.png" alt=""></p>
<p>桐哥还说前一段时间优惠大约只需要4k多。我打开一看，顿时开始怀疑人生 <a href="http://item.jd.com/1555771170.html" target="_blank" rel="external">武极 i7 7700/8G/华硕GTX1060 游戏台式电脑主机/DIY组装机</a></p>
<p><img src="http://img14.360buyimg.com/n0/jfs/t4957/89/73465466/141719/2e72323d/58da27a5N6a74cd4c.jpg" alt="握草，这配置，这价格"></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/17.9.19/c3.png" alt="gay哈和我都很困惑"></p>
<p>于是乎我开始准备上知乎求助，但是发现知乎好像除了我一个人全部都用的组装机，整机党是异端。</p>
<p>『自己组装很爽』『整机有猫腻』『不要用新手做借口，谁不是新手过来的？』</p>
<p>我感到很惶恐，经过几分钟的软文洗脑以后，我简单看了几个装机视频，在自己组装之前，我想看看这个机子买整机的话到底会坑我多少钱。</p>
<h1 id="配置查询">配置查询</h1><p>（以下配置信息均来源于我手搜，有多个近似商品时，以型号近似为准；有多个相同商品时，以官方旗舰店为准。</p>
<h2 id="CPU">CPU</h2><table>
<thead>
<tr>
<th>i5-7500</th>
<th>i7-7700</th>
<th>i7-7700k</th>
</tr>
</thead>
<tbody>
<tr>
<td>￥1399</td>
<td>￥2199</td>
<td>￥2499</td>
</tr>
</tbody>
</table>
<p><a href="https://item.jd.com/4132882.html##none" target="_blank" rel="external">https://item.jd.com/4132882.html##none</a></p>
<p> （英特尔旗舰店）</p>
<h2 id="显卡">显卡</h2><p>大致参考：</p>
<table>
<thead>
<tr>
<th>GTX1050TI</th>
<th>GTX1060TI</th>
<th>GTX1080TI</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000~1200</td>
<td>1800~2200</td>
<td>4000+</td>
</tr>
</tbody>
</table>
<p>华硕 STRIX （猛禽）</p>
<table>
<thead>
<tr>
<th>GTX1050TI</th>
<th>GTX1060</th>
<th>GTX1070</th>
<th>GTX1080TI</th>
</tr>
</thead>
<tbody>
<tr>
<td>￥1399</td>
<td>￥2799</td>
<td>￥3799</td>
<td>￥7399</td>
</tr>
</tbody>
</table>
<p><a href="https://item.jd.com/3640705.html" target="_blank" rel="external">https://item.jd.com/3640705.html</a></p>
<p>（华硕旗舰店）</p>
<h2 id="主板">主板</h2><p>华硕 STRIX B250I GAMING</p>
<p>   ￥1099</p>
<p><a href="https://item.jd.com/4311113.html##crumb-wrap" target="_blank" rel="external">https://item.jd.com/4311113.html##crumb-wrap</a></p>
<h2 id="电源">电源</h2><p>ANDYSON H6 SERIES 600W金牌半模组</p>
<p>   ￥300</p>
<p>(未查到，大致300左右)</p>
<h2 id="内存">内存</h2><p>G.Skill Ripjaws DDR4 2400 8G  (*2)</p>
<p>   ￥579  ( *2= ￥1158 )</p>
<p><a href="https://item.taobao.com/item.htm?spm=a230r.1.14.13.76bf523x4s3AE&amp;id=549060502110&amp;ns=1&amp;abbucket=2##detail" target="_blank" rel="external">https://item.taobao.com/item.htm?spm=a230r.1.14.13.76bf523x4s3AE&amp;id=549060502110&amp;ns=1&amp;abbucket=2##detail</a></p>
<p>   ￥1199</p>
<p><a href="https://item.jd.com/2066808.html##none" target="_blank" rel="external">https://item.jd.com/2066808.html##none</a></p>
<h2 id="固态硬盘_HDD">固态硬盘 HDD</h2><p>APACER AS340 120G</p>
<p>  ￥369.00</p>
<p><a href="https://item.jd.com/10687235944.html" target="_blank" rel="external">https://item.jd.com/10687235944.html</a></p>
<h2 id="机械硬盘_SSD">机械硬盘 SSD</h2><p>希捷(SEAGATE)酷鱼系列 1TB 7200转64Mv </p>
<p>   ￥329</p>
<p><a href="https://item.jd.com/3843702.html##crumb-wrap" target="_blank" rel="external">https://item.jd.com/3843702.html##crumb-wrap</a></p>
<h2 id="机箱">机箱</h2><p>CORSAIR 380T 白色</p>
<p>  ￥999</p>
<p><a href="https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.6.4c637810SOnu4i&amp;id=42859563387&amp;skuId=90458760832" target="_blank" rel="external">https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.6.4c637810SOnu4i&amp;id=42859563387&amp;skuId=90458760832</a></p>
<h2 id="风扇">风扇</h2><p>Eclipse 光轮12cm</p>
<p>  ￥59 * 5 = ￥295</p>
<p><a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.1.76bf523zOCf2G&amp;id=558284350071&amp;cm_id=140105335569ed55e27b&amp;abbucket=2" target="_blank" rel="external">https://detail.tmall.com/item.htm?spm=a230r.1.14.1.76bf523zOCf2G&amp;id=558284350071&amp;cm_id=140105335569ed55e27b&amp;abbucket=2</a></p>
<h2 id="水冷">水冷</h2><p>VTG寒霜之龙240</p>
<p>  ￥259</p>
<p><a href="https://item.jd.com/4918108.html" target="_blank" rel="external">https://item.jd.com/4918108.html</a></p>
<h1 id="计算价格">计算价格</h1><p>为了直观，计算过程放到脚本中：</p>
<h2 id="简单计算">简单计算</h2><p>fuck.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">cpu = [<span class="number">1399</span>, <span class="number">2199</span>, <span class="number">2499</span>]</div><div class="line"></div><div class="line">g_card = [<span class="number">1399</span>, <span class="number">2799</span>, <span class="number">3799</span>, <span class="number">7399</span>]</div><div class="line"></div><div class="line">mainboard = <span class="number">1099</span></div><div class="line"></div><div class="line">power = <span class="number">300</span></div><div class="line"></div><div class="line">ram = [<span class="number">579</span>, <span class="number">1158</span>]</div><div class="line"></div><div class="line">ssd = <span class="number">369</span></div><div class="line"></div><div class="line">hdd = <span class="number">329</span></div><div class="line"></div><div class="line">box = <span class="number">999</span></div><div class="line"></div><div class="line">fan = <span class="number">59</span> * <span class="number">5</span></div><div class="line"></div><div class="line">watercooler = <span class="number">259</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">(n)</span>:</span></div><div class="line">    cons = mainboard + power + ssd + box + fan + watercooler</div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">        cpu_p = cpu[<span class="number">0</span>]</div><div class="line">        g_card_p = g_card[<span class="number">0</span>]</div><div class="line">        ram_p = ram[<span class="number">0</span>]</div><div class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</div><div class="line">        cpu_p = cpu[<span class="number">1</span>]</div><div class="line">        g_card_p = g_card[<span class="number">1</span>]</div><div class="line">        ram_p = ram[<span class="number">0</span>]</div><div class="line">    <span class="keyword">if</span> n == <span class="number">3</span>:</div><div class="line">        cpu_p = cpu[<span class="number">2</span>]</div><div class="line">        g_card_p = g_card[<span class="number">2</span>]</div><div class="line">        ram_p = ram[<span class="number">1</span>]</div><div class="line">        cons += hdd</div><div class="line">    var = cpu_p + g_card_p + ram_p</div><div class="line">    <span class="keyword">return</span> cons + var</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</div><div class="line">        print(<span class="string">'plan %s: %s'</span>%(i, cal(i)))</div></pre></td></tr></table></figure>
<h2 id="输出">输出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plan 1: 6698</div><div class="line">plan 2: 8898</div><div class="line">plan 3: 11106</div></pre></td></tr></table></figure>
<p>纳尼。。。</p>
<h1 id="结果">结果</h1><p>对海盗船的整机鉴定让我感到意外，套餐售价和成本相差无几……对前三个套餐的计算结果表面：『如果整机没有任何的问题，组装人是从网上购置零件的话，那这个贩卖是不赚，甚至亏钱的。』</p>
<p>那问题来了，京东的组装机。。。</p>
<p>—————————9.21更新—————————</p>
<p>京东的配置我也去查了一哈：</p>
<table>
<thead>
<tr>
<th>Part</th>
<th>Brand</th>
<th>Price</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>i7 7700</td>
<td>￥2199</td>
</tr>
<tr>
<td>主板</td>
<td>华硕 B250 M-ATX（紧凑型）</td>
<td>￥699</td>
</tr>
<tr>
<td>内存</td>
<td>英睿达 DDR4 2400 8GB</td>
<td>￥589</td>
</tr>
<tr>
<td>显卡</td>
<td>华硕 独立显卡 GTX1060 3GB</td>
<td>￥1899</td>
</tr>
<tr>
<td>硬盘</td>
<td>三星 固态硬盘 M.2接口 128GB</td>
<td>￥469</td>
</tr>
<tr>
<td>机箱</td>
<td>游戏悍将 中塔式机箱</td>
<td>￥209</td>
</tr>
<tr>
<td>电源</td>
<td>长城 301W-400W</td>
<td>￥329</td>
</tr>
<tr>
<td>散热器</td>
<td>九州风神 风冷</td>
<td>￥129</td>
</tr>
</tbody>
</table>
<p>（因为上面的配置都没有标注具体型号，所以价格选取时存在多个，按照最低的来算。</p>
<p>shit.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cpu = <span class="number">2199</span></div><div class="line">mb = <span class="number">699</span></div><div class="line">ram = <span class="number">589</span></div><div class="line">gc = <span class="number">1899</span></div><div class="line">ssd = <span class="number">469</span></div><div class="line">box = <span class="number">209</span></div><div class="line">power = <span class="number">329</span></div><div class="line">fan = <span class="number">129</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(cpu+mb+ram+gc+ssd+box+power+fan)</div></pre></td></tr></table></figure>
<p>ouput:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6522</div></pre></td></tr></table></figure></p>
<p>即使东西都按照最低价格算，计算价格仍高出配置价格1500多。。大概自营店批发的成本要低很多，难道说暴利的地方不在于组装费，而在于零件中间的利润？当然卖整机本来就没多少利润。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本来是计划近期内吃土买一台整机的，但是在好多人的指引下变得困惑不已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Foward&quot;&gt;Foward&lt;/h1&gt;&lt;p&gt;事情是这样的，我在淘宝逛到这台主机：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>大三结束了</title>
    <link href="http://yoursite.com/2017/07/17/%E5%A4%A7%E4%B8%89%E7%BB%93%E6%9D%9F%E4%BA%86/"/>
    <id>http://yoursite.com/2017/07/17/大三结束了/</id>
    <published>2017-07-17T01:54:24.000Z</published>
    <updated>2017-07-17T02:58:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>虽然不是很明白，还是抬头向前看吧～</p>
</blockquote>
<h2 id="关于实习">关于实习</h2><p>我的第一份实习工作 离学校很近 工资也不错 只是一个实习 工资就给我开了4k 而且老板下个月就承诺给我加工资 但是这4个月以来总觉得做着这个事情少了些什么</p>
<p>某天上班的时候中午是午睡时间 我没睡然后看了会星际比赛录播（刚吃过午饭 2点才开始下午班）老板看到直接摆脸色说上班不要做这种事情 那个时候我就意识到了什么 加上平时气氛又不太好 除了公事以外无话可谈 技术的事情又聊不来几句 平时又任由需求摆布改到吐血 我就有了这种事情不适合我的感觉</p>
<p>老板时时刻刻对我的警戒也让我寒心 每天下班前说的最后一句话就是让我提交代码 当然出于程序员的素养 我的代码都写成随时可以让人接手并看的一目了然的架构 果然我一走 算起来已经半个月了 老板就再也没有联系我 一点问题都没出 呵呵 真的应该学学《Write code that nobody else can read🐮》</p>
<p>而且 然后明明是一起写的那部分功能 客户找到bug了就全部甩锅给我 哦 一共两个bug 其中一个就叫做『冰山一角』了啊 所以我常常自嘲我虽然岗位上写的是后台 其实做的是全栈开发 顺便测试 顺便运维 顺便和甲方撕逼 顺便背锅</p>
<p>我问了刚辞职不久的UI 学姐 她说 你想辞就辞啊 你现在还早 大三还有的是机会 我是应届生 没有办法 辞职都要考虑很多</p>
<p>辞职不是偶然 UI学姐的离职 对潜加班的不爽 对氛围的不满 对团队水平的质疑 只是最后找了学车这个理由 一夜之间不辞而别</p>
<p>辞职前 作为一个实习生 我总结的理由如下</p>
<ol>
<li>本来就对老板没有安全感，近期又问了下，老板对未来并没有一个长远的计划，更加没有安全感</li>
<li>公司氛围不自由。我能按时完成每天任务，又不在任何感官上影响他人，你管我做什么？4个人的公司还要面子工程</li>
<li>一样的活，朝九晚四能做完，拖到加班四五个小时，就证明什么？（心疼朝九晚十才发4k的学长）如果真的按时间计费，那我认认真真coding8小时，和刷1天的日剧，有什么区别？</li>
<li>我做的事情明确超过了责任的范围（而且基本每天就没按时下过班），我提了不下2次的加薪，第一次说转正再说，第二次说你当初不是说钱不重要么（这种那客套话出来当理由的，活久见。后来在我离职的前一周可能终于察觉了什么，说下个月给你加薪，我就更加决心了离职</li>
<li>……</li>
</ol>
<p>当然上面这些原因我不可能直接给老板说，以他的性格，他肯定用人类通用规则那一套理论反驳我，类似于“一般来说”“难道不是”“至少也要”<br>之类，或者说，他仅仅只是不爽而已。我只想说员工不是傻子。明明有好的一套方案，为什么要用糟糕的那种？</p>
<p>顺便走的时候 为了避免不必要的麻烦 把离职原因全部归到自己头上 明确态度 毫无余地 不再回头</p>
<p>简历喜加一：<code>5p2t5bee5rWp6YCU572R57uc56eR5oqA5pyJ6ZmQ5YWs5Y+4</code>（ 2017.3.21 - 2017.6.30 ）</p>
<p>裸辞一周后 我开始反省到底是哪里不对劲 为什么我会放弃这样的一份实习 最后觉得 其他的原因有但不是关键 真正的理由是这个</p>
<ol>
<li>这不是一份具备创造性的工作，只是单纯的写外包而已，而且还要长期写上一段时间。没有办法进行「表达」自我。</li>
<li>这不是一份自由的事业，按时打卡的制度存在缺陷。衡量员工应该取决于他实际创造的价值，而不是时间或者其他。人因此变得消极。</li>
</ol>
<p>大概内心不自觉地意识到这两点，潜意识里开始害怕，想要光速逃离，甚至连公司里我留下的手办和书籍都没考虑就给老板从感谢信开始发信息。</p>
<h2 id="关于未来">关于未来</h2><p>果然还是自由创造最有趣啊。可能学个乐器，可能学学板绘，可能学门新技♂术。</p>
<p>这种大热天学车，果然是在作死。</p>
<p>为了自由的创造性的事业，积累基础</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;虽然不是很明白，还是抬头向前看吧～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关于实习&quot;&gt;关于实习&lt;/h2&gt;&lt;p&gt;我的第一份实习工作 离学校很近 工资也不错 只是一个实习 工资就给我开了4k 而且老板下个月就承诺给我加工资 但是这4个月以
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>创作与创作欲</title>
    <link href="http://yoursite.com/2017/05/27/creative-desire/"/>
    <id>http://yoursite.com/2017/05/27/creative-desire/</id>
    <published>2017-05-27T01:17:07.000Z</published>
    <updated>2017-06-13T02:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释">解释</h2><p>创作：创作，指创造文学艺术作品，也可作文艺作品。创作是我们造型综合能力与艺术创造能力的集中体现。在学习创作的过程中，能够同时满足我们对于求知和创造的快感需求。</p>
<p>一次创作：原创</p>
<p>二次创作：二次创作（re-creation，又称再创作）是指使用了已存在著作物的文字、图像、影片、音乐或其他艺术作品。而这些作品则称为“二次创作物 (Derivative work)”。</p>
<p>表达能力：表达能力又叫做表现能力或显示能力，是指一个人把自己的思想、情感、想法和意图等，用语言、文字、图形、表情和动作等清晰明确地表达出来，并善于让他人理解、体会和掌握。</p>
<h2 id="锤子效应">锤子效应</h2><p>有一个用来嘲讽程序员的说法，叫做如果你手里有一把锤子，那你会把所有的问题看成钉子。其实这个问题很容易理解，因为把问题看成钉子，是最容易也是最安全快捷的解决方案，我手里有一把锤子，隐含的意思是其他人都没有锤子，换而言之，这把锤子是我积累的难以取代的优势。</p>
<p>有个命题叫做『越优秀的人越努力』，这个命题完整的说法应该是『在某一方面成功的人，在该方面越努力』，（原命题流传更广的原因是夸大优劣人之间的全面差距感，增加说服力🐶），因为在已经有所建树的领域中，相对其他人获得进一步的成就更加容易。</p>
<p>换一个角度说，在确认了自己不擅长的领域中，作为的行动力就会减少。在『生存空间』中已经存在一个或多个某领域的强者，更是如此。强者渴望竞争，弱智避开竞争，是生物的天性。</p>
<p>这大概也解释了为什么专业里喜欢编程的人寥寥无几，很多社团群和死了没区别，充满了「大佬」「膜拜」等快活的气息。大二都快读完了，很多人还是一无所知。我没有为他们感到任何遗憾的意思，相反我觉得是生物本能嘛，生物本能总是对的。</p>
<h2 id="创作欲的时间曲线">创作欲的时间曲线</h2><p>普通人的创作欲大体上是随着时间改变的，在或早或晚有一个峰值，呈现出先高后低的一种趋势。确切的说，横轴并不是只有时间，变量因素还包括阅读量和环境。</p>
<h3 id="峰值之前">峰值之前</h3><p>举个小基同学的例子。小基同学在初中时先人一步受到了大量国外文学影视音乐作品的冲击，而其他人并不了解小基同学的爱好。这是小基同学反复揣摩作品中的文字和情感，就会产生创作欲。小基同学写了一点东西，感觉不错，拿去给别人看，得到了褒贬不一的评价，小基同学很满足。</p>
<p>小基同学随着阅读量越来越高，不再满足于模仿同一个作者，开始走不同的路线。这是小基同学意识到一个问题，自己的鉴赏能力提高了，发现自己写的东西其实并不好。</p>
<h3 id="峰值之后">峰值之后</h3><p>意识到这个问题后，这个时候小基慢慢停止了创作。但这并不是表明小基同学的文化水平下降了。因为这个时候，小基同学的『阅读欲』远高于『创作欲』。他开始明白，『创作』≠『表达』，这是一个完全不同的领域，一个好的作品相关因素很多，最重要的还是作品本身的质量。于是小基同学到最后终于明白，创作真tm难。优异的作品令人望而却步。虽然小基同学仍然是个文艺青年，但是他基本上都是在重复别人的作品，基本上很少有自己的观点了。</p>
<h3 id="再到峰值"><del>再到峰值</del></h3><p><del>小基同学的阅读积累量最终到了一定程度，他发现市面上的作品已经不能满足他了，他的鉴赏力已经突破了天际，这个时候只有他自己写的东西才能满足自己，于是小基同学又再次激发了创作欲，到了这个阶段，小基同学的职业生涯就算起步了</del></p>
<h2 id="创作的因素">创作的因素</h2><h3 id="表达能力">表达能力</h3><p>有时候我们思如泉涌，但是到下笔时却脑袋一片空白，这个时候我们称之为表达能力不足。表达能力很复杂，包括口头表达能力、文字表达能力、数字表达能力、图示表达能力…这种能力不完全依赖先天，和后天培养和环境有关。我相信这些能力人人都能通过基础而系统的训练得到强化（遗憾的是很多学校和老师都没有意识到这一点），这是创作力的因素之一。有灵感而无法记录下来，多么令人遗憾。</p>
<h3 id="表达欲">表达欲</h3><p>创作≠表达，但是创作欲≈表达欲，表达欲来源于需求或不满。作家追求孤独的原因一部分来源于此。安定的生活会让人整体趋向于满足，所以很多一次创作者会有自残倾向，会刻意的体会『失去』的感觉，同时对自己欲望零克制，又会有一定的犯罪倾向。『得到』并不能引起共鸣，『失去』等负面因素才能，这源于弱势生物抱团提高生存率的本能。人类，可悲可叹，可悲可叹。</p>
<h3 id="素材">素材</h3><p>有的文章易受到作者见闻的制约，很多人不喜欢看国内的玄幻题材，就是因为题材老旧，作者本身就是从老题材中选题材。然而一次创作比较受欢迎的原因就是因为新素材，尤其是一些依附现实的而不常见的题材（就这点而言，我觉得《故事会》比《萌芽》好得多，但是你说文学水平那个高？不见得）。</p>
<p>现在比较令人烦躁的事情不仅仅政府压制一次创作者，更是对一部分创作者感到沮丧。现在创作都这么廉价么，关起门来幻想就行了？我印象中的一次创作不应该是背上背包，四处取材，去关切脱离日常生活的边缘经验么？还有一些搞笑的题材，如果是为了搞笑而搞笑（例如毫无理由的策划阴谋），那出发点就错了，这种题材并不能达到效果，只能让读者要么感到幼稚，要么徒增伤悲。写作有个基本原则，宜庄不宜谐，搞笑也一样。别忘了生物本能，弱小才能吸引人。<a href="https://zh.wikipedia.org/wiki/慕残" target="_blank" rel="external">wiki:慕残</a></p>
<h3 id="环境">环境</h3><p>环境有的时候很重要，有的时候没那么重要。环境直接或间接的影响着上面三个因素。最开始是我们童年培养的人生价值观，基本来源于父母。（例如我经常举的普通老板和富二代老板的区别。）之后来源于接触的环境，这个时候的观念于适应环境而形成。在适应环境基础上再发展的时候，环境就没那么重要了，这个时候的价值观会开始变得普世起来。</p>
<p>不管看问题的角度如何，一定要学会多角度观察问题。你的环境只能给你提供一个角度（自我），不要执着于这一个角度。交流和表达不是单向的，你在输出的过程中一定要考虑另一边输入的问题，你的受众如何，你的角度如何，这也是一个表达能力的问题。</p>
<p>（完）</p>
<h2 id="例子">例子</h2><p>有一个业界毒瘤的游戏工作室，它的名字或多或少你可能听过，没错，就是<code>5aSp576O6Im65ri4</code> 以下简称t室，t室毁掉了很多市面上的游戏<br><a href="http://cnews.chinadaily.com.cn/2017-04/05/content_28798810.htm" target="_blank" rel="external">随手一篇新闻</a></p>
<p>最令人咬牙的事情是，t室一群国内985，写出三流鉴赏水平的作品。他们凭着用户基数胡作非为，对其他游戏进行打压。甚至某手游作品直接照搬<a href="https://www.zhihu.com/question/59180416" target="_blank" rel="external">虚荣</a> ，<a href="https://www.zhihu.com/question/48991180" target="_blank" rel="external">自由之战（这个好像有反转）</a>，<a href="https://www.zhihu.com/question/55484682" target="_blank" rel="external">风暴英雄</a>。连思考都不需要。这个工作室在国内带来的负面影响是，使得原创游戏不仅在生产困难情况下，甚至大环境也相当恶劣。</p>
<p>t室所属公司到现在不吃官司也是奇迹，国内对于自己cx外国作品可以说是睁一只眼闭一只眼，两套政策玩的也是厉害。这里我只能说一句，善恶终有报，天道好轮回。</p>
<p>我曾经对这个公司有所期待，觉得公司尚处于积累阶段，积累是必要且缓慢的，积累到一定境界之后，不满足于市面，开始创新。但现在我觉得这个公司不会改变，下判断的原因是因为以下几点：</p>
<p>1.大环境太好</p>
<p>t室某手游员工年终奖发了<a href="https://www.zhihu.com/question/55079526" target="_blank" rel="external">82个月年终奖</a>，我不觉得这种环境会激起人的创作欲。搬搬砖头就行了嘛，我tm为啥要去烧土呢？</p>
<p>2.公司战略</p>
<p>这公司虽然不愿承认，但是收入来源绝大部分来源于游戏<a href="http://www.yxdown.com/news/201703/345120.html" target="_blank" rel="external">去年收入比</a>。这时候调动资源去做一个不赚钱的游戏？公司重心明显放在运营上好吗。</p>
<p>3.弱智策划</p>
<p>我真是难以理解，我国教育就达到这个水平。哎，不再说了。不过事情也没错，思变是失败者才去做的事情嘛，我这样能赚钱，我干嘛要创新啊。</p>
<p>4.GFW</p>
<p>墙的存在，使『一般』国人丧失大量优秀国外游戏的接触机会，而且国外游戏著作法律健全，抄袭0容忍，这就注定了在国内出不了大作，因为你走不出国门啊。当然你要说中国人傻钱多，我也没有办法，事实就是这样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解释&quot;&gt;解释&lt;/h2&gt;&lt;p&gt;创作：创作，指创造文学艺术作品，也可作文艺作品。创作是我们造型综合能力与艺术创造能力的集中体现。在学习创作的过程中，能够同时满足我们对于求知和创造的快感需求。&lt;/p&gt;
&lt;p&gt;一次创作：原创&lt;/p&gt;
&lt;p&gt;二次创作：二次创作（re-cre
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cbv是个好东西三（完）</title>
    <link href="http://yoursite.com/2017/05/04/cbv%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF%E4%B8%89/"/>
    <id>http://yoursite.com/2017/05/04/cbv是个好东西三/</id>
    <published>2017-05-04T03:19:45.000Z</published>
    <updated>2017-10-20T14:11:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实到现在，我已经有点后悔放弃Oscar了，Oscar现在在我看来是一个非常好的框架，它用了非常棒的第三方支持，例如一些tableMixin</p>
<p>以下是一些构建Django-b2b网站的解决方案，做过web的同学都懂</p>
<h2 id="cbv_mixin">cbv mixin</h2><p><a href="https://docs.djangoproject.com/en/dev/topics/class-based-views/mixins/" target="_blank" rel="external">https://docs.djangoproject.com/en/dev/topics/class-based-views/mixins/</a></p>
<h2 id="bootstrap-icon">bootstrap-icon</h2><p><a href="https://www.w3schools.com/bootstrap/bootstrap_ref_comp_glyphs.asp" target="_blank" rel="external">https://www.w3schools.com/bootstrap/bootstrap_ref_comp_glyphs.asp</a></p>
<h2 id="国际化问题">国际化问题</h2><p><a href="http://code.ziqiangxuetang.com/django/django-internationalization.html" target="_blank" rel="external">http://code.ziqiangxuetang.com/django/django-internationalization.html</a></p>
<p><a href="http://djangobook.com/internationalization-url-patterns/" target="_blank" rel="external">http://djangobook.com/internationalization-url-patterns/</a></p>
<p><a href="https://www.xncoding.com/2015/08/24/simpleblog-12.html" target="_blank" rel="external">https://www.xncoding.com/2015/08/24/simpleblog-12.html</a></p>
<p><a href="http://bastengao.com/blog/2016/11/django-translations.html" target="_blank" rel="external">http://bastengao.com/blog/2016/11/django-translations.html</a></p>
<p><a href="http://djangobook.py3k.cn/2.0/chapter19/" target="_blank" rel="external">http://djangobook.py3k.cn/2.0/chapter19/</a></p>
<h2 id="异步任务">异步任务</h2><p><a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html" target="_blank" rel="external">http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html</a></p>
<p><a href="https://virusdefender.net/index.php/archives/318/" target="_blank" rel="external">https://virusdefender.net/index.php/archives/318/</a></p>
<p><a href="http://blog.csdn.net/iloveyin/article/details/44940931" target="_blank" rel="external">http://blog.csdn.net/iloveyin/article/details/44940931</a></p>
<p><a href="http://www.cnblogs.com/piperck/p/5391128.html" target="_blank" rel="external">http://www.cnblogs.com/piperck/p/5391128.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实到现在，我已经有点后悔放弃Oscar了，Oscar现在在我看来是一个非常好的框架，它用了非常棒的第三方支持，例如一些tableMixin&lt;/p&gt;
&lt;p&gt;以下是一些构建Django-b2b网站的解决方案，做过web的同学都懂&lt;/p&gt;
&lt;h2 id=&quot;cbv_mixin&quot;&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="djagno" scheme="http://yoursite.com/tags/djagno/"/>
    
  </entry>
  
  <entry>
    <title>cbv是个好东西二</title>
    <link href="http://yoursite.com/2017/04/25/cbv%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/04/25/cbv是个好东西二/</id>
    <published>2017-04-25T09:56:01.000Z</published>
    <updated>2017-04-25T10:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>谈一下一些解决方案</p>
</blockquote>
<h2 id="权限控制">权限控制</h2><p>思路</p>
<p>fbv里页面控制访问很简单，在方法上挂上几个修饰器，本质上是重写方法。cbv里控制访问权限使用mixin，<code>django.contrib.auth.mixins</code>里提供了几个基于django user的权限访问方法。只要你的用户是使用django user，或者和django user有联系的就可以直接调用它，例如挂上<code>@login_required</code>的fbv只要在cbv中继承<code>LoginRequiredMixin</code>即可。</p>
<p><code>django.contrib.auth.mixins</code>里除去一个抽象类，总共有3个mixin，用于判断<code>request.user.is_authenticated</code>是否为True的<code>LoginRequiredMixin</code>，用于自定义权限的 <code>PermissionRequiredMixin</code>，和自己设置一个考验方法<code>test_func</code>，返回False就拒绝request的<code>UserPassesTestMixin</code>。注意抽象类<code>AccessMixin</code>里的<code>get_login_url</code>会自动调用全局变量<code>settings.LOGIN_URL</code>，不想这么做的话设置它的属性<code>login_url</code>即可（如果登录入口不止一个的话）</p>
<h2 id="复合类页面">复合类页面</h2><p>思路</p>
<p>之前用的<code>Django-oscar</code>框架的沙盒里，注册和登录界面是一起的，当然这种界面并不少见，很多网站都是用这种写法。但是Django没有这种view，这个时候不能直接同时继承<code>TemplateView</code>和<code>CreateView</code>。因为我们知道，『在同一个上下文中，同名函数或属性将会覆盖』，这样，我们就无法预知这个得到的视图会做出怎样的行为。为了减少代码耦合，并做到简单继承，我们就需要去看这两个视图的关系：</p>
<p>CreateView-&gt;(SingleObjectTemplateResponseMixin, BaseCreateView)</p>
<p>TemplateView-&gt;(ContextMixin, TemplateResponseMixin, View)</p>
<p>因此我们通过(<code>获取数据(Context)</code>,<code>渲染方法(TemplateResponse)</code>,<code>请求处理(View)</code>)的思路得到相应view</p>
<p>LoginRegisterView-&gt;(BaseCreateView)</p>
<p>类似的，比如更新和删除页面：</p>
<p>UpdateView-&gt;(SingleObjectTemplateResponseMixin, BaseUpdateView)</p>
<p>DeleteView-&gt;(SingleObjectTemplateResponseMixin, BaseDeleteView)</p>
<p>得到</p>
<p>UpdateDeleteView-&gt;(SingleObjectTemplateResponseMixin, BaseUpdateView, BaseDeleteView)</p>
<h2 id="fbvs和cbvs源代码转换">fbvs和cbvs源代码转换</h2><p>举例(TemplateView)</p>
<p>拿公司的代码举例, 原主页是一个后台管理界面的主界面，页面功能看上去很复杂，但是从源代码上看只是渲染了几个传入的变量而已。 传入变量的方法为<code>get_context_data</code>，这个方法的根方法在<code>ContextMixin</code>中，加上一个渲染引擎和基本view，之后发现<code>TemplateView</code>刚好够满足需要(真的是刚好)，就直接用这个View即可，当然自己写view也可以。然后<code>LoginRequiredMixin</code>对应<code>@login_required</code>方法，直接继承即可，cbv的权限控制有一个专门的Mixin类。</p>
<p>原代码(fbv)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@login_required</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_view</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">"""后台主页</span></div><div class="line">    """</div><div class="line">    staff = request.user.myuser</div><div class="line">    announcement_list = []</div><div class="line">    menu = <span class="number">0</span></div><div class="line">    <span class="comment"># announcement_list = Announcement.objects.filter(del_status=0).order_by("-create_time")  ##获取公告信息</span></div><div class="line">    <span class="comment"># vacate_count,hr_vacate_count = load_message(staff)</span></div><div class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'dashboard/index.html'</span>, locals(), context_instance=RequestContext(request))</div></pre></td></tr></table></figure>
<p>cbv代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(LoginRequiredMixin, generic.TemplateView)</span>:</span></div><div class="line">    template_name = <span class="string">'dashboard/index.html'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        context = super(IndexView, self).get_context_data(**kwargs)</div><div class="line">        context[<span class="string">'staff'</span>] = self.request.user.myuser</div><div class="line">        context[<span class="string">'announcement_list'</span>] = []</div><div class="line">        context[<span class="string">'menu'</span>] = <span class="number">0</span></div><div class="line">        <span class="keyword">return</span> context</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;谈一下一些解决方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;权限控制&quot;&gt;权限控制&lt;/h2&gt;&lt;p&gt;思路&lt;/p&gt;
&lt;p&gt;fbv里页面控制访问很简单，在方法上挂上几个修饰器，本质上是重写方法。cbv里控制访问权限使用mixin，&lt;code&gt;d
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>cbv是个好东西</title>
    <link href="http://yoursite.com/2017/04/21/cbv%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/"/>
    <id>http://yoursite.com/2017/04/21/cbv是个好东西/</id>
    <published>2017-04-21T05:17:49.000Z</published>
    <updated>2017-04-25T10:00:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原标题: 这两天摸鱼所得</p>
</blockquote>
<p>将狗里cbv与fbv的优劣不阐述, cbv的多态继承与python这种oo语言风格上就保持了一致, 无论是呈现逻辑(View)与业务逻辑(Mixin)都能很好的进行拼接, 更别说有大量的第三方扩展了</p>
<h2 id="1-CBVs的使用原则">1.CBVs的使用原则</h2><p>代码越少越好</p>
<p>永远不要重复代码</p>
<p>View应当只包含呈现逻辑, 不应包括业务逻辑</p>
<p>保持view逻辑清晰简单</p>
<p>不要将CBVs用作403, 404, 500的错误处理程序</p>
<p>保持mixin简单明了</p>
<h2 id="2-如何使用mixin">2.如何使用mixin</h2><p>在编程中mixin是指为继承它的class提供额外的功能, 但它自身却不能单独使用的类. 在具有多继承能力的编程语言中, mixin可以为类增加额外功能或方法. 在Django中, 我们可以使用mixin为CBVs提供更多的扩展性, 当然在类继承过程中, 我们推荐以下原则:</p>
<p>Django自身提供的View永远在最右边</p>
<p>mixin依次在以上view的左边</p>
<p>mixin永远继承自Python的object类型</p>
<h2 id="3-减少重复砌砖头?来看看通用视图">3.减少重复砌砖头?来看看通用视图</h2><p>为了深入了解Django的通用view, 到了痛苦地读源码(文末附)的时候了. 当然如果你不写Django也不妨看看, 读一读或许对模板系统的理解有所启发</p>
<p>来来来我们进入Django.views.generic (anyway), 从简到繁</p>
<h3 id="base-py">base.py</h3><p>颜料盒<code>base.py</code></p>
<table>
<thead>
<tr>
<th>class</th>
<th>Super</th>
<th>Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td>ContextMixin</td>
<td>object</td>
<td>A default context mixin that passes the keyword arguments received by get_context_data as the template context.</td>
</tr>
<tr>
<td>View</td>
<td>object</td>
<td>Intentionally simple parent class for all views. Only implements dispatch-by-method and simple sanity checking.</td>
</tr>
<tr>
<td>TemplateResponseMixin</td>
<td>object</td>
<td>A mixin that can be used to render a template.</td>
</tr>
<tr>
<td>TemplateView</td>
<td>ContextMixin, TemplateResponseMixin, View</td>
<td>A view that renders a template.  This view will also pass into the context any keyword arguments passed by the URLconf.</td>
</tr>
<tr>
<td>RedirectView</td>
<td>View</td>
<td>A view that provides a redirect on any GET request.</td>
</tr>
</tbody>
</table>
<p>三个继承<code>Object</code>的初始class, 这就好比绘图使用的三原色, 后面大部分的Mixin和View都是由它们变化而来. 其中:</p>
<p><code>ContextMixin</code>包含一个<code>get_context_data</code>方法, 用于渲染模板数据</p>
<p><code>View</code>是通用View,包含一个<code>as_view</code>的req到res响应方法, 提供http方法及其允许列表, 进行一些简单的检查</p>
<p><code>TemplateResponseMixin</code>是用于渲染模板的方法, 包括指定模板路径和渲染引擎</p>
<p>这个<code>TemplateView</code>是个简单的模板View, 继承与上面三个对象, 定义了<code>render_to_response</code>, 相当于静态页面 (从fbv转过来的童鞋用这个View并且重写get_context_data方法就能完成简单的fbv-&gt;cbv的转换了)</p>
<p><code>RedirectView</code>重定向View, 重写了<code>get</code>, 只需要处理GET请求的view, 使用<code>url</code>参数指定重定向页面</p>
<h3 id="detail-py">detail.py</h3><p>detail.py里定义了一系列对象信息展示的view, 核心View是最后的<code>DetailView</code></p>
<table>
<thead>
<tr>
<th>class</th>
<th>Super</th>
<th>Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td>SingleObjectMixin</td>
<td>ContextMixin</td>
<td>Provides the ability to retrieve a single object for further manipulation.</td>
</tr>
<tr>
<td>BaseDetailView</td>
<td>SingleObjectMixin, View</td>
<td>A base view for displaying a single object</td>
</tr>
<tr>
<td>SingleObjectTemplateResponseMixin</td>
<td>TemplateResponseMixin</td>
<td>-</td>
</tr>
<tr>
<td>DetailView</td>
<td>SingleObjectTemplateResponseMixin, BaseDetailView</td>
<td>Render a “detail” view of an object. By default this is a model instance looked up from <code>self.queryset</code>, but the view will support display of <em>any</em> object by overriding <code>self.get_object()</code>.</td>
</tr>
</tbody>
</table>
<p><code>SingleObjectMixin</code>扩展了<code>ContextMixin</code>, 使其能够使用model,query等获取对象, 然后通过设置定义的<code>context_object_name</code>去渲染模板内定义的字段</p>
<p><code>BaseDetailView</code>在<code>view</code>上使用了<code>SingleObjectMixin</code>, 给<code>get</code>方法添加了将对象转化为<code>context</code>(上下文)的操作, 使其成为一个能够请求处理对象的基础view, 但是还没有渲染方法, 不设置的原因是还能够绑定删除mixin成为<code>BaseDeleteView</code></p>
<p><code>SingleObjectTemplateResponseMixin</code>无说明, 但是从代码上看是除了渲染方法以外,额外定义默认对象渲染模板名称 默认页面后缀<code>_detail</code> 这个方法多次复用于base类view, 给基础对象处理类view提供渲染方法</p>
<p><code>DetailView</code>详情View, 单纯地继承<code>BaseDetailView</code>和<code>SingleObjectTemplateResponseMixin</code></p>
<h3 id="list-py">list.py</h3><p>list.py用于展示列表, 写法与<code>detail.py</code>类似, 核心View是<code>ListView</code></p>
<table>
<thead>
<tr>
<th>class</th>
<th>Super</th>
<th>Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td>MultipleObjectMixin</td>
<td>Context</td>
<td>A mixin for views manipulating multiple objects.</td>
</tr>
<tr>
<td>BaseListView</td>
<td>MultipleObjectMixin, View</td>
<td>A base view for displaying a list of objects.</td>
<td></td>
</tr>
<tr>
<td>MultipleObjectTemplateResponseMixin</td>
<td>TemplateResponseMixin</td>
<td>Mixin for responding with a template and list of objects.</td>
</tr>
<tr>
<td>ListView</td>
<td>MultipleObjectTemplateResponseMixin, BaseListView</td>
<td>Render some list of objects, set by <code>self.model</code> or <code>self.queryset</code>. <code>self.queryset</code> can actually be any iterable of items, not just a queryset.</td>
</tr>
</tbody>
</table>
<p><code>MultipleObjectMixin</code>与<code>SingleObjectMixin</code>不同的方式扩展了<code>ContextMixin</code>, 使其能够使用model等获取queryset之外, 额外提供了页面分页功能及其参数和方法</p>
<p><code>BaseListView</code>是一个能够请求处理对象列表的基础view, 但是还没有渲染方法</p>
<p><code>MultipleObjectTemplateResponseMixin</code>功能都差不多..</p>
<p><code>ListView</code>单纯继承上面两个</p>
<h3 id="edit-py">edit.py</h3><p>edit.p涉及了CRUD, 所以引入了<code>form</code>的概念, 核心View为<code>CreateView</code>,<code>UpdateView</code>,<code>DeleteView</code>,这里的View比较耳熟吧</p>
<table>
<thead>
<tr>
<th>class</th>
<th>Super</th>
<th>Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td>FormMixinBase</td>
<td>type</td>
<td>-</td>
</tr>
<tr>
<td>FormMixin</td>
<td>six.with_metaclass(FormMixinBase, ContextMixin)</td>
<td>A mixin that provides a way to show and handle a form in a request.</td>
</tr>
<tr>
<td>ModelFormMixin</td>
<td>FormMixin, SingleObjectMixin</td>
<td>A mixin that provides a way to show and handle a modelform in a request.</td>
</tr>
<tr>
<td>ProcessFormView</td>
<td>View</td>
<td>A mixin that renders a form on GET and processes it on POST.</td>
</tr>
<tr>
<td>BaseFormView</td>
<td>FormMixin, ProcessFormView</td>
<td>A base view for displaying a form</td>
</tr>
<tr>
<td>FormView</td>
<td>TemplateResponseMixin, BaseFormView</td>
<td>A view for displaying a form, and rendering a template response.</td>
</tr>
<tr>
<td>BaseCreateView</td>
<td>ModelFormMixin, ProcessFormView</td>
<td>Base view for creating an new object instance. Using this base class requires subclassing to provide a response mixin.</td>
</tr>
<tr>
<td>CreateView</td>
<td>SingleObjectTemplateResponseMixin, BaseCreateView</td>
<td>View for creating a new object instance, with a response rendered by template.</td>
</tr>
<tr>
<td>BaseUpdateView</td>
<td>ModelFormMixin, ProcessFormView</td>
<td>Base view for updating an existing object. Using this base class requires subclassing to provide a response mixin.</td>
</tr>
<tr>
<td>UpdateView</td>
<td>SingleObjectTemplateResponseMixin, BaseUpdateView</td>
<td>View for updating an object, with a response rendered by template.</td>
</tr>
<tr>
<td>DeletionMixin</td>
<td>object</td>
<td>A mixin providing the ability to delete objects</td>
</tr>
<tr>
<td>BaseDeleteView</td>
<td>DeletionMixin, BaseDetailView</td>
<td>Base view for deleting an object. Using this base class requires subclassing to provide a response mixin.</td>
</tr>
<tr>
<td>DeleteView</td>
<td>SingleObjectTemplateResponseMixin, BaseDeleteView</td>
<td>View for deleting an object retrieved with <code>self.get_object()</code>, with a response rendered by template.</td>
</tr>
</tbody>
</table>
<p>注: six是一个python2和python3兼容库.</p>
<p><code>FormMixinBase</code>继承type定义了一个类型, 重写了<code>__new__</code>, 内容暂时看不懂:)</p>
<p><code>FormMixin</code>表单逻辑, 这里就定义了几个重要的属性和方法, 用户使用form<code>form_class</code>, 成功回调url<code>success_url</code> 表单合法<code>form_valid</code> 表单不合法<code>form_invalid</code>等</p>
<p><code>ModelFormMixin</code>进一步扩展<code>FormMixin</code>, 提供<code>fields</code>字段使用户能够处理<code>ModelForm</code>, <code>form_valid</code>中添加了保存操作</p>
<p><code>ProcessFormView</code>功能View, 重写了<code>View</code>的get和post方法(put直接return post方法) 使View能够在get的时候 渲染form内容, post的时候能提交form内容</p>
<p><code>BaseFormView</code> 相当于给<code>ProcessFormView</code>提供了表单处理逻辑, 相当于能处理一些简单的请求了</p>
<p><code>FormView</code> 继续给<code>BaseFormView</code>加上模板渲染引擎, 处理结果能从前台渲染出来了</p>
<p><code>BaseCreateView</code> 和<code>BaseFormView</code>类似, 不过其使用的是modelForm, <code>form_valid</code>会调用<code>form.save()</code>方法, <code>get</code>和<code>post</code>中执行了一句<code>self.object = None</code> 其作用于<code>SingleObjectMixin</code>的<code>get_context_data</code>方法中 (detail.py 103-107行,判断self.object不为空时执行取址操作 v1.9.5)</p>
<p><code>CreateView</code> 单纯基础<code>BaseCreateView</code>和<code>SingleObjectTemplateResponseMixin</code>,别忘了后者只是是一个轻度继承的渲染工具 默认页面后缀<code>_form</code></p>
<p><code>BaseUpdateView</code> 和<code>BaseCreateView</code>代码几乎相同, 除了<code>self.object = None</code>改为<code>self.object = self.get_object()</code> 作用于相同位置, 进行字典更新操作</p>
<p><code>UpdateView</code> 单纯基础<code>BaseUpdateView</code>和<code>SingleObjectTemplateResponseMixin</code> 默认页面后缀<code>_form</code></p>
<p><code>DeletionMixin</code> 新的颜料,因为功能使用不频繁所以单独放在这里, 提供了<code>delete</code>方法和<code>success_url</code>属性, <code>delete</code>执行<code>self.object.delete()</code>后会自动执行页面回调. 特别注意的是, 这里只有<code>post</code>方法return了<code>delete</code>方法, 其他方法暂不支持</p>
<p><code>BaseDeleteView</code> 给<code>BaseDetailView</code>绑定删除功能, 仅简单继承, 无页面渲染 简单的删除后跳转</p>
<p><code>DeleteView</code> 单纯继承<code>BaseDeleteView</code>和<code>SingleObjectTemplateResponseMixin</code>,  默认页面后缀<code>_confirm_delete</code>, 给一个删除页面, get即渲染一个页面, 给个表格, post到这个页面后将删除对象</p>
<h3 id="dates-py">dates.py</h3><p>这是一个基于时间的页面通用view模板, 但是除了博客之类的基本上用不着, 不阐述.</p>
<h2 id="假装参考">假装参考</h2><p><a href="http://www.weiguda.com/blog/11/" target="_blank" rel="external">weiguda的博客</a></p>
<p>(这篇博文原意是好的, 但是读着感觉变成<code>django-braces</code>文档了, 那我为啥不去看源文档呢呢)</p>
<p><a href="https://docs.djangoproject.com/en/1.9/topics/class-based-views/intro/" target="_blank" rel="external">django官方文档</a></p>
<p>这些通用view的具体简单实例.</p>
<p><a href="https://github.com/django/django/tree/master/django/views/generic" target="_blank" rel="external">django.views.generic源码</a></p>
<p>本文源码 顺带一提 Django中admin还是保持fbv风格(逃</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原标题: 这两天摸鱼所得&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将狗里cbv与fbv的优劣不阐述, cbv的多态继承与python这种oo语言风格上就保持了一致, 无论是呈现逻辑(View)与业务逻辑(Mixin)都能很好的进行拼接, 更别说有
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>扯淡(三)</title>
    <link href="http://yoursite.com/2017/04/03/%E6%89%AF%E6%B7%A1%E4%B8%89/"/>
    <id>http://yoursite.com/2017/04/03/扯淡三/</id>
    <published>2017-04-03T13:05:03.000Z</published>
    <updated>2017-04-21T10:07:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>附<a href="http://mikumiku.com.cn/2016/04/27/扯淡二/" target="_blank" rel="external">上一篇</a></p>
<h2 id="关于博文">关于博文</h2><p>以前读别人的技术文章, 就感觉说什么都是对的,看不懂就是自己理解不够深,是自己彩笔 </p>
<p>到后来自己也写一点文章以后,感觉其实每个人的视野其实也没有那么大,手里的工具决定了你的开发上限</p>
<p>有的时候一个观点是非常片面而孤立的. 一篇总结类文章只能代表程序员在当时那个发展阶段对某个问题的具体个人理解</p>
<p>文章看不懂不一定是读者水平不够, 可能是作者对问题理解本身就不够深, 自己都勉强读懂, 出于刚入门的状态</p>
<p>什么是理解深呢?就是你能够把问题解释给哪怕是圈外的人听, 让他们也能理解是这么一回事情 </p>
<p>现在个人比较偏好湿货类文章,没有什么具体科普,就是用star法则(耳熟否?)写解决一个及其偏门而别人遇不到的问题,这种文章读起来特别有意思,所谓某某精神就是瞎折腾,浪费时间也是一种情怀</p>
<h2 id="关于他人">关于他人</h2><p>到目前为止, 我的很多想法又和大学的前半段时期又有所不同, 比如我常常挂在嘴边的</p>
<blockquote>
<p>人不能救人, 人只能自救</p>
</blockquote>
<p>表达的意思是这个世界是残酷的, 每个人只有改变自己的态度, 才能从本质上改变自己的处境.</p>
<p>我之前认为打击就是最好的鼓励</p>
<p>一个在悬崖边上挂着的人, 假装踹他下去比拉他上来更能激发他的求生欲</p>
<p>但是鉴于现在打击别人的人太多, 作为一个表演型人格者, 我又陷入了思考</p>
<p>或许在别人难过的时候拉一把, 或许也是不错?</p>
<blockquote>
<p>因为人都不缺孤独的时候</p>
</blockquote>
<p>现在的人太容易感动, 以至于陌生人搭个伞能温暖很久, 是这世间过于冷漠了么?</p>
<h2 id="作为即上">作为即上</h2><p>事情有对错之分, 不过那是出于人观测角度. 从物质角度上观测只有变化与不变化. 因此只要保持作为, 人总是在发展的, 做好事和做坏事我都是鼓励的, 最可恶的人就是沉默不作为的人, 他们消耗着不属于他们的物质, 对集体甚至他自己毫无贡献. 内耗也属于一种0作为行为</p>
<p>观点不同是很正常的, 但是最不可思议的事情是两个没有实践的人之间的矛盾, 而且这种事情常常发生. </p>
<p>有的人说话说得天花乱坠, 说一个朋友如何如何. 核心思想就是一个人很厉害, 我认识他, 所以我也很厉害. 每次遇到这种情况我总是草草结束话题, 因为你不能和他深究, 否则弄得两边都很尴尬.</p>
<p>玩游戏分两种目的,  当我意识到我玩游戏时得不到任何乐趣, 仅仅是为了排遣时间时, 我感到非常的沮丧, 因为我花了几年的时间, 仅仅是为了和其他人有共同的话题和度过艰难的义务教育时间. </p>
<p>校园生活有一个叫做无聊的致命缺陷, 如何对抗无聊, 成为校园生活的主要课题, 一部分人, 包括我, 选择了排遣时间这种最简单直接的方式, 还有一部分, 在犹豫中纠结, 最后的结果一样在排遣</p>
<p>或许, 主动脱离舒适区, 去寻求一些边缘经验是不错的选择</p>
<p>只有自己挣取的, 才有好东西. 送上门来的, 肯定是别人不要的</p>
<h2 id="关于独立">关于独立</h2><p>非常遗憾的事情是, 我在22岁的时候才终于在杭州能够养活自己, 我最初目标是成年之前</p>
<p>独立很重要, 关乎你在家里的地位. 这里的独立不单单指经济独立</p>
<p>独立标志着你真正的成年, 不然别怪父母把你当小孩子</p>
<p>我希望我的朋友也都是独立的人, 我认识的人也能早日找到自己的兴趣所在</p>
<h2 id="关于塑身">关于塑身</h2><blockquote>
<p>体型不取决你每天的摄入的正反馈, 而在于每天的消耗的负反馈</p>
</blockquote>
<p>很多年才明白的一个道理…</p>
<h2 id="关于疾病">关于疾病</h2><p><del>负能量向</del></p>
<p>看病这个问题我有自己非常个人化的一套价值观, 不能适用于大多数人</p>
<p>很多疾病对身体的伤害是不可逆的, 我们能做的只能减少其对身体副作用而已, 但是很多人花了太多时间太多精力, 想一次根治一劳永逸, 简直是异想天开. 然而很多人不明白或者不愿意明白这个事实</p>
<p>身体康复不是因为打针吃药, 身体康复永远只能通过自愈</p>
<blockquote>
<p>所以生病最好是什么都不做, 等待身体自愈从而提高抗性. </p>
</blockquote>
<p>有人说我在放屁</p>
<p>我可以和你讲个故事</p>
<p>我的外公是医生, 先天性心脏病, 现在80多岁经常住院, 但是和他同时期的医生很多天天爬山锻炼, 都死了几十年了, 他说静养他才能活这么久</p>
<p>除了我家里人和几个交好, 我对医生有本能的排斥反应</p>
<p>如果我信了医生说的话, 那么我初二就应该休学躺床来避免腰突带来的疼痛, 整天无所事事, 然后病情越来越重, 小概率半身瘫痪, 而不是每天一边读书一边锻炼背肌, 减少脊髓核对周围神经带来的压迫</p>
<p>那时候为了减轻疼痛, 吃药吃的胃疼, 贴膏药贴到皮肤溃烂, 都没有任何作用, 况且这些带来的痛苦远超出了其原本的疼痛</p>
<p>想想也是, 从消化系统的胃部出发要使胶囊里溶解后的有效分子作用到第4到第5节脊椎, 或外部皮肤出发用热量去感动它, 有脚趾想想都没卵用, 又何提这期间药物大概率提前作用? 或者根本无用?</p>
<p>我当时非常沮丧, 为什么全校几千人, 为什么我这么倒霉发生在我身上, 我要承受我这个年纪不应该承担的痛苦, 而且这种痛苦有可能会伴随终生</p>
<p>直到家里人问我要不要去打封闭的时候, 作为一个非常叛逆的初中小孩, 我罕见认真思考本源的问题</p>
<p>疼痛实际上是一种身体的保护机制, 为什么要逃离他? 切断了疼痛, 下次身体受到损伤时, 有谁还能保护我?</p>
<p>有个哲人说过一句话, 是谁我忘了, 放在这里好像也不太合适? 不过我觉得你能读懂我的意思:</p>
<blockquote>
<p>痛,证明你还活着</p>
</blockquote>
<p>身体是我最好的朋友, 他通过疼的方式, 用本能而直接的方式一直在向我诉说着这个地方有问题, 这个地方需要关注, 我为啥想着折磨他呢?</p>
<p>那几天我翻阅大量的关于腰突的医学资料, 如果我是医学生的话, 估计可以写一篇论文了. 那几天了解到病理原理和目前的N种的治疗方案后, 我坦然接受了其不能治愈的事实, 以及一直承受其带来的疼痛的准备. 那个时候, 我多大来着?</p>
<p>有次在电视上看到吃药治腰突的广告, 我花了15分钟从生物到病理层面上给家里人说明了这种方案的不可行性及其可笑之处, 这显然是个骗局</p>
<p>第一次出于对自己判断的认可, 首先手术肯定是绝对不会做的, 因为摘除突出髓核虽然能暂时从根本上处理生理问题, 但是一不能防止复发, 复发的后果很严重; 二是手术需要修养半年修养, 而当时我只是一心想摆脱义务教育, 没有时间可以耗在这个上面.</p>
<p>心里默默的骂了那个医生王八蛋以后, 在学校里我就完全按照自己的行程表行动, 那个时候我就基本不在意自己的脸了. <del>哪怕出于某种需要在全校面前脱裤子我也会秒做: 老子tm差点瘫痪了, 谁管你怎么看.</del> 那节课不舒服了, 我就会请假回寝室躺一会. 后来某一届智障班主任不允许了, 我一说就让家里人来接我回去, 说什么回寝室休息会影响其他人教室自习… <del>影响你mb啊, 你tm是zz吗?</del></p>
<p>然后开始用各种姿势锻炼腰肌, 动作不讲究标准, 只要腰肌变硬就是实质有效锻炼. 锻炼一段时间之后休息起来能保持坐立姿势的时间延长了许多, 到后来(包括现在)基本只要不去做一些动作已经感觉不到任何异样了</p>
<p>我突然想起去医院拍核共振查出腰突都是我强行拉家里人带我去的查的, 之前他们都完全不当一回事</p>
<p>所以我开始倾向自己做决定, 解决问题时倾向于探求问题本质</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;附&lt;a href=&quot;http://mikumiku.com.cn/2016/04/27/扯淡二/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于博文&quot;&gt;关于博文&lt;/h2&gt;&lt;p&gt;以前读别人的技术文章, 就感觉说什么
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>这几天学到的Django项目总体架构思路</title>
    <link href="http://yoursite.com/2017/03/27/%E8%BF%99%E5%87%A0%E5%A4%A9%E5%AD%A6%E5%88%B0%E7%9A%84Django%E9%A1%B9%E7%9B%AE%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/03/27/这几天学到的Django项目总体架构思路/</id>
    <published>2017-03-27T10:09:45.000Z</published>
    <updated>2017-04-20T10:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原标题: 这几天搬砖所得</p>
</blockquote>
<p>搬了大概一周的砖头以后, 对<code>Django</code>这个框架的想法就是, 真tm好用, 又真tm难用. 好用的地方在于web开发中你一切遇到的所有问题, 都会有一套对应的解决方案; 难用的地方就是, 遇到的那些问题, 你必须要按照它的那套解决方案. 所以写<code>Django</code>的时候, 基本上不需要休息思考的时间, 就是查手册, 查源码, 搜方案, 面向stackoverflow编程, 必须用IDE, 爬断点, 文件改名全局索引, debug热点表达式, 不然手动打log工作量就不是人能承受的了.当然, 如果你是个熟练工的话,用<code>Django</code>的工作量可能是最小的…</p>
<h2 id="应用挂载">应用挂载</h2><p>Django是一个典型的<code>Restful</code>架构框架, 举个例子, 在<code>animal</code>应用下挂载一个猫应用, tree如下所示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── animal</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── settings.py</div><div class="line">│   ├── urls.py</div><div class="line">│   └── wsgi.py</div><div class="line">├── cat</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── admin.py</div><div class="line">│   ├── models.py</div><div class="line">│   ├── tests.py</div><div class="line">│   └── views.py</div><div class="line">└── manage.py</div></pre></td></tr></table></figure>
<p>如果在cat下继续挂应用, 比如挂喂养的子应用, 此时无法直接通过manage.py创建cat/feed应用, 需要手动构建, 具体做法如下(feed模块为手动构建):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── animal</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── settings.py</div><div class="line">│   ├── urls.py</div><div class="line">│   └── wsgi.py</div><div class="line">├── cat</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── admin.py</div><div class="line">│   ├── feed</div><div class="line">│   │   ├── __init__.py</div><div class="line">│   │   ├── models.py</div><div class="line">│   │   ├── templates</div><div class="line">│   │   │   └── feed</div><div class="line">│   │   │       └── home.html</div><div class="line">│   │   ├── urls.py</div><div class="line">│   │   └── views.py</div><div class="line">│   ├── models.py</div><div class="line">│   ├── tests.py</div><div class="line">│   ├── urls.py</div><div class="line">│   └── views.py</div><div class="line">└── manage.py</div></pre></td></tr></table></figure>
<p>先在项目setting.py中注册下列模块:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;cat&apos;</div><div class="line">&apos;cat.feed&apos;</div></pre></td></tr></table></figure>
<p>项目url配置, animal/urls.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">	url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">	url(<span class="string">r'^cat/'</span>, include(<span class="string">'cat.urls'</span>))</div><div class="line">)</div></pre></td></tr></table></figure>
<p>挂载app的url, 新建cat/urls.py, namespace可选</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    url(<span class="string">r'^feed/'</span>, include(<span class="string">'cat.feed.urls'</span>, namespace=<span class="string">'cat_feed'</span>))</div><div class="line">)</div></pre></td></tr></table></figure>
<p>就可以通过配置 cat/feed/urls.py, 配置子项目的MVC了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">	url(<span class="string">r'^$'</span>,  <span class="string">'cat.feed.views.home'</span>,  name=<span class="string">'home'</span>),</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="模板路径">模板路径</h2><p>Django的模板路径优先级是先去搜索<code>setting.py</code>下<code>TEMPLATES</code>变量里的<code>DIRS</code>对象中的路径下遍历的<code>templates</code>文件夹, 同名的按照先搜索到的为准. 因此除了一些公用模板(例如<code>base.html</code>和<code>404.html</code>), 一般子应用的模板不应该随意用长变量名的方式放在应用挂载下, 应该放在<code>templates</code>内同名的文件夹中,例如feed应用应该在feed目录下的templates文件夹中新建一个feed文件夹,在这个文件夹中放feed应用的专用模板, 这样挂载在子应用下的子应用内的view层就能通过<code>应用名/模板名</code>的方式去引用模板, 一层一层的extend上一层应用的<code>base.html</code>, 这样就遵循了代码组件化的原则, 类似于React.<br>同时使用<code>namespace</code>可以使路由可读性变得更好.</p>
<h2 id="自定义用户">自定义用户</h2><p>这里涉及到Django庞大的第三方库的使用, 一般第三方库都不会去重写User类, 倾向于到Django中<code>django.contrib.auth.model</code>去重写/继承/封装,例如要在User中添加字段的技巧</p>
<p>————————— 以下引用 —————————</p>
<p>本篇主要讨论一下User Model的使用技巧. 注意, 由于Django 1.5之后user model带来了很大的变化, 本篇内容只针对django 1.5之后的版本.</p>
<p><em>1.确定 User Model</em></p>
<p>我们推荐一下方式来确定某一django项目使用的user model:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用默认User model时</span></div><div class="line">&gt;&gt;&gt; from django.contrib.auth import get_user_model</div><div class="line">&gt;&gt;&gt; get_user_model()</div><div class="line">&lt;class <span class="string">'django.contrib.auth.models.User'</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># 使用自定义User model时</span></div><div class="line">&gt;&gt;&gt; from django.contrib.auth import get_user_model</div><div class="line">&gt;&gt;&gt; get_user_model()</div><div class="line">&lt;class <span class="string">'xxx.models.UserProfile'</span>&gt;</div></pre></td></tr></table></figure>
<p><em>2.使用settings.AUTH_USER_MODEL</em></p>
<p>自从django 1.5之后, 用户可以自定义User model了, 如果需要外键使用user model, 官方推荐的方法如下:</p>
<p>在settings中设置AUTH_USER_MODEL:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># settings.py</span></div><div class="line"><span class="comment"># 格式为 "&lt;django_app名&gt;.&lt;model名&gt;"</span></div><div class="line">AUTH_USER_MODEL = <span class="string">"myapp.NewUser"</span></div></pre></td></tr></table></figure>
<p>在models.py中使用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></div><div class="line">    author = models.ForeignKey(settings.AUTH_USER_MODEL)</div><div class="line">    title = models.CharField(max_length=<span class="number">255</span>)</div></pre></td></tr></table></figure>
<p>还有需要注意的是, 不要在外键中使用get_user_model().</p>
<p><em>3.自定义 User Model</em></p>
<p>方法1: 扩展 AbstractUser类</p>
<p>如果你对django自带的User model刚到满意, 又希望额外的field的话, 你可以扩展AbstractUser类:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># myapp/models.py</span></div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewUser</span><span class="params">(AbstractUser)</span>:</span></div><div class="line">    new_field = models.CharField(max_length=<span class="number">100</span>)</div></pre></td></tr></table></figure>
<p>不要忘了在settings.py中设置:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AUTH_USER_MODEL = <span class="string">"myapp.NewUser"</span></div></pre></td></tr></table></figure>
<p>方法2: 扩展 AbstractBaseUser类</p>
<p>AbstractBaseUser中只含有3个field: password, last_login和is_active. 如果你对django user model默认的first_name, last_name不满意, 或者只想保留默认的密码储存方式, 则可以选择这一方式.</p>
<p>参考官方文档:<br><a href="https://docs.djangoproject.com/en/1.7/topics/auth/customizing/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.7/topics/auth/customizing/</a></p>
<p>方法3: 使用OneToOneField</p>
<p>如果你想建立一个第三方模块发布在PyPi上, 这一模块需要根据用户储存每个用户的额外信息. 或者我们的django项目中希望不同的用户拥有不同的field, 有些用户则需要不同field的组合, 且我们使用了方法1或方法2:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># profiles/models.py</span></div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="keyword">from</span> flavors.models <span class="keyword">import</span> Flavor</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EasterProfile</span><span class="params">(models.Model)</span>:</span></div><div class="line">    user = models.OneToOneField(settings.AUTH_USER_MODEL)</div><div class="line">    favorite_ice_cream = models.ForeignKey(Flavor, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScooperProfile</span><span class="params">(models.Model)</span>:</span></div><div class="line">    user = models.OneToOneField(settings.AUTH_USER_MODEL)</div><div class="line">    scoops_scooped = models.IntergerField(default=<span class="number">0</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventorProfile</span><span class="params">(models.Model)</span>:</span></div><div class="line">    user = models.OneToOneField(settings.AUTH_USER_MODEL)</div><div class="line">    flavors_invented = models.ManyToManyField(Flavor, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>使用以上方法, 我们可以使用user.easterprofile.favorite_ice_cream获取相应的profile.</p>
<p>使用这一方法的坏处可能就是增加了代码的复杂性.</p>
<p>原文链接: <a href="http://www.weiguda.com/blog/28/" target="_blank" rel="external">http://www.weiguda.com/blog/28/</a></p>
<p>————————— 引用完毕 —————————</p>
<p>目前我用方法3的方式, 就是使用<code>OneToOneField</code>的方式, 因为这样做的显著降低代码耦合性, 使应用结构更加松散.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原标题: 这几天搬砖所得&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搬了大概一周的砖头以后, 对&lt;code&gt;Django&lt;/code&gt;这个框架的想法就是, 真tm好用, 又真tm难用. 好用的地方在于web开发中你一切遇到的所有问题, 都会有一套对
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>svn快速入门</title>
    <link href="http://yoursite.com/2017/03/23/svn%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/03/23/svn快速入门/</id>
    <published>2017-03-23T01:40:47.000Z</published>
    <updated>2017-04-21T07:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>寄人篱下, 生活所迫</p>
</blockquote>
<h2 id="Foward">Foward</h2><ol>
<li>此文写给能使用git, 但是当下需要非常迫切使用SVN的开发人员</li>
<li>本文默认你已经能够掌握git协议相关知识, 否则本文涉及到的相关术语看起来会造成一定的困惑.</li>
<li>既然是快速入门, 文本尽量用git与SVN作对比进行说明(并没有</li>
<li>本文远程仓库使用GitHub, 实际结合个人需要使用</li>
</ol>
<h2 id="Checkout">Checkout</h2><p>首先你要做的事情是Subversion(以下简称svn) checkout。由于<code>Git clones</code>将工作目录（你编辑文件的地方）与存储库数据(.git)分开，因此在工作目录中一次只能有一个分支。</p>
<p><code>svn checkouts</code>是不同的：它们将工作目录中的存储库数据混合在一起，因此对于checkout的每个分支和标记都有一个工作目录。对于具有许多分支和标签的存储库，检查所有文件可能是一个负担，因此你应该从部分checkout开始。</p>
<p>1.在GitHub上找到repository的导航主页.</p>
<p>2.在repository名称的下面, 点击<code>Clone or download</code>.</p>
<p>3.选择<code>Clone with HTTPS</code>, 复制其中的链接.</p>
<p>4.在本地repository中创建一个空的checkout:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ svn co --depth empty https://github.com/user/repo</div><div class="line">Checked out revision 1.</div><div class="line">$ <span class="built_in">cd</span> repo</div></pre></td></tr></table></figure>
<p>5.获取<code>trunk</code>分支. SVN会把<code>trunk</code>桥接映射到<code>Git HEAD branch</code>(通常指<code>master</code>).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ svn up trunk</div><div class="line">A    trunk</div><div class="line">A    trunk/README.md</div><div class="line">A    trunk/gizmo.rb</div><div class="line">Updated to revision 1.</div></pre></td></tr></table></figure>
<p>6.在<code>branches</code>路径下获取空的checkout. 这是所有非<code>HEAD</code>分支存在的地方，你将在这里做<code>feature branches</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ svn up --depth empty branches</div><div class="line">Updated to revision 1.</div></pre></td></tr></table></figure>
<p>my ex:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ tree                                                                                                                                                                </div><div class="line">.</div><div class="line">├── branches</div><div class="line">│   └── more_awesome</div><div class="line">│       ├── LICENSE</div><div class="line">│       ├── README.md</div><div class="line">│       └── <span class="built_in">test</span></div><div class="line">└── trunk</div><div class="line">    ├── LICENSE</div><div class="line">    └── README.md</div></pre></td></tr></table></figure>
<h2 id="创建分支">创建分支</h2><p>你也可以使用Subversion桥接到GitHub创建分支。</p>
<p>从svn客户端，通过更新确保<code>master</code>是最新的trunk：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ svn up trunk</div><div class="line">At revision 1.</div></pre></td></tr></table></figure>
<p>接下来，你可以使用<code>svn copy</code>创建新分支:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ svn copy trunk branches/more_awesome</div><div class="line">A    branches/more_awesome</div><div class="line">$ svn commit -m <span class="string">'Added more_awesome topic branch'</span></div><div class="line">Adding    branches/more_awesome</div><div class="line"></div><div class="line">Committed revision 2.</div></pre></td></tr></table></figure>
<p>现在你能确认新分支能在github的branch下拉栏里看到:</p>
<p><img src="https://help.github.com/assets/images/help/branch/svnflow-branch-snapshot.png" alt=""></p>
<p>你可以确认新分支存在于存储库的分支下拉列表中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git fetch</div><div class="line">From https://github.com/user/repo/</div><div class="line">* [new branch]    more_awesome -&gt; origin/more_awesome</div></pre></td></tr></table></figure>
<h2 id="提交修改">提交修改</h2><p>在添加了一些功能并修复了一些错误之后，你需要将这些更改提交给GitHub。这就和你平时使用svn一样。编辑文件，并使用<code>svn commit</code>记录你的更改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ svn status</div><div class="line">M    gizmo.rb</div><div class="line">$ svn commit -m <span class="string">'Guard against known problems'</span></div><div class="line">Sending    more_awesome/gizmo.rb</div><div class="line">Transmitting file data .</div><div class="line">Committed revision 3.</div><div class="line">$ svn status</div><div class="line">?    <span class="built_in">test</span></div><div class="line">$ svn add <span class="built_in">test</span></div><div class="line">A    <span class="built_in">test</span></div><div class="line">A    <span class="built_in">test</span>/gizmo_test.rb</div><div class="line">$ svn commit -m <span class="string">'Test coverage for problems'</span></div><div class="line">Adding    more_awesome/<span class="built_in">test</span></div><div class="line">Adding    more_awesome/<span class="built_in">test</span>/gizmo_test.rb</div><div class="line">Transmitting file data .</div><div class="line">Committed revision 4.</div></pre></td></tr></table></figure>
<h2 id="切换分支">切换分支</h2><p>要在分支机构之间切换，你可能需要首先检查<code>trunk</code>的内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn co --depth empty https://github.com/user/repo/trunk</div></pre></td></tr></table></figure>
<p>然后，你可以切换到另一个分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn switch https://github.com/user/repo/branches/more_awesome</div></pre></td></tr></table></figure>
<h2 id="一个有趣的网站"><del><a href="https://svnhub.com" target="_blank" rel="external">一个有趣的网站</a></del></h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;寄人篱下, 生活所迫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Foward&quot;&gt;Foward&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;此文写给能使用git, 但是当下需要非常迫切使用SVN的开发人员&lt;/li&gt;
&lt;li&gt;本文默认你已经能够掌握git协议相
    
    </summary>
    
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>《黑客攻防技术宝典 Web实战篇（第2版）》读后总结（第1部分）</title>
    <link href="http://yoursite.com/2017/03/22/%E5%B8%B8%E8%A7%81%E7%9A%84sql%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2017/03/22/常见的sql攻击/</id>
    <published>2017-03-22T10:12:34.000Z</published>
    <updated>2017-10-20T14:10:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注入解释性语言">注入解释性语言</h2><p>开发Web应用程序许多的核心语言使用解释器执行, 包括SQL, Perl, PHP, 基于解释性语言的执行方式, 产生了一系列代码注入的漏洞.有的时候攻击者会提交一些专门设计的输入, 通常是有特殊意义的语法, 向应用程序实施攻击, 如果这种攻击获得成功, 它就完全攻破了目标应用程序的组件.</p>
<h3 id="避开登录">避开登录</h3><p>不管访问操作是普通用户或者管理员, 应用程序访问数据库方式大致相同. Web应用程序对数据库储存区实施自主访问控制, 基于用户账户和类型构造语句查询来增删改查. 修改查询的成功注入攻击可以避开程序的自主访问控制并获取未授权访问.</p>
<p>如果需要安全保护的应用通过查询结果控制, 攻击就可以通过修改查询来更改应用的逻辑, 以下是一个实例:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'xana'</span> <span class="keyword">and</span> <span class="keyword">password</span> = <span class="string">'secret'</span></div></pre></td></tr></table></figure>
<p>这个查询通过匹配检索用户, 如果返回一名用户的资料, 则登录成功, 建立一个通过验证的会话. 在这种情况下, 如果知道管理员的用户名为<code>admin</code>,那他就可以通过提交以下用户名和任意密码, 以管理身份登录:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin'<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>应用程序将执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'admin'</span><span class="comment">--' AND password = 'foo'</span></div></pre></td></tr></table></figure>
<p>因为其中使用了注释符号(—), 所以查询等同于:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'admin'</span></div></pre></td></tr></table></figure>
<p>于是查询完全避开了密码检查…</p>
<ul>
<li>提示</li>
</ul>
<p>即时攻击者不知道管理员的用户名, 由于大多数应用程序第一个账户为管理用户, 而且程序一般查询<em>有可能返回几名用户的同时, 只会获取处理第一名用户</em>, 于是提交以下用户名, 以整个数据库第一个用户的身份登录:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">' OR 1=1<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>应用程序将执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">''</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">--' AND password = 'foo'</span></div></pre></td></tr></table></figure>
<p>因为其中使用了注释符号(—), 所以查询等同于:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">''</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>返回整个应用所有用户的资料…</p>
<h2 id="SQL注入">SQL注入</h2><p>首先要意识到一个问题, 随着安全意识增强, SQL注入漏洞愈来愈少, 很多主流应用使用API来避免SQL注入(如果正确使用的话), 有时候查找SQL注入漏洞是一件非常困难的事情, 需要渗透测试员检测不懈的查找和挖掘. 因此这里只能列举一些比较基本的情况, 然后进一步描述最新的技巧</p>
<h3 id="利用基本漏洞">利用基本漏洞</h3><p>当一个用户搜索Wiley出版的所有书籍时, 应用程序执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">from</span> books <span class="keyword">WHERE</span> publisher=<span class="string">'Wiley'</span> <span class="keyword">and</span> published=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>该查询检查了<code>books</code>表的每一行, 提取所有作者列为<code>Wiley</code>值的结果, 并以HTML页面的结果返回给用户. 其中<code>Wiley</code>是一个数据项, 它必须包含在单引号内, 与其它查询内容分开. </p>
<p>现在思考一下, 如果用户搜索所有由O’Reilly出版的书籍会出现什么情况. 此时进行以下查询</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">from</span> books <span class="keyword">WHERE</span> publisher=<span class="string">'O'</span>Reilly<span class="string">' and published=1</span></div></pre></td></tr></table></figure>
<p>解析过程中遇到的<code>Reilly&#39;</code>表达式, 这不是有效的SQL语法, 因此应用程序生成一条错误信息, 甚至返回客户端. 如果应用程序以这种方式进行, 那它就很容易受到SQL注入, 攻击者可以提交包含引号的任意查询. 例如输入</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Wiley' OR 1=1<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>此时进行以下查询</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">from</span> books <span class="keyword">WHERE</span> publisher=<span class="string">'Wiley'</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">-- and published=1</span></div></pre></td></tr></table></figure>
<p>获取到所有书籍表中的记录</p>
<ul>
<li>提示</li>
</ul>
<p>有时候不一定需要注释符号来处理字符串末尾的引号, 可以用一个包含字符串数据结束注入的输入, 例如:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Wiley' or 'a' = 'a</div></pre></td></tr></table></figure>
<p>生成以下查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">from</span> books <span class="keyword">WHERE</span> publisher=<span class="string">'Wiley'</span> <span class="keyword">OR</span> <span class="string">'a'</span> = <span class="string">'a'</span> <span class="keyword">and</span> published=<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>这是有效查询, 和1=1攻击相同的结果.</p>
<p>前面的几个例子很明显不会造成严重的安全威胁, 因为用户本来就能通过合法的方式访问到所有的书籍信息, 但是利用这种SQL注入漏洞可以从各种表中提取任何数据, 并提升数据库和数据库服务器中的权限. 所以不管在哪个应用程序中, SQL注入漏洞都应该被视为极其严重的威胁.</p>
<h3 id="注入不同语句类型">注入不同语句类型</h3><p>我们常常出现这样的印象, 即SQL注入漏洞只存在于SELECT语句中. 实际上任何SQL语句都可能存在缺陷.</p>
<h4 id="SELECT语句">SELECT语句</h4><p>SELECT语句用户从数据库中获取信息, SQL注入的攻击点通常是查询中<code>WHERE</code>子句, 因为<code>WHERE</code>子句在SELECT语句的最后, 攻击者可以将查询截短到输入的结束位置, 而不会使整个查询失效.</p>
<h4 id="INSERT语句">INSERT语句</h4><p>如果一个应用程序允许用户自主注册, 指定他们自己的用户名和密码, 就可以用下列语法将用户资料插入<code>users</code>表中:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username, <span class="keyword">password</span>, <span class="keyword">ID</span>, privs) <span class="keyword">VALUES</span> (<span class="string">'xana'</span>, <span class="string">'secret'</span>, <span class="number">2222</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>如果<code>username</code>或<code>passowrd</code>字段存在SQL注入漏洞, 那么攻击者就可以在表中插入任何数据. 然而要想这么做, 必须保证VALUES子句的其他部分正确执行, 特别是数据项的个数和类型. 如注入<code>username</code>字段时, 尝试提交以下输入:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo', 'bar', 9999, 0)<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>它将建立一个ID为9999, privs为0的账户. 如果privs决定账户权限, 那么攻击者就能利用它创建一个管理账户.</p>
<ul>
<li>提示</li>
</ul>
<p>当设法注入一个INSERT语句时, 如果无法知道需要提交多少个参数或者参数类型, 可以通过在VALUES子句中持续增加一个新的字段, 直到程序创建了期望的账户?</p>
<p>比如注入<code>username</code>字段时, 可以提交以下输入:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Foo')<span class="comment">--</span></div><div class="line">Foo', 1)<span class="comment">--</span></div><div class="line">Foo', 1, 1)<span class="comment">--</span></div><div class="line">Foo', 1, 1, 1)<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>大多数数据库会隐式地把整数转化为字符串, 所以可以在每个位置都使用一个整数. 这里不管其他字段, 会生成一个用户名为<code>foo</code>,密码为<code>1</code>的账户.</p>
<p>如果发现值1仍然遭到拒绝, 尝试使用值2000, 许多数据库也会隐式地将它转化基于数据的数据类型.</p>
<h4 id="UPDATE语句">UPDATE语句</h4><p>UPDATE语句运行机制与INSERT语句类似, 例如修改密码时, 应用程序可能执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="string">'newsecret'</span> <span class="keyword">WHERE</span> <span class="keyword">user</span> = <span class="string">'xana'</span> <span class="keyword">and</span> <span class="keyword">password</span> = <span class="string">'secret'</span></div></pre></td></tr></table></figure>
<p>如果这项功能存在SQL注入漏洞, 就可以输入以下用户名更新管理员的密码:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin'<span class="comment">--</span></div></pre></td></tr></table></figure>
<ul>
<li>提示</li>
</ul>
<p>因为无法提前知道应用程序会对专门设计的输入执行什么操作, 因此远程探查SQL注入漏洞十分危险. 修改<code>WHERE</code>子句有可能会使整个数据库表发生彻底的改变!譬如上面的攻击者已经提交了以下用户名:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin' or 1=1<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>那么应用程序可能会执行下列查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="string">'newsecret'</span> <span class="keyword">WHERE</span> <span class="keyword">user</span> = <span class="string">'admin'</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>它会重设每一名用户的密码!</p>
<p>因此渗透测试员在尝试攻击一些不会更新现有数据的模块(比如登录)时, 也应该要留意这种风险, 因为一些应用程序在用户提交的用户信息后会进行各种UPDATE查询, 这意味着针对<code>WHERE</code>子句的攻击会迁移到其他语句之中, 给用户资料带来严重破坏. 在尝试探查SQL注入漏洞前, 必须确保应用程序所有者能接受这些无法避免的风险; 同时, 强烈建议他们测试前先对数据库进行完整备份.</p>
<h4 id="DELETE语句">DELETE语句</h4><p>与UPDATE语句相仿, DELETE语句也使用<code>WHERE</code>子句告诉库表更新那些行的数据. 在UPDATE语句里的警告同样适用这种攻击.</p>
<h2 id="避开过滤">避开过滤</h2><p>有时候, 易收SQL注入攻击的应用程序可能会执行各种过滤防止攻击者无限制地利用其中存在的缺陷. 例如, 删除或者净化某些字符, 或者阻止SQL关键字. 这种过滤通常非常同意避开, 这时可尝试使用各种技巧.</p>
<h3 id="避免使用被阻止的字符">避免使用被阻止的字符</h3><p>如果注入数字数据字段或者列名称, 不一定必须使用单引号. 可以通过各种字符串函数, 使用ASCII代码构建一个字符串. 如执行下列查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename, sal, <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'xana'</span></div></pre></td></tr></table></figure>
<p>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> ename, sal <span class="keyword">FROM</span> emp <span class="keyword">where</span> ename=<span class="keyword">CHR</span>(<span class="number">120</span>)||<span class="keyword">CHR</span>(<span class="number">97</span>)||<span class="keyword">CHR</span>(<span class="number">110</span>)||<span class="keyword">CHR</span>(<span class="number">97</span>)</div></pre></td></tr></table></figure></p>
<p>MS-SQL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> ename, sal <span class="keyword">FROM</span> emp <span class="keyword">where</span> ename=<span class="keyword">CHR</span>(<span class="number">120</span>)+<span class="keyword">CHR</span>(<span class="number">97</span>)+<span class="keyword">CHR</span>(<span class="number">110</span>)+<span class="keyword">CHR</span>(<span class="number">97</span>)</div></pre></td></tr></table></figure></p>
<p>如果注释符合被阻止, 设计注入数据, 使其不会破坏周围查询语法. 如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">' or 'a'='a</div></pre></td></tr></table></figure>
<p>代替</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">' or 1=1<span class="comment">--</span></div></pre></td></tr></table></figure>
<h3 id="避免使用简单确认">避免使用简单确认</h3><p>如果SELECT关键字被阻止, 尝试以下输入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SeLeCt</div><div class="line">%00SELECT</div><div class="line">SELSELECTECT</div><div class="line">%53%45%4c%45%43%54</div><div class="line">%2553%2545%254c%2545%2543%2554</div></pre></td></tr></table></figure>
<h3 id="使用SQL注释">使用SQL注释</h3><p>和一些语言一样, SQL支持行内注释注释内容包含在<code>/*</code>与<code>*/</code>符合之间. 可以使用注释替换注入数据中的空白符. 例如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span><span class="comment">/*SHIT*/</span>username,<span class="keyword">password</span><span class="comment">/*FUCK*/</span><span class="keyword">FROM</span><span class="comment">/*BITCH*/</span><span class="keyword">users</span></div></pre></td></tr></table></figure>
<p><del>MySQL中注释还可以插入关键字中,然而我现在的版本试了一下貌似不可以-_-</del></p>
<h2 id="二阶SQL注入">二阶SQL注入</h2><p>当数据首次插入数据库时,许多应用程序能够安全处理这些数据. 但是, 一旦数据存储在数据库中, 应用程序本身或其他后台进程可能以危险的的方式处理这些数据. </p>
<p>在一些应用程序中, 用户使用单引号时以转义的方式来确认, 例如前例搜索<code>O&#39;Reilly</code>时,应用程序执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> publisher  <span class="string">'O''Reilly'</span></div></pre></td></tr></table></figure>
<p>用户提交的单引号被转化为两个单引号, 从而传达给数据库的搜索项与用户输入的表达式具有相同的意义.</p>
<p>回到之前用户自我注册INSERT存在SQL漏洞的应用程序, 假如开发者修复了单引号配对导致的错误, 注册用户名<code>foo&#39;</code>来建立一下查询, 它将不会在数据库中导致错误:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username, <span class="keyword">password</span>, <span class="keyword">ID</span>, privs) <span class="keyword">VALUES</span> (<span class="string">'foo'''</span>, secret, <span class="number">2248</span> , <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>到目前为止一切正常. 但是假设应用程序还执行密码修改功能, 它要求通过验证的用户能访问这项功能, 而且要求提交原始密码, 然后从数据库中提取密码进行比对. 要完成核对任务, 它首先要从数据库中提取用户的用户名, 然后建立以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'foo''</span></div></pre></td></tr></table></figure>
<p>因为保存在数据库中的用户名是字面量字符串<code>foo&#39;</code>, 但应用程序访问请求是, 数据库即返回这个值; 只有在字符串传送至数据库时才使用配对的转义序列. 因此当应用程序重复使用这个字符串并将它嵌入另一个查询中时, 就会造成一个SQL注入漏洞. 当用户尝试修改密码时, 应用程序返回以下信息, 暴露了上述缺陷:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Unclosed quotation mark before the character string &apos;foo</div></pre></td></tr></table></figure>
<p>要利用这种漏洞, 攻击者只要注册一个包含专门设计的输入用户名, 然后尝试修改密码, 例如注册以下用户名:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; or 1 in (select password from users where username=&apos;admin&apos;)--</div></pre></td></tr></table></figure>
<p>注册步骤会被应用程序安全处理. 如果有人尝试修改这个用户的密码, 他注入的查询就会执行, 返回一个类型错误的信息, 泄露管理员的密码.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Microsoft OLE DB Provider for ODBC Drivers 错误 &apos;80040e07&apos;</div><div class="line">[Microsoft][ODBC Microsoft Access 驱动程序] 标准表达式中数据类型不匹配</div><div class="line">the varchar value &apos;fme69&apos; to a column of data type int.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注入解释性语言&quot;&gt;注入解释性语言&lt;/h2&gt;&lt;p&gt;开发Web应用程序许多的核心语言使用解释器执行, 包括SQL, Perl, PHP, 基于解释性语言的执行方式, 产生了一系列代码注入的漏洞.有的时候攻击者会提交一些专门设计的输入, 通常是有特殊意义的语法, 向应用
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Job-hunting</title>
    <link href="http://yoursite.com/2017/01/01/Job-hunting/"/>
    <id>http://yoursite.com/2017/01/01/Job-hunting/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-03-22T10:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>已经重新排版，尽量挑选出简洁有效的内容</del></p>
<p><del>已找到工作, 勿念</del></p>
<ol>
<li>我目前是杭电大三学生，热爱互联网，现想找一份实习工作，研发\测试\运维均可，主要在学校易受到工具、环境、规模限制，想在实践中进行学习。我要求不高，只是大三下学期每周还有2~4门水课，所以希望在实习地区在杭州之内，最好离下沙不要太远，包住另说:）。</li>
<li>我从大一才开始学编程，大学之前并没有算法等基础，可能这方面会有些薄弱。大学基本靠自学踩坑出来的。</li>
<li>主要使用的语言工具是Python3和NodeJS，能独立开发、部署中小型web服务。（举例：Flask+uWSGI+Nginx+Supervisor+MySQL 或Express+MongoDB+Supervisor 的http服务）熟悉测试流程，遵循封闭开发原则。</li>
<li>重度Linux/Vim党，IDE-fucker。</li>
<li>大二学过半年时间的iOS，在AppStore上丢了一个第三方登录-支付流程完整的应用。<del>尝试用ReactNative重写一次，坑太多，不了了之。</del>未来不打算写移动，仅证明自学能力。</li>
<li>写过一段时间的C\Java但不是很熟</li>
<li>不参加文档式的ppt比赛<del>如xx外包\x苗\xx网+\x战杯</del>，更喜欢快速开发出实际产品的game。参加过2次hackathon。</li>
</ol>
<p>欢迎推荐~HR请通过邮箱或者其他方式联系我</p>
<p>邮箱 xana.awaken@gmail.com </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;已经重新排版，尽量挑选出简洁有效的内容&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;已找到工作, 勿念&lt;/del&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我目前是杭电大三学生，热爱互联网，现想找一份实习工作，研发\测试\运维均可，主要在学校易受到工具、环境、规模限制，想在实践中进行学
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
      <category term="job" scheme="http://yoursite.com/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>Python3修饰器和线程锁</title>
    <link href="http://yoursite.com/2016/12/29/decorator/"/>
    <id>http://yoursite.com/2016/12/29/decorator/</id>
    <published>2016-12-29T11:16:21.000Z</published>
    <updated>2017-03-16T17:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python的修饰器">Python的修饰器</h2><p>先看一个很常见的例子</p>
<p>req.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">'before_request...'</span>, args, kwargs)</div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        result = func(*args, **kwargs)</div><div class="line">        print(<span class="string">'after_request...'</span>)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@after_request   </span></div><div class="line"><span class="meta">@before_request </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    print(<span class="string">'render index.....'</span>)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    index([],<span class="number">2</span>,c=<span class="string">'fk'</span>)</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">before_request... ([], 2) &#123;<span class="string">'c'</span>: <span class="string">'fk'</span>&#125;</div><div class="line">render index.....</div><div class="line">after_request...</div></pre></td></tr></table></figure>
<h3 id="原理解释">原理解释</h3><p>你写了一个很棒的通用方法，但是有点长。但是老板这时候来了需求，要求它在不同的情况下进行一些不同的操作（例如不同情境下的验证操作）。为了遵循封闭开发原则，尽量不去改已经完成的代码，或许修饰器是一个不错而优雅的选择。</p>
<p>先举个简单例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">awesome_method</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># do a lot!</span></div><div class="line">    print(<span class="string">'main func'</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_do_that</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># ready for that</span></div><div class="line">    print(<span class="string">'before func'</span>)</div></pre></td></tr></table></figure>
<p>你想在函数<code>awesome_method</code>前先执行<code>before_do_that</code>，并且要在同一个context下，如果直接修改通用代码，不仅不简洁，而且不优雅。这个时候你利用修饰符稍加修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@before_do_that</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">awesome_method</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># do a lot!</span></div><div class="line">    print(<span class="string">'main func'</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_do_that</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </div><div class="line">        <span class="comment"># ready for that</span></div><div class="line">        print(<span class="string">'before func'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div></pre></td></tr></table></figure>
<p>这里解释一下，在一个函数添加一个修饰符，相当于把awesome_method作为before_do_that的参数，转换成了一个新的同名函数，这里的before_do_that相当于一个工厂，进去的函数都必须通过加工。</p>
<p>那么多个修饰符的情况下，代码执行顺序如何？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'w1 ready go'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w2</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'w2 ready go'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@w2</span></div><div class="line"><span class="meta">@w1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'f1'</span>)</div></pre></td></tr></table></figure>
<p>若执行<code>f1()</code>，此时相当于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w2(w1(f1))()</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">w2 ready go</div><div class="line">w1 ready go</div><div class="line">f1</div></pre></td></tr></table></figure>
<p>带参数写法如下，这次用<code>after</code>举例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        result = func(*args, **kwargs)</div><div class="line">        print(<span class="string">'after_request...'</span>, args, kwargs)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@after_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    print(<span class="string">'render index.....'</span>)</div></pre></td></tr></table></figure>
<p>此时执行 <code>index([],2,c=&#39;fk&#39;)</code>，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">render index.....</div><div class="line">after_request... ([], 2) &#123;&apos;c&apos;: &apos;fk&apos;&#125;</div></pre></td></tr></table></figure>
<p><code>**</code>表示对键值对的引用，关于<code>**</code>的用法，我们可以甚至可以写一个漂亮的字典构造函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="keyword">lambda</span> **x:x</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a(a=<span class="number">2</span>,c=<span class="number">2</span>)</div><div class="line">&#123;<span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'a'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<p>如果多个修饰符写的不好看，还有修饰符带参数的闭包写法</p>
<p>dec.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Before</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'some thing before..'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">After</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'some thing after..'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Filter</span><span class="params">(before_func, after_func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(main_func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, kargs)</span>:</span></div><div class="line"></div><div class="line">            before_result = before_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (before_result != <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> before_result</div><div class="line"></div><div class="line">            main_result = main_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (main_result !=  <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> main_result</div><div class="line"></div><div class="line">            after_result = after_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (after_result != <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> after_result</div><div class="line"></div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> outer</div><div class="line"></div><div class="line"><span class="meta">@Filter(Before, After)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Index</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'index'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    Index([],<span class="number">2</span>,c=<span class="string">'fk'</span>)</div></pre></td></tr></table></figure>
<p>这个闭包利用了<code>Filter</code>和<code>outer</code>的三个参数函数，重新改写执行顺序，直到其中有一个函数抛出返回值为止。</p>
<p>至此关于修饰符的内容基本交代完毕</p>
<h2 id="多线程">多线程</h2><p>// Todo:</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python的修饰器&quot;&gt;Python的修饰器&lt;/h2&gt;&lt;p&gt;先看一个很常见的例子&lt;/p&gt;
&lt;p&gt;req.py&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】项目期末总结</title>
    <link href="http://yoursite.com/2016/12/22/program-final-summary/"/>
    <id>http://yoursite.com/2016/12/22/program-final-summary/</id>
    <published>2016-12-22T11:49:20.000Z</published>
    <updated>2016-12-30T06:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>系统架构为BS架构，基于Flask和React的web应用</p>
</blockquote>
<p><a href="http://github.com/imxana/ec_forum" target="_blank" rel="external">项目地址</a> (托管于Github)</p>
<h2 id="开发技术栈">开发技术栈</h2><h3 id="Python3">Python3</h3><p>osx下安装python3</p>
<pre><code>brew <span class="keyword">install</span> python3
</code></pre><p>ubuntu下安装python3(自带3.4版本)</p>
<pre><code>apt-<span class="built_in">get</span> install <span class="keyword">python3</span>
</code></pre><p>Python, 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。</p>
<p>为什么在这个项目选择Python而不是nodejs，因为使用Python开发快，语言简洁，没那么多技巧，所以读起来很清楚容易。加上Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。而且构架选择多，开源社区活跃。缺点是国内文档基本没有，需要自己看懂。</p>
<h3 id="Flask">Flask</h3><p>安装flask</p>
<pre><code>pip3 <span class="keyword">install</span> flask
</code></pre><p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。优点是小，定制性高，能让开发人员从0开始享受折腾的结果。缺点也就是重复造轮子，不过flask插件多，能提高开发效率。</p>
<h3 id="MySQL">MySQL</h3><p>osx下安装mysql</p>
<pre><code>brew <span class="keyword">install</span> mysql
</code></pre><p>ubuntu下安装mysql</p>
<pre><code>1. sudo apt-get <span class="operator"><span class="keyword">install</span> mysql-<span class="keyword">server</span>
<span class="number">2.</span> apt-<span class="keyword">get</span> isntall mysql-client
<span class="number">3.</span> sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libmysqlclient-dev</span>
</code></pre><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<p>MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>
<p>对我来说，sql型数据库与其说是成熟，不如说是历史遗留问题，用拼接字符串组成sql语句的执行方式，不但留下了注入式攻击漏洞，而且本身也让人多了额外的学习成本，来学习一些奇奇怪怪的语法。nosql不仅完美与JSON贴合，而且因为本身键值对的数据结构，可以放心的进行删除、插入操作，不用担心什么外键的问题。抹去一个人的数据，其所有子数据都会消除，就不用再一条条的到别的表去查找删除。尤其的表多了的时候。</p>
<p>选择MySQL的原因一部分是因为没有办法，很多公司还是用的这种数据库，MySQL是开源的这点还是值得肯定的。针对MySQL的问题有很多在社区中得到了解决。</p>
<h2 id="开发环境">开发环境</h2><h3 id="Unix-like">Unix-like</h3><p>不管如何，linux永远是最适合开发的系统环境。其对用户最小开发程度的限制，能让你高度定制你的生产环境。只要是一台Linux的终端，你就可以从0开始把它完全复原成你所用过的那台Linux的环境。有很多问题，不像win，你可以从系统层次上去解决这类问题，例如启动项，进程管理这一类。我们可以写一些简单脚本来做到一下很酷的事情。</p>
<h3 id="Vim">Vim</h3><p>下载</p>
<pre><code>apt-<span class="built_in">get</span> install <span class="keyword">vim</span>
</code></pre><p>vim像是一杯酒，越酿越醇，在unix-like上使用nvim，在一些插件的辅助下，已经成为unix-like下的最强大的编译器。</p>
<h2 id="部署环境">部署环境</h2><h3 id="Ubuntu">Ubuntu</h3><p>Ubuntu下能快速搭建工作环境，安装系统后，跑个脚本，把自己开发需要的环境，工具（git/vim和自己的配置）什么的一通自动安装好，一切简单快捷。</p>
<p>Ubuntu有开源的第三方软件安装，因此漏洞少，开源反而安全。</p>
<h3 id="Nginx">Nginx</h3><p>下载</p>
<pre><code>apt-<span class="keyword">get</span> install nginx
</code></pre><p>Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器。拥有负载均衡的功能，但是在单台服务器上无法体现。</p>
<h3 id="uWSGI">uWSGI</h3><p>下载</p>
<pre><code>pip3 <span class="keyword">install</span> uwsgi
</code></pre><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。</p>
<h3 id="Supervisord">Supervisord</h3><p>下载</p>
<pre><code>pip <span class="keyword">install</span> supervisor
</code></pre><p>Supervisor是一个客户/服务器系统，它可以在类Unix系统中管理控制大量进程。Supervisor使用python开发，有多年历史，目前很多生产环境下的服务器都在使用Supervisor。</p>
<h2 id="测试工具">测试工具</h2><h3 id="unittest（单元测试）">unittest（单元测试）</h3><p>The Python unit testing framework, sometimes referred to as “PyUnit,” is a Python language version of JUnit, by Kent Beck and Erich Gamma. JUnit is, in turn, a Java version of Kent’s Smalltalk testing framework. Each is the de facto standard unit testing framework for its respective language.</p>
<p>下载</p>
<pre><code>pip3 <span class="keyword">install</span> unittest
</code></pre><h3 id="curl（脚本测试）">curl（脚本测试）</h3><p>下载</p>
<pre><code>apt-<span class="keyword">get</span> install curl
</code></pre><p>curl  is  a  tool  to  transfer  data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS,  TELNET  and TFTP). The command is designed to work without user interaction.</p>
<p>curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections,cookies, file transfer resume, Metalink, and more. As you will see below, the number of features will  make  your  head spin!</p>
<p>curl is powered by libcurl for all transfer-related features. See libcurl(3) for details.</p>
<h2 id="遇到的问题">遇到的问题</h2><h3 id="pymysql无法使用localhost连接MySQL的解决方法">pymysql无法使用localhost连接MySQL的解决方法</h3><p>我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行</p>
<p>源抛错代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(host=<span class="string">'127.0.0.1'</span>,user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure>
<p>解决方法：使用mysql中的.sock文件进行连接，放弃通过IP匹配本地的方法。</p>
<p>执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin variables| grep socket</div></pre></td></tr></table></figure>
<p>查看socket所在位置，然后尝试使用格式如下的连接     </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>,unix_socket=<span class="string">'/var/run/mysqld/mysqld.sock'</span>)</div></pre></td></tr></table></figure>
<h3 id="MySQL的问题以及解决过程">MySQL的问题以及解决过程</h3><p>我一开始使用MySQL我就后悔了，因为我深深的体会到，在sql型数据库中，当表之间关系复杂以后，要删除一条信息是有多么的困难。而几乎所有的第三方MySQL库使用的还是原生的sql语句。且不说sql语句的拼接被x问题，sql的高阶语法本身就非常的反人类。加上我已经习惯了noSQL带来的好处（直接字典\对象操作），仿佛就从天堂到了地狱。</p>
<h4 id="The_problem">The problem</h4><p>前台说请求报错，她那里格式正常。启动服务器简单脚本测试，发送get正常，post报<code>pipeBroken</code>。重启应用，好了。过了半天，一发post，跪。</p>
<h4 id="Debug">Debug</h4><p>get能用，post挂了，肯定是数据库问题，看了下错误类型，连接管道断了，那就是pymysql的问题。</p>
<p>第一反应，连接对象过期了，定期更新it，无解。</p>
<p>加快更新频率，无解。</p>
<p>启用连接池，加大连接节点数，加快更新频率，均无解。此时已过2周，暂时用无限手动重启应用的方法应付问题。</p>
<p>通过<code>supervisor</code>查应用日志，发现启动应用大约过了半天时间一发<code>post</code>服务器才会<code>pipeBroken</code>，而报错期间并没有主动断开。就是过期了啊（葛优瘫）</p>
<h4 id="Fix_up">Fix up</h4><p>经过一段时间的思考，我感觉是MySQL本身的问题，查了一会相关资料，把服务器日志<code>pipeBroken</code>的报文Google了一下，发现是MySQL长时间没有操作，进入睡眠了。。</p>
<p>进入MySQL交互界面输入</p>
<pre><code><span class="operator"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%timeout%'</span>;</span>
</code></pre><p>发现<code>wait_timeout</code>的值为28800s，相等于8小时没操作MySQL就会断开连接。于是我用最简单暴力的方法：</p>
<pre><code><span class="operator"><span class="keyword">set</span> <span class="keyword">global</span> wait_timeout=<span class="number">2880000</span>;</span>
</code></pre><p>服务器再也不频繁抛错了。至于之前的那些解决方案……先留着那些代码吧</p>
<h4 id="improve">improve</h4><p>修改MySQL变量不是权宜之计，MySQL休眠是因为长期没有操作，所以自动断开连接节点，而且不是所有的服务器都支持修改MySQL全局变量的，有时候root也不能改- -。所以用计时器每隔一段时间向MySQL发一次查询，重置连接时间。若还抛出错误<code>pipeBroken</code>的时候换一条新的管道。</p>
<p>实际效果：MySQL能够平稳的运行好几天，几天之内查询成功率在90%左右，仍然不太能够令人满意，但是相比以前，已经进步了很多。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;系统架构为BS架构，基于Flask和React的web应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/imxana/ec_forum&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
  </entry>
  
  <entry>
    <title>大三读《黑客与画家》</title>
    <link href="http://yoursite.com/2016/11/28/artists_and_hackers/"/>
    <id>http://yoursite.com/2016/11/28/artists_and_hackers/</id>
    <published>2016-11-28T00:10:52.000Z</published>
    <updated>2016-12-07T13:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Forward">Forward</h1><p>实际上，作为一本2004年发行的书，我之前已经「预读」过这本书，那个时候互联网创业可能更加的「流行」，那个时候，大概就是几年前吧，绝对想不到创业能够发展的如此迅速。</p>
<h1 id="校园监狱">校园监狱</h1><p>这种情况到目前仍然没有改变。在十六、十七世纪时，青少年作为社会的低级成员，在社会中发挥了更大的作用，比如学徒，帮手等，即时是最没用的那些青少年，招进来也能进行一些基础工作，比如倒水，扫地等。那个时候成年人对于青少年的看法也没有像现在这么糟糕。当然，如果青少年能够尊重成年人，成年人也会更加尊重青少年，但是我并没有看到这一点，一种所谓的「平等」和「青春期」的概念在做崇，两者之间的鸿沟被划的很开。青少年从在成年之前并没有被教育自己是低级成员，但是成年后却严格笃定这一点。</p>
<p>生活也是一名实践学科。在学校里的畸形生活，某种程度上类似于监狱。然而最大的问题是，并不告诉青少年们这一点，而把监狱交给犯人来管理。一面告诉你你是平等的，一面限制了你的诸多自由。我不认为「校园是社会的缩影」，社会要更友好一些。</p>
<p>所谓的老师的教学内容，不过也是短暂实践中自己的不完全总结。而且很多老师，很有可能未曾离开校园氛围，从未接触过社会，我把这种老师称为「老狱卒」。而一些「监狱长」则洞悉监狱规则，会在监狱中保持着微妙的平衡。有些老师很优秀，但是仅仅是昙花一现，不能代表整体。</p>
<p>毕业生一旦就业，人生立即跨入另一个阶段，没有任何的缓冲空间。这也难怪人一到社会中去时，就对曾经所处的青少年有如此大的意见。</p>
<p>另外，校园的最大缺陷在于无聊。能获得的信息极其有限，青少年心智发展几乎为0。不阐述。</p>
<h1 id="竭泽而渔">竭泽而渔</h1><p>「创新，创业！」</p>
<p>首先要明白一点，蛋糕再大，也是有限的。标题有些过激了，我想表达的是，创业这个词被过度消费了。</p>
<p>实际上到目前为止，能够成为「new idea」的东西已经不多，到目前为止，你现在还能想到未被实践过的idea吗？某种程度上，是因为技术发展速度，被大大放缓了。</p>
<p>从技术型创新，到功能型创新，到开发工具及其开发工具的创新，包括市场上出现各种平台（然而平台上却都是空空如也，如果一个大公司打算收购你，我猜大概不是因为你做的东西有多棒，而是看中了你背后的使用用户群体。）到最后就是以上创新的各种功能排列组合式创新，等到这种类型的创新的蛋糕也被分完了，就只能够等着新蛋糕的出现。不过那个时候，你有信心与那些工具成熟，流水线作业的大公司竞争吗？</p>
<p>然后有人说，我们不比创新，我们比运营，在某些方面比别人做的更好。我的想法是，不如加入一个大公司，因为是在做同样的事情，虽然自由更少，但大公司一般做的更好。</p>
<p>题外话：一次创作者被频繁打击，被ZF，被愤青，被同行，一些优秀的作品被埋没，如果不从政策上改革，有些行业将永无出头之日。</p>
<h1 id="校园招聘">校园招聘</h1><p>（前几天的观摩招聘的感想作业，800字）</p>
<p>观摩的感想，说实话和大一去看的时候差不多，毕竟是面向整个学校的招聘，不是单单只有计算机相关的。</p>
<p>总结一下，有些企业是真的不靠谱。</p>
<p>这种观摩，说句实话，有点像监狱里的人在释放之前，让你先见见外面的变化。和我一起的几个小伙伴面对面试人员，不由不同程度地表现出了自己的恐惧。</p>
<p>说实话，我有点被他们的恐惧感染了，不过总体上心态还是很轻松，不是因为我有多厉害，而是我本身对这种市场一样招聘没有多大兴趣，而且就我所见，需要到学校里来招聘的，一般都是找不到人的。难道你希望你的同事都是20出头，水平可能还不如你的毕业生？</p>
<p>但是在计算机相关的职位招聘里，我看到的需求的职位，仍然没有什么变化，有点让我失望。就从语言来看，整个会场就是 C，Java，C。Java，甚至连.net的也不多，互联网氛围，工程师导向的企业并不多，更多的为了招聘熟练工。这侧面反映了那个企业并不了解自己使用的技术，并不知道Python等其他高级语言的好处，只是觉得如果我使用这些老的工具的话，如果员工跑了，我能更快的找到替代的人（然而他们根本也没想过为什么他们不愿意留下来，或者会被淘汰）。从职位来看，永远都是那么几个职位，有没有CTO问问自己，我们为什么需要测试？我们为什么需要运维？看别人有，所以我们也要有，应该吧。</p>
<p>假如我是创业者，我的竞争对手开始在招Oracle工程师，那我会松一口气；如果他们开始找lisp工程师了，我会如坐针毡，因为这是一家黑客导向的企业，他们内耗少效率极高，创新与开发速度会很快，我们的进度将永远赶不上他们。（xana注：引用）</p>
<p>一般来说，付出与收获在总体上呈正比，在个体上却不一定。运气某种程度上呈决定性作用。有点人只是简历写的好，然而那些有大量开源项目，却不屑于写简历的人，却被某些不识货的企业鄙夷。当然，hacker肯定希望加入工程师导向的企业，尊重也很重要，至少是互相尊重。</p>
<p>因为我本身不太喜欢这种市场一样的招聘，置身于人海之中，感觉自己像商品一样在买家中随波逐流，所以并没有仔细看他们的职位和要求。不过看到一家学长创业的企业，工程师导向，人员需求要求非常清晰，不像「软件开发工程师」这样泛泛而谈，居然还把就职福利也写上了，画风明显和其他海报不一样，一看就比其它靠谱多了。一般一个企业会把自己最好的一面展示给别人看，有些企业展示的东西都让人看不下去了，那那些没有看见的部分呢？</p>
<h1 id="不能说的话">不能说的话</h1><p>你会发现我到现在有些地方说的很含糊，有种欲言又止的感觉。就算在国外，有些话也是不能说的。这种规则会使你养成小心谨慎的习惯，甚至有些神经过敏。在批判一个东西时，往往还是需要肯定它的部分。因为人们不太能接受自我的否定（尽管批评往往是对的），当权者往往利用这一点来笼络民心，排除异己。</p>
<p>到现在，你被问到觉得有什么话是不能说的，你可能回答「没有」，但是从从长远的历史上看，从日心说到自然选择，真理一般都难以被大众接受。或者我们换一种说法，有什么话说了，你身边的人会不高兴？</p>
<p>我们谈笑风生地+1s，为什么没有被打死？因为膜法师已经有了民众基础，你说个别的试试？</p>
<p>(待续)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Forward&quot;&gt;Forward&lt;/h1&gt;&lt;p&gt;实际上，作为一本2004年发行的书，我之前已经「预读」过这本书，那个时候互联网创业可能更加的「流行」，那个时候，大概就是几年前吧，绝对想不到创业能够发展的如此迅速。&lt;/p&gt;
&lt;h1 id=&quot;校园监狱&quot;&gt;校园监狱&lt;/h
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】pymysql无法使用localhost连接MySQL的解决方法</title>
    <link href="http://yoursite.com/2016/11/09/pymysql_localhost/"/>
    <id>http://yoursite.com/2016/11/09/pymysql_localhost/</id>
    <published>2016-11-09T12:05:27.000Z</published>
    <updated>2016-12-29T11:25:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行</p>
<p>源抛错代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(host=<span class="string">'127.0.0.1'</span>,user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure>
<p>解决方法：使用mysql中的.sock文件进行连接，放弃通过IP匹配本地的方法。</p>
<p>执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin variables| grep socket</div></pre></td></tr></table></figure>
<p>查看socket所在位置，然后尝试使用格式如下的连接     </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>,unix_socket=<span class="string">'/var/run/mysqld/mysqld.sock'</span>)</div></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/6885164/pymysql-cant-connect-to-mysql-on-localhost" target="_blank" rel="external">原stackoverflow上的回答</a></p>
<p>思考</p>
<p>可以写一个.sh脚本，动态生成配置文件，而不需要手动修改它</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行&lt;/p&gt;
&lt;p&gt;源抛错代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】Python中你不应该做的事</title>
    <link href="http://yoursite.com/2016/11/05/things-not-to-do-in-python/"/>
    <id>http://yoursite.com/2016/11/05/things-not-to-do-in-python/</id>
    <published>2016-11-04T16:05:27.000Z</published>
    <updated>2016-11-14T10:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题">标题</h1><p>译文标题：Python中你不应该做的事</p>
<p>原文标题：Things You Shouldn’t Do in Python</p>
<p>原文链接: <a href="https://www.airpair.com/python/posts/things-not-to-do-in-python" target="_blank" rel="external">https://www.airpair.com/python/posts/things-not-to-do-in-python</a></p>
<h1 id="疑难句">疑难句</h1><p>1</p>
<p>“Premature optimization is the root of all evil (or at least most of it) in programming.” — Donald Knuth</p>
<p>“在编程中过早的优化是一切（或至少大部分）罪恶的根源。” - 高德纳</p>
<p>2</p>
<p>A word of advice: If you program outside the conventional rules, make heavy use of syntax checkers and secondary tools to ensure that the only code that disobeys the rules is precisely the code you intended.</p>
<p>一句忠告：如果您在传统的规则之外进行编程，请不要吝啬大量使用语法检查和辅助工具，以确保唯一违背规则的那些代码能达到所预期的结果。</p>
<p>3</p>
<p>“By understanding a machine-oriented language, the programmer will tend to use a much more efficient method; it is much closer to reality.” (Knuth again)</p>
<p>“通过了解一个面向机器的语言，程序员会倾向于使用一种更有效的方法，它更接近现实”。（又是克努特）</p>
<p>4</p>
<p>Standard python dictionaries are very useful. However, sometimes it is more convenient to use unquoted class member names to gain access to data stored in dictionaries rather than brackets and quoted strings.</p>
<p>标准的Python字典是很有用。但是有时使用不带引号的类成员的名字来访问在字典中存储的数据比括号和引用字符串数据更加方便。</p>
<p>5</p>
<p>Conclusion</p>
<p>There are aesthetics with strong proponents and opponents but:</p>
<ul>
<li>There really are no objective Do’s and Don’ts in programming.</li>
<li>Anything for which there is machine code is permitted.</li>
<li>Learn new “dirty tricks”, not just “good practices”.</li>
<li>Use what works and make it useful for others.</li>
<li>Don’t make it cost too much (unless it pleases you to do so).</li>
<li>Explain the why and how of unconventional methods with care and efficiency.</li>
<li>Accept criticism gladly, because surely you will be rightly criticized.<br>Don’t just work… PLAY! Make mistakes!</li>
</ul>
<p>结论</p>
<p>有着相当一部分很强烈的支持和反对的美学，但是请注意：</p>
<ul>
<li>在编程中真的有没有客观上的Do’s和Don’ts。</li>
<li>任何事情上使用机器代码都是允许的。</li>
<li>学习新的“肮脏把戏”，而不仅仅是“良好做法”。</li>
<li>使用有效的工具，并使其让他人也可用。</li>
<li>不要为一件事花费太多（除非你高兴这样做）。</li>
<li>谨慎而效率地解释为何以及如何使用那些非常规的方法。</li>
<li>开心接受批评，因为你一定会得到正确的批评。</li>
<li>不要只是工作…去享受！去犯错误！</li>
</ul>
<p>6</p>
<p>There will always be people who will seek solutions to problems come hell or high water and other people who will wag a finger and look sternly over their lorgnettes at the egregious methods used by the problem solvers. This battle between hackers and pedants inevitably results in a lively history of online discussions containing very strong opinions and, sometimes even, useful examples.</p>
<p>总是会有一些无论如何困难都在寻求解决问题办法的人和其他对着提出惊人方案的解决者一脸正色地在长柄眼镜上摇摇手指的人。黑客和学究之间的这一战不可避免地会导致一些强烈意见和网上讨论，有时甚至是有用的案例。</p>
<h1 id="单词本">单词本</h1><p>come hell or high water  就算天崩地裂/无论如何困难</p>
<p>Duck typing  <a href="https://en.wikipedia.org/wiki/Duck_typing#Concept_examples" target="_blank" rel="external">wiki</a></p>
<p>premature 过早的</p>
<p>optimization 优化</p>
<p>lorgnettes 长柄眼镜</p>
<p>pedants 卖弄知识的人</p>
<p>inevitably 不可避免的</p>
<p>Impedance 阻抗</p>
<p>Mismatch 不协调的</p>
<p>cleverness 灵巧</p>
<p>obfuscation 混淆</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标题&quot;&gt;标题&lt;/h1&gt;&lt;p&gt;译文标题：Python中你不应该做的事&lt;/p&gt;
&lt;p&gt;原文标题：Things You Shouldn’t Do in Python&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&quot;https://www.airpair.com/python
    
    </summary>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
  </entry>
  
</feed>
