<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XANA&#39;s Blog</title>
  <subtitle>I can be who you are</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-24T02:41:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XANA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>svn快速入门</title>
    <link href="http://yoursite.com/2017/03/23/svn%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/03/23/svn快速入门/</id>
    <published>2017-03-23T01:40:47.000Z</published>
    <updated>2017-03-24T02:41:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Checkout">Checkout</h2><p>首先你要做的事情是Subversion(以下简称svn) checkout。由于<code>Git clones</code>将工作目录（你编辑文件的地方）与存储库数据分开，因此在工作目录中一次只能有一个分支。</p>
<p><code>svn checkouts</code>是不同的：它们将工作目录中的存储库数据混合在一起，因此对于checkout的每个分支和标记都有一个工作目录。对于具有许多分支和标签的存储库，检查所有文件可能是一个负担，因此您应该从部分checkout开始。</p>
<p>1.在GitHub上找到repository的导航主页.</p>
<p>2.在repository名称的下面, 点击<code>Clone or download</code>.</p>
<p>3.选择<code>Clone with HTTPS</code>, 复制其中的链接.</p>
<p>4.在本地repository中创建一个空的checkout:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ svn co --depth empty https://github.com/user/repo</div><div class="line">Checked out revision 1.</div><div class="line">$ <span class="built_in">cd</span> repo</div></pre></td></tr></table></figure>
<p>5.获取<code>trunk</code>分支. SVN会把<code>trunk</code>桥接映射到<code>Git HEAD branch</code>(通常指<code>master</code>).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ svn up trunk</div><div class="line">A    trunk</div><div class="line">A    trunk/README.md</div><div class="line">A    trunk/gizmo.rb</div><div class="line">Updated to revision 1.</div></pre></td></tr></table></figure>
<p>6.在<code>branches</code>路径下获取空的checkout. 这是所有非<code>HEAD</code>分支存在的地方，你将在这里做<code>feature branches</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ svn up --depth empty branches</div><div class="line">Updated to revision 1.</div></pre></td></tr></table></figure>
<p>my ex:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ tree                                                                                                                                                                </div><div class="line">.</div><div class="line">├── branches</div><div class="line">│   └── more_awesome</div><div class="line">│       ├── LICENSE</div><div class="line">│       ├── README.md</div><div class="line">│       └── <span class="built_in">test</span></div><div class="line">└── trunk</div><div class="line">    ├── LICENSE</div><div class="line">    └── README.md</div></pre></td></tr></table></figure>
<h2 id="创建分支">创建分支</h2><p>你也可以使用Subversion桥接到GitHub创建分支。</p>
<p>从svn客户端，通过更新确保<code>master</code>是最新的trunk：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ svn up trunk</div><div class="line">At revision 1.</div></pre></td></tr></table></figure>
<p>接下来，您可以使用<code>svn copy</code>创建新分支:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ svn copy trunk branches/more_awesome</div><div class="line">A    branches/more_awesome</div><div class="line">$ svn commit -m <span class="string">'Added more_awesome topic branch'</span></div><div class="line">Adding    branches/more_awesome</div><div class="line"></div><div class="line">Committed revision 2.</div></pre></td></tr></table></figure>
<p>You can confirm that the new branch exists in the repository’s branch dropdown in Github.</p>
<p><img src="https://help.github.com/assets/images/help/branch/svnflow-branch-snapshot.png" alt=""></p>
<p>您可以确认新分支存在于存储库的分支下拉列表中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git fetch</div><div class="line">From https://github.com/user/repo/</div><div class="line">* [new branch]    more_awesome -&gt; origin/more_awesome</div></pre></td></tr></table></figure>
<h2 id="提交修改">提交修改</h2><p>在添加了一些功能并修复了一些错误之后，你需要将这些更改提交给GitHub。这就和你平时使用svn一样。编辑文件，并使用<code>svn commit</code>记录你的更改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ svn status</div><div class="line">M    gizmo.rb</div><div class="line">$ svn commit -m <span class="string">'Guard against known problems'</span></div><div class="line">Sending    more_awesome/gizmo.rb</div><div class="line">Transmitting file data .</div><div class="line">Committed revision 3.</div><div class="line">$ svn status</div><div class="line">?    <span class="built_in">test</span></div><div class="line">$ svn add <span class="built_in">test</span></div><div class="line">A    <span class="built_in">test</span></div><div class="line">A    <span class="built_in">test</span>/gizmo_test.rb</div><div class="line">$ svn commit -m <span class="string">'Test coverage for problems'</span></div><div class="line">Adding    more_awesome/<span class="built_in">test</span></div><div class="line">Adding    more_awesome/<span class="built_in">test</span>/gizmo_test.rb</div><div class="line">Transmitting file data .</div><div class="line">Committed revision 4.</div></pre></td></tr></table></figure>
<h2 id="切换分支">切换分支</h2><p>要在分支机构之间切换，您可能需要首先检查<code>trunk</code>的内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn co --depth empty https://github.com/user/repo/trunk</div></pre></td></tr></table></figure>
<p>然后，您可以切换到另一个分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn switch https://github.com/user/repo/branches/more_awesome</div></pre></td></tr></table></figure>
<p><del><a href="https://svnhub.com" target="_blank" rel="external">一个有趣的网站</a></del> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Checkout&quot;&gt;Checkout&lt;/h2&gt;&lt;p&gt;首先你要做的事情是Subversion(以下简称svn) checkout。由于&lt;code&gt;Git clones&lt;/code&gt;将工作目录（你编辑文件的地方）与存储库数据分开，因此在工作目录中一次只能有一个分支。&lt;
    
    </summary>
    
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>常见的sql攻击</title>
    <link href="http://yoursite.com/2017/03/22/%E5%B8%B8%E8%A7%81%E7%9A%84sql%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2017/03/22/常见的sql攻击/</id>
    <published>2017-03-22T10:12:34.000Z</published>
    <updated>2017-03-24T01:32:35.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Job-hunting</title>
    <link href="http://yoursite.com/2017/01/01/Job-hunting/"/>
    <id>http://yoursite.com/2017/01/01/Job-hunting/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-03-22T10:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>已经重新排版，尽量挑选出简洁有效的内容</del></p>
<p><del>已找到工作, 勿念</del></p>
<ol>
<li>我目前是杭电大三学生，热爱互联网，现想找一份实习工作，研发\测试\运维均可，主要在学校易受到工具、环境、规模限制，想在实践中进行学习。我要求不高，只是大三下学期每周还有2~4门水课，所以希望在实习地区在杭州之内，最好离下沙不要太远，包住另说:）。</li>
<li>我从大一才开始学编程，大学之前并没有算法等基础，可能这方面会有些薄弱。大学基本靠自学踩坑出来的。</li>
<li>主要使用的语言工具是Python3和NodeJS，能独立开发、部署中小型web服务。（举例：Flask+uWSGI+Nginx+Supervisor+MySQL 或Express+MongoDB+Supervisor 的http服务）熟悉测试流程，遵循封闭开发原则。</li>
<li>重度Linux/Vim党，IDE-fucker。</li>
<li>大二学过半年时间的iOS，在AppStore上丢了一个第三方登录-支付流程完整的应用。<del>尝试用ReactNative重写一次，坑太多，不了了之。</del>未来不打算写移动，仅证明自学能力。</li>
<li>写过一段时间的C\Java但不是很熟</li>
<li>不参加文档式的ppt比赛<del>如xx外包\x苗\xx网+\x战杯</del>，更喜欢快速开发出实际产品的game。参加过2次hackathon。</li>
</ol>
<p>欢迎推荐~HR请通过邮箱或者其他方式联系我</p>
<p>邮箱 xana.awaken@gmail.com </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;已经重新排版，尽量挑选出简洁有效的内容&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;已找到工作, 勿念&lt;/del&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我目前是杭电大三学生，热爱互联网，现想找一份实习工作，研发\测试\运维均可，主要在学校易受到工具、环境、规模限制，想在实践中进行学
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
      <category term="job" scheme="http://yoursite.com/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>Python3修饰器和线程锁</title>
    <link href="http://yoursite.com/2016/12/29/decorator/"/>
    <id>http://yoursite.com/2016/12/29/decorator/</id>
    <published>2016-12-29T11:16:21.000Z</published>
    <updated>2017-03-16T17:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python的修饰器">Python的修饰器</h2><p>先看一个很常见的例子</p>
<p>req.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">'before_request...'</span>, args, kwargs)</div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        result = func(*args, **kwargs)</div><div class="line">        print(<span class="string">'after_request...'</span>)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@after_request   </span></div><div class="line"><span class="meta">@before_request </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    print(<span class="string">'render index.....'</span>)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    index([],<span class="number">2</span>,c=<span class="string">'fk'</span>)</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">before_request... ([], 2) &#123;<span class="string">'c'</span>: <span class="string">'fk'</span>&#125;</div><div class="line">render index.....</div><div class="line">after_request...</div></pre></td></tr></table></figure>
<h3 id="原理解释">原理解释</h3><p>你写了一个很棒的通用方法，但是有点长。但是老板这时候来了需求，要求它在不同的情况下进行一些不同的操作（例如不同情境下的验证操作）。为了遵循封闭开发原则，尽量不去改已经完成的代码，或许修饰器是一个不错而优雅的选择。</p>
<p>先举个简单例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">awesome_method</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># do a lot!</span></div><div class="line">    print(<span class="string">'main func'</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_do_that</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># ready for that</span></div><div class="line">    print(<span class="string">'before func'</span>)</div></pre></td></tr></table></figure>
<p>你想在函数<code>awesome_method</code>前先执行<code>before_do_that</code>，并且要在同一个context下，如果直接修改通用代码，不仅不简洁，而且不优雅。这个时候你利用修饰符稍加修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@before_do_that</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">awesome_method</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># do a lot!</span></div><div class="line">    print(<span class="string">'main func'</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_do_that</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </div><div class="line">        <span class="comment"># ready for that</span></div><div class="line">        print(<span class="string">'before func'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div></pre></td></tr></table></figure>
<p>这里解释一下，在一个函数添加一个修饰符，相当于把awesome_method作为before_do_that的参数，转换成了一个新的同名函数，这里的before_do_that相当于一个工厂，进去的函数都必须通过加工。</p>
<p>那么多个修饰符的情况下，代码执行顺序如何？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'w1 ready go'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w2</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'w2 ready go'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@w2</span></div><div class="line"><span class="meta">@w1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'f1'</span>)</div></pre></td></tr></table></figure>
<p>若执行<code>f1()</code>，此时相当于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w2(w1(f1))()</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">w2 ready go</div><div class="line">w1 ready go</div><div class="line">f1</div></pre></td></tr></table></figure>
<p>带参数写法如下，这次用<code>after</code>举例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        result = func(*args, **kwargs)</div><div class="line">        print(<span class="string">'after_request...'</span>, args, kwargs)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@after_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    print(<span class="string">'render index.....'</span>)</div></pre></td></tr></table></figure>
<p>此时执行 <code>index([],2,c=&#39;fk&#39;)</code>，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">render index.....</div><div class="line">after_request... ([], 2) &#123;&apos;c&apos;: &apos;fk&apos;&#125;</div></pre></td></tr></table></figure>
<p><code>**</code>表示对键值对的引用，关于<code>**</code>的用法，我们可以甚至可以写一个漂亮的字典构造函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="keyword">lambda</span> **x:x</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a(a=<span class="number">2</span>,c=<span class="number">2</span>)</div><div class="line">&#123;<span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'a'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<p>如果多个修饰符写的不好看，还有修饰符带参数的闭包写法</p>
<p>dec.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Before</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'some thing before..'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">After</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'some thing after..'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Filter</span><span class="params">(before_func, after_func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(main_func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, kargs)</span>:</span></div><div class="line"></div><div class="line">            before_result = before_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (before_result != <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> before_result</div><div class="line"></div><div class="line">            main_result = main_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (main_result !=  <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> main_result</div><div class="line"></div><div class="line">            after_result = after_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (after_result != <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> after_result</div><div class="line"></div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> outer</div><div class="line"></div><div class="line"><span class="meta">@Filter(Before, After)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Index</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'index'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    Index([],<span class="number">2</span>,c=<span class="string">'fk'</span>)</div></pre></td></tr></table></figure>
<p>这个闭包利用了<code>Filter</code>和<code>outer</code>的三个参数函数，重新改写执行顺序，直到其中有一个函数抛出返回值为止。</p>
<p>至此关于修饰符的内容基本交代完毕</p>
<h2 id="多线程">多线程</h2><p>// Todo:</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python的修饰器&quot;&gt;Python的修饰器&lt;/h2&gt;&lt;p&gt;先看一个很常见的例子&lt;/p&gt;
&lt;p&gt;req.py&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】项目期末总结</title>
    <link href="http://yoursite.com/2016/12/22/program-final-summary/"/>
    <id>http://yoursite.com/2016/12/22/program-final-summary/</id>
    <published>2016-12-22T11:49:20.000Z</published>
    <updated>2016-12-30T06:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>系统架构为BS架构，基于Flask和React的web应用</p>
</blockquote>
<p><a href="http://github.com/imxana/ec_forum" target="_blank" rel="external">项目地址</a> (托管于Github)</p>
<h2 id="开发技术栈">开发技术栈</h2><h3 id="Python3">Python3</h3><p>osx下安装python3</p>
<pre><code>brew <span class="keyword">install</span> python3
</code></pre><p>ubuntu下安装python3(自带3.4版本)</p>
<pre><code>apt-<span class="built_in">get</span> install <span class="keyword">python3</span>
</code></pre><p>Python, 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。</p>
<p>为什么在这个项目选择Python而不是nodejs，因为使用Python开发快，语言简洁，没那么多技巧，所以读起来很清楚容易。加上Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。而且构架选择多，开源社区活跃。缺点是国内文档基本没有，需要自己看懂。</p>
<h3 id="Flask">Flask</h3><p>安装flask</p>
<pre><code>pip3 <span class="keyword">install</span> flask
</code></pre><p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。优点是小，定制性高，能让开发人员从0开始享受折腾的结果。缺点也就是重复造轮子，不过flask插件多，能提高开发效率。</p>
<h3 id="MySQL">MySQL</h3><p>osx下安装mysql</p>
<pre><code>brew <span class="keyword">install</span> mysql
</code></pre><p>ubuntu下安装mysql</p>
<pre><code>1. sudo apt-get <span class="operator"><span class="keyword">install</span> mysql-<span class="keyword">server</span>
<span class="number">2.</span> apt-<span class="keyword">get</span> isntall mysql-client
<span class="number">3.</span> sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libmysqlclient-dev</span>
</code></pre><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<p>MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>
<p>对我来说，sql型数据库与其说是成熟，不如说是历史遗留问题，用拼接字符串组成sql语句的执行方式，不但留下了注入式攻击漏洞，而且本身也让人多了额外的学习成本，来学习一些奇奇怪怪的语法。nosql不仅完美与JSON贴合，而且因为本身键值对的数据结构，可以放心的进行删除、插入操作，不用担心什么外键的问题。抹去一个人的数据，其所有子数据都会消除，就不用再一条条的到别的表去查找删除。尤其的表多了的时候。</p>
<p>选择MySQL的原因一部分是因为没有办法，很多公司还是用的这种数据库，MySQL是开源的这点还是值得肯定的。针对MySQL的问题有很多在社区中得到了解决。</p>
<h2 id="开发环境">开发环境</h2><h3 id="Unix-like">Unix-like</h3><p>不管如何，linux永远是最适合开发的系统环境。其对用户最小开发程度的限制，能让你高度定制你的生产环境。只要是一台Linux的终端，你就可以从0开始把它完全复原成你所用过的那台Linux的环境。有很多问题，不像win，你可以从系统层次上去解决这类问题，例如启动项，进程管理这一类。我们可以写一些简单脚本来做到一下很酷的事情。</p>
<h3 id="Vim">Vim</h3><p>下载</p>
<pre><code>apt-<span class="built_in">get</span> install <span class="keyword">vim</span>
</code></pre><p>vim像是一杯酒，越酿越醇，在unix-like上使用nvim，在一些插件的辅助下，已经成为unix-like下的最强大的编译器。</p>
<h2 id="部署环境">部署环境</h2><h3 id="Ubuntu">Ubuntu</h3><p>Ubuntu下能快速搭建工作环境，安装系统后，跑个脚本，把自己开发需要的环境，工具（git/vim和自己的配置）什么的一通自动安装好，一切简单快捷。</p>
<p>Ubuntu有开源的第三方软件安装，因此漏洞少，开源反而安全。</p>
<h3 id="Nginx">Nginx</h3><p>下载</p>
<pre><code>apt-<span class="keyword">get</span> install nginx
</code></pre><p>Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器。拥有负载均衡的功能，但是在单台服务器上无法体现。</p>
<h3 id="uWSGI">uWSGI</h3><p>下载</p>
<pre><code>pip3 <span class="keyword">install</span> uwsgi
</code></pre><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。</p>
<h3 id="Supervisord">Supervisord</h3><p>下载</p>
<pre><code>pip <span class="keyword">install</span> supervisor
</code></pre><p>Supervisor是一个客户/服务器系统，它可以在类Unix系统中管理控制大量进程。Supervisor使用python开发，有多年历史，目前很多生产环境下的服务器都在使用Supervisor。</p>
<h2 id="测试工具">测试工具</h2><h3 id="unittest（单元测试）">unittest（单元测试）</h3><p>The Python unit testing framework, sometimes referred to as “PyUnit,” is a Python language version of JUnit, by Kent Beck and Erich Gamma. JUnit is, in turn, a Java version of Kent’s Smalltalk testing framework. Each is the de facto standard unit testing framework for its respective language.</p>
<p>下载</p>
<pre><code>pip3 <span class="keyword">install</span> unittest
</code></pre><h3 id="curl（脚本测试）">curl（脚本测试）</h3><p>下载</p>
<pre><code>apt-<span class="keyword">get</span> install curl
</code></pre><p>curl  is  a  tool  to  transfer  data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS,  TELNET  and TFTP). The command is designed to work without user interaction.</p>
<p>curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections,cookies, file transfer resume, Metalink, and more. As you will see below, the number of features will  make  your  head spin!</p>
<p>curl is powered by libcurl for all transfer-related features. See libcurl(3) for details.</p>
<h2 id="遇到的问题">遇到的问题</h2><h3 id="pymysql无法使用localhost连接MySQL的解决方法">pymysql无法使用localhost连接MySQL的解决方法</h3><p>我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行</p>
<p>源抛错代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(host=<span class="string">'127.0.0.1'</span>,user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure>
<p>解决方法：使用mysql中的.sock文件进行连接，放弃通过IP匹配本地的方法。</p>
<p>执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin variables| grep socket</div></pre></td></tr></table></figure>
<p>查看socket所在位置，然后尝试使用格式如下的连接     </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>,unix_socket=<span class="string">'/var/run/mysqld/mysqld.sock'</span>)</div></pre></td></tr></table></figure>
<h3 id="MySQL的问题以及解决过程">MySQL的问题以及解决过程</h3><p>我一开始使用MySQL我就后悔了，因为我深深的体会到，在sql型数据库中，当表之间关系复杂以后，要删除一条信息是有多么的困难。而几乎所有的第三方MySQL库使用的还是原生的sql语句。且不说sql语句的拼接被x问题，sql的高阶语法本身就非常的反人类。加上我已经习惯了noSQL带来的好处（直接字典\对象操作），仿佛就从天堂到了地狱。</p>
<h4 id="The_problem">The problem</h4><p>前台说请求报错，她那里格式正常。启动服务器简单脚本测试，发送get正常，post报<code>pipeBroken</code>。重启应用，好了。过了半天，一发post，跪。</p>
<h4 id="Debug">Debug</h4><p>get能用，post挂了，肯定是数据库问题，看了下错误类型，连接管道断了，那就是pymysql的问题。</p>
<p>第一反应，连接对象过期了，定期更新it，无解。</p>
<p>加快更新频率，无解。</p>
<p>启用连接池，加大连接节点数，加快更新频率，均无解。此时已过2周，暂时用无限手动重启应用的方法应付问题。</p>
<p>通过<code>supervisor</code>查应用日志，发现启动应用大约过了半天时间一发<code>post</code>服务器才会<code>pipeBroken</code>，而报错期间并没有主动断开。就是过期了啊（葛优瘫）</p>
<h4 id="Fix_up">Fix up</h4><p>经过一段时间的思考，我感觉是MySQL本身的问题，查了一会相关资料，把服务器日志<code>pipeBroken</code>的报文Google了一下，发现是MySQL长时间没有操作，进入睡眠了。。</p>
<p>进入MySQL交互界面输入</p>
<pre><code><span class="operator"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%timeout%'</span>;</span>
</code></pre><p>发现<code>wait_timeout</code>的值为28800s，相等于8小时没操作MySQL就会断开连接。于是我用最简单暴力的方法：</p>
<pre><code><span class="operator"><span class="keyword">set</span> <span class="keyword">global</span> wait_timeout=<span class="number">2880000</span>;</span>
</code></pre><p>服务器再也不频繁抛错了。至于之前的那些解决方案……先留着那些代码吧</p>
<h4 id="improve">improve</h4><p>修改MySQL变量不是权宜之计，MySQL休眠是因为长期没有操作，所以自动断开连接节点，而且不是所有的服务器都支持修改MySQL全局变量的，有时候root也不能改- -。所以用计时器每隔一段时间向MySQL发一次查询，重置连接时间。若还抛出错误<code>pipeBroken</code>的时候换一条新的管道。</p>
<p>实际效果：MySQL能够平稳的运行好几天，几天之内查询成功率在90%左右，仍然不太能够令人满意，但是相比以前，已经进步了很多。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;系统架构为BS架构，基于Flask和React的web应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/imxana/ec_forum&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
  </entry>
  
  <entry>
    <title>大三读《黑客与画家》</title>
    <link href="http://yoursite.com/2016/11/28/artists_and_hackers/"/>
    <id>http://yoursite.com/2016/11/28/artists_and_hackers/</id>
    <published>2016-11-28T00:10:52.000Z</published>
    <updated>2016-12-07T13:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Forward">Forward</h1><p>实际上，作为一本2004年发行的书，我之前已经「预读」过这本书，那个时候互联网创业可能更加的「流行」，那个时候，大概就是几年前吧，绝对想不到创业能够发展的如此迅速。</p>
<h1 id="校园监狱">校园监狱</h1><p>这种情况到目前仍然没有改变。在十六、十七世纪时，青少年作为社会的低级成员，在社会中发挥了更大的作用，比如学徒，帮手等，即时是最没用的那些青少年，招进来也能进行一些基础工作，比如倒水，扫地等。那个时候成年人对于青少年的看法也没有像现在这么糟糕。当然，如果青少年能够尊重成年人，成年人也会更加尊重青少年，但是我并没有看到这一点，一种所谓的「平等」和「青春期」的概念在做崇，两者之间的鸿沟被划的很开。青少年从在成年之前并没有被教育自己是低级成员，但是成年后却严格笃定这一点。</p>
<p>生活也是一名实践学科。在学校里的畸形生活，某种程度上类似于监狱。然而最大的问题是，并不告诉青少年们这一点，而把监狱交给犯人来管理。一面告诉你你是平等的，一面限制了你的诸多自由。我不认为「校园是社会的缩影」，社会要更友好一些。</p>
<p>所谓的老师的教学内容，不过也是短暂实践中自己的不完全总结。而且很多老师，很有可能未曾离开校园氛围，从未接触过社会，我把这种老师称为「老狱卒」。而一些「监狱长」则洞悉监狱规则，会在监狱中保持着微妙的平衡。有些老师很优秀，但是仅仅是昙花一现，不能代表整体。</p>
<p>毕业生一旦就业，人生立即跨入另一个阶段，没有任何的缓冲空间。这也难怪人一到社会中去时，就对曾经所处的青少年有如此大的意见。</p>
<p>另外，校园的最大缺陷在于无聊。能获得的信息极其有限，青少年心智发展几乎为0。不阐述。</p>
<h1 id="竭泽而渔">竭泽而渔</h1><p>「创新，创业！」</p>
<p>首先要明白一点，蛋糕再大，也是有限的。标题有些过激了，我想表达的是，创业这个词被过度消费了。</p>
<p>实际上到目前为止，能够成为「new idea」的东西已经不多，到目前为止，你现在还能想到未被实践过的idea吗？某种程度上，是因为技术发展速度，被大大放缓了。</p>
<p>从技术型创新，到功能型创新，到开发工具及其开发工具的创新，包括市场上出现各种平台（然而平台上却都是空空如也，如果一个大公司打算收购你，我猜大概不是因为你做的东西有多棒，而是看中了你背后的使用用户群体。）到最后就是以上创新的各种功能排列组合式创新，等到这种类型的创新的蛋糕也被分完了，就只能够等着新蛋糕的出现。不过那个时候，你有信心与那些工具成熟，流水线作业的大公司竞争吗？</p>
<p>然后有人说，我们不比创新，我们比运营，在某些方面比别人做的更好。我的想法是，不如加入一个大公司，因为是在做同样的事情，虽然自由更少，但大公司一般做的更好。</p>
<p>题外话：一次创作者被频繁打击，被ZF，被愤青，被同行，一些优秀的作品被埋没，如果不从政策上改革，有些行业将永无出头之日。</p>
<h1 id="校园招聘">校园招聘</h1><p>（前几天的观摩招聘的感想作业，800字）</p>
<p>观摩的感想，说实话和大一去看的时候差不多，毕竟是面向整个学校的招聘，不是单单只有计算机相关的。</p>
<p>总结一下，有些企业是真的不靠谱。</p>
<p>这种观摩，说句实话，有点像监狱里的人在释放之前，让你先见见外面的变化。和我一起的几个小伙伴面对面试人员，不由不同程度地表现出了自己的恐惧。</p>
<p>说实话，我有点被他们的恐惧感染了，不过总体上心态还是很轻松，不是因为我有多厉害，而是我本身对这种市场一样招聘没有多大兴趣，而且就我所见，需要到学校里来招聘的，一般都是找不到人的。难道你希望你的同事都是20出头，水平可能还不如你的毕业生？</p>
<p>但是在计算机相关的职位招聘里，我看到的需求的职位，仍然没有什么变化，有点让我失望。就从语言来看，整个会场就是 C，Java，C。Java，甚至连.net的也不多，互联网氛围，工程师导向的企业并不多，更多的为了招聘熟练工。这侧面反映了那个企业并不了解自己使用的技术，并不知道Python等其他高级语言的好处，只是觉得如果我使用这些老的工具的话，如果员工跑了，我能更快的找到替代的人（然而他们根本也没想过为什么他们不愿意留下来，或者会被淘汰）。从职位来看，永远都是那么几个职位，有没有CTO问问自己，我们为什么需要测试？我们为什么需要运维？看别人有，所以我们也要有，应该吧。</p>
<p>假如我是创业者，我的竞争对手开始在招Oracle工程师，那我会松一口气；如果他们开始找lisp工程师了，我会如坐针毡，因为这是一家黑客导向的企业，他们内耗少效率极高，创新与开发速度会很快，我们的进度将永远赶不上他们。（xana注：引用）</p>
<p>一般来说，付出与收获在总体上呈正比，在个体上却不一定。运气某种程度上呈决定性作用。有点人只是简历写的好，然而那些有大量开源项目，却不屑于写简历的人，却被某些不识货的企业鄙夷。当然，hacker肯定希望加入工程师导向的企业，尊重也很重要，至少是互相尊重。</p>
<p>因为我本身不太喜欢这种市场一样的招聘，置身于人海之中，感觉自己像商品一样在买家中随波逐流，所以并没有仔细看他们的职位和要求。不过看到一家学长创业的企业，工程师导向，人员需求要求非常清晰，不像「软件开发工程师」这样泛泛而谈，居然还把就职福利也写上了，画风明显和其他海报不一样，一看就比其它靠谱多了。一般一个企业会把自己最好的一面展示给别人看，有些企业展示的东西都让人看不下去了，那那些没有看见的部分呢？</p>
<h1 id="不能说的话">不能说的话</h1><p>你会发现我到现在有些地方说的很含糊，有种欲言又止的感觉。就算在国外，有些话也是不能说的。这种规则会使你养成小心谨慎的习惯，甚至有些神经过敏。在批判一个东西时，往往还是需要肯定它的部分。因为人们不太能接受自我的否定（尽管批评往往是对的），当权者往往利用这一点来笼络民心，排除异己。</p>
<p>到现在，你被问到觉得有什么话是不能说的，你可能回答「没有」，但是从从长远的历史上看，从日心说到自然选择，真理一般都难以被大众接受。或者我们换一种说法，有什么话说了，你身边的人会不高兴？</p>
<p>我们谈笑风生地+1s，为什么没有被打死？因为膜法师已经有了民众基础，你说个别的试试？</p>
<p>(待续)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Forward&quot;&gt;Forward&lt;/h1&gt;&lt;p&gt;实际上，作为一本2004年发行的书，我之前已经「预读」过这本书，那个时候互联网创业可能更加的「流行」，那个时候，大概就是几年前吧，绝对想不到创业能够发展的如此迅速。&lt;/p&gt;
&lt;h1 id=&quot;校园监狱&quot;&gt;校园监狱&lt;/h
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】pymysql无法使用localhost连接MySQL的解决方法</title>
    <link href="http://yoursite.com/2016/11/09/pymysql_localhost/"/>
    <id>http://yoursite.com/2016/11/09/pymysql_localhost/</id>
    <published>2016-11-09T12:05:27.000Z</published>
    <updated>2016-12-29T11:25:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行</p>
<p>源抛错代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(host=<span class="string">'127.0.0.1'</span>,user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure>
<p>解决方法：使用mysql中的.sock文件进行连接，放弃通过IP匹配本地的方法。</p>
<p>执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin variables| grep socket</div></pre></td></tr></table></figure>
<p>查看socket所在位置，然后尝试使用格式如下的连接     </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>,unix_socket=<span class="string">'/var/run/mysqld/mysqld.sock'</span>)</div></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/6885164/pymysql-cant-connect-to-mysql-on-localhost" target="_blank" rel="external">原stackoverflow上的回答</a></p>
<p>思考</p>
<p>可以写一个.sh脚本，动态生成配置文件，而不需要手动修改它</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行&lt;/p&gt;
&lt;p&gt;源抛错代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】Python中你不应该做的事</title>
    <link href="http://yoursite.com/2016/11/05/things-not-to-do-in-python/"/>
    <id>http://yoursite.com/2016/11/05/things-not-to-do-in-python/</id>
    <published>2016-11-04T16:05:27.000Z</published>
    <updated>2016-11-14T10:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题">标题</h1><p>译文标题：Python中你不应该做的事</p>
<p>原文标题：Things You Shouldn’t Do in Python</p>
<p>原文链接: <a href="https://www.airpair.com/python/posts/things-not-to-do-in-python" target="_blank" rel="external">https://www.airpair.com/python/posts/things-not-to-do-in-python</a></p>
<h1 id="疑难句">疑难句</h1><p>1</p>
<p>“Premature optimization is the root of all evil (or at least most of it) in programming.” — Donald Knuth</p>
<p>“在编程中过早的优化是一切（或至少大部分）罪恶的根源。” - 高德纳</p>
<p>2</p>
<p>A word of advice: If you program outside the conventional rules, make heavy use of syntax checkers and secondary tools to ensure that the only code that disobeys the rules is precisely the code you intended.</p>
<p>一句忠告：如果您在传统的规则之外进行编程，请不要吝啬大量使用语法检查和辅助工具，以确保唯一违背规则的那些代码能达到所预期的结果。</p>
<p>3</p>
<p>“By understanding a machine-oriented language, the programmer will tend to use a much more efficient method; it is much closer to reality.” (Knuth again)</p>
<p>“通过了解一个面向机器的语言，程序员会倾向于使用一种更有效的方法，它更接近现实”。（又是克努特）</p>
<p>4</p>
<p>Standard python dictionaries are very useful. However, sometimes it is more convenient to use unquoted class member names to gain access to data stored in dictionaries rather than brackets and quoted strings.</p>
<p>标准的Python字典是很有用。但是有时使用不带引号的类成员的名字来访问在字典中存储的数据比括号和引用字符串数据更加方便。</p>
<p>5</p>
<p>Conclusion</p>
<p>There are aesthetics with strong proponents and opponents but:</p>
<ul>
<li>There really are no objective Do’s and Don’ts in programming.</li>
<li>Anything for which there is machine code is permitted.</li>
<li>Learn new “dirty tricks”, not just “good practices”.</li>
<li>Use what works and make it useful for others.</li>
<li>Don’t make it cost too much (unless it pleases you to do so).</li>
<li>Explain the why and how of unconventional methods with care and efficiency.</li>
<li>Accept criticism gladly, because surely you will be rightly criticized.<br>Don’t just work… PLAY! Make mistakes!</li>
</ul>
<p>结论</p>
<p>有着相当一部分很强烈的支持和反对的美学，但是请注意：</p>
<ul>
<li>在编程中真的有没有客观上的Do’s和Don’ts。</li>
<li>任何事情上使用机器代码都是允许的。</li>
<li>学习新的“肮脏把戏”，而不仅仅是“良好做法”。</li>
<li>使用有效的工具，并使其让他人也可用。</li>
<li>不要为一件事花费太多（除非你高兴这样做）。</li>
<li>谨慎而效率地解释为何以及如何使用那些非常规的方法。</li>
<li>开心接受批评，因为你一定会得到正确的批评。</li>
<li>不要只是工作…去享受！去犯错误！</li>
</ul>
<p>6</p>
<p>There will always be people who will seek solutions to problems come hell or high water and other people who will wag a finger and look sternly over their lorgnettes at the egregious methods used by the problem solvers. This battle between hackers and pedants inevitably results in a lively history of online discussions containing very strong opinions and, sometimes even, useful examples.</p>
<p>总是会有一些无论如何困难都在寻求解决问题办法的人和其他对着提出惊人方案的解决者一脸正色地在长柄眼镜上摇摇手指的人。黑客和学究之间的这一战不可避免地会导致一些强烈意见和网上讨论，有时甚至是有用的案例。</p>
<h1 id="单词本">单词本</h1><p>come hell or high water  就算天崩地裂/无论如何困难</p>
<p>Duck typing  <a href="https://en.wikipedia.org/wiki/Duck_typing#Concept_examples" target="_blank" rel="external">wiki</a></p>
<p>premature 过早的</p>
<p>optimization 优化</p>
<p>lorgnettes 长柄眼镜</p>
<p>pedants 卖弄知识的人</p>
<p>inevitably 不可避免的</p>
<p>Impedance 阻抗</p>
<p>Mismatch 不协调的</p>
<p>cleverness 灵巧</p>
<p>obfuscation 混淆</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标题&quot;&gt;标题&lt;/h1&gt;&lt;p&gt;译文标题：Python中你不应该做的事&lt;/p&gt;
&lt;p&gt;原文标题：Things You Shouldn’t Do in Python&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&quot;https://www.airpair.com/python
    
    </summary>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】使用supervisor守护进程</title>
    <link href="http://yoursite.com/2016/10/22/supervisor/"/>
    <id>http://yoursite.com/2016/10/22/supervisor/</id>
    <published>2016-10-22T03:55:59.000Z</published>
    <updated>2016-12-29T11:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>误导向</del></p>
<h2 id="Forward">Forward</h2><p>当初我一看到supervisor，第一反应是nodejs的那个supervisor，一个修改保存文件之后自动重启node应用的一个好用的小工具。然而这个supervisor是Linux上的用于守护进程的脚本（当然后来我才知道它是python写的）。</p>
<h2 id="Easy_Start">Easy Start</h2><p>首先安装supervisor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install supervisord</div></pre></td></tr></table></figure></p>
<p>然后执行<code>echo_supervisord_conf</code>，打印出默认sv的例子，并保持到默认路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure></p>
<p>然后编辑<code>supervisord.conf</code>文件，以ec_forum为例，在文件最后添加下列内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[program:ec]</div><div class="line">command=python3 /root/workspace/service/ec_forum/app.py</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">stdout_logfile=/root/workspace/service/ec_forum/logs/supervisor_stdout.log</div><div class="line">stderr_logfile=/root/workspace/service/ec_forum/logs/supervisor_stderr.log</div></pre></td></tr></table></figure></p>
<p>program 后面跟的是你的项目名，启动用。<br>比如重启应用，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl restart ec</div></pre></td></tr></table></figure></p>
<p>command 你要执行的进程命令<br>autostart 自动启动<br>autorestart 自动重启<br>stdout_logfile 标准输出流（可选）<br>stderr_logfile 标准错误流（可选）</p>
<p>这里输出流是服务器日志的重要来源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;误导向&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;Forward&quot;&gt;Forward&lt;/h2&gt;&lt;p&gt;当初我一看到supervisor，第一反应是nodejs的那个supervisor，一个修改保存文件之后自动重启node应用的一个好用的小工具。然而这个supervisor
    
    </summary>
    
      <category term="python3" scheme="http://yoursite.com/categories/python3/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】MySQL的问题以及解决过程</title>
    <link href="http://yoursite.com/2016/10/06/mysql-bug/"/>
    <id>http://yoursite.com/2016/10/06/mysql-bug/</id>
    <published>2016-10-06T03:55:37.000Z</published>
    <updated>2016-12-30T00:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>牢骚向</del></p>
<h2 id="Forword">Forword</h2><p>我一开始使用MySQL我就后悔了，因为我深深的体会到，在sql型数据库中，当表之间关系复杂以后，要删除一条信息是有多么的困难。而几乎所有的第三方MySQL库使用的还是原生的sql语句。且不说sql语句的拼接被x问题，sql的高阶语法本身就非常的反人类。加上我已经习惯了noSQL带来的好处（直接字典\对象操作），仿佛就从天堂到了地狱。</p>
<h2 id="The_problem">The problem</h2><p>前台说请求报错，她那里格式正常。启动服务器简单脚本测试，发送get正常，post报<code>pipeBroken</code>。重启应用，好了。过了半天，一发post，跪。</p>
<h3 id="Debug">Debug</h3><p>get能用，post挂了，肯定是数据库问题，看了下错误类型，连接管道断了，那就是pymysql的问题。</p>
<p>第一反应，连接对象过期了，定期更新it，无解。</p>
<p>加快更新频率，无解。</p>
<p>启用连接池，加大连接节点数，加快更新频率，均无解。此时已过2周，暂时用无限手动重启应用的方法应付问题。</p>
<p>通过<code>supervisor</code>查应用日志，发现启动应用大约过了半天时间一发<code>post</code>服务器才会<code>pipeBroken</code>，而报错期间并没有主动断开。就是过期了啊（葛优瘫）</p>
<h3 id="Fix_up">Fix up</h3><p>经过一段时间的思考，我感觉是MySQL本身的问题，查了一会相关资料，把服务器日志<code>pipeBroken</code>的报文Google了一下，发现是MySQL长时间没有操作，进入睡眠了。。</p>
<p>进入MySQL交互界面输入</p>
<pre><code><span class="operator"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%timeout%'</span>;</span>
</code></pre><p>发现<code>wait_timeout</code>的值为28800s，相等于8小时没操作MySQL就会断开连接。于是我用最简单暴力的方法：</p>
<pre><code><span class="operator"><span class="keyword">set</span> <span class="keyword">global</span> wait_timeout=<span class="number">2880000</span>;</span>
</code></pre><p>服务器再也不频繁抛错了。至于之前的那些解决方案……先留着那些代码吧</p>
<h2 id="Final">Final</h2><p>在条件允许的情况下，尽量使用更加稳定而简单的nosql数据库，避免给自己挖坑</p>
<h2 id="improve（date:_Dec-）">improve（date: Dec.）</h2><p>修改MySQL变量不是权宜之计，MySQL休眠是因为长期没有操作，所以自动断开连接节点，而且不是所有的服务器都支持修改MySQL全局变量的，有时候root也不能改- -。所以用计时器每隔一段时间向MySQL发一次查询，重置连接时间。若还抛出错误<code>pipeBroken</code>的时候换一条新的管道。</p>
<p>实际效果：MySQL能够平稳的运行好几天，几天之内查询成功率在90%左右，仍然不太能够令人满意，但是相比以前，已经进步了很多。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;牢骚向&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;Forword&quot;&gt;Forword&lt;/h2&gt;&lt;p&gt;我一开始使用MySQL我就后悔了，因为我深深的体会到，在sql型数据库中，当表之间关系复杂以后，要删除一条信息是有多么的困难。而几乎所有的第三方MySQL库使用的还是原生的
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】数据库连接池</title>
    <link href="http://yoursite.com/2016/10/03/socket_pool/"/>
    <id>http://yoursite.com/2016/10/03/socket_pool/</id>
    <published>2016-10-03T08:11:27.000Z</published>
    <updated>2016-12-29T11:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>科普向</del></p>
<h2 id="forward">forward</h2><p>在后端连接数据库的时候，测试时我们一般初始化一个连接对象，把所有的操作都引入这个对象，然后进行数据库的操作。在实际生产时这样有一个问题，如果这个连接对象崩掉了，那么服务器就肯定挂掉。或者同时有大量访问请求的时候，可能访问会变慢。而每次访问去生成一个连接对象，处理完之后就close肯定是不现实的，因为会吃服务器资源。所以我们需要一个连接池，用于处理比较复杂的实际情况。这就是我对连接池的初步理解。</p>
<h2 id="socket_pool">socket_pool</h2><p>以实际代码为例：</p>
<p>一开始先创建10个连接对象，放入一个连接池中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> pymysql.Connect(host=<span class="string">'127.0.0.1'</span>,user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"><span class="string">'''pymysql socket pool'''</span></div><div class="line">socket_limit = <span class="number">10</span></div><div class="line">socket_pool = []</div><div class="line">socket_update = socket_limit</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(socket_limit):</div><div class="line">    socket_pool.append(get_conn())</div></pre></td></tr></table></figure>
<p>以ID筛选方法为例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_select</span><span class="params">(self, ec_id, table=<span class="string">'ec_user'</span>)</span>:</span></div><div class="line">    <span class="string">'''select ec_event just by t_id, and extension'''</span></div><div class="line">    conn = socket_pool.pop() <span class="comment"># 从连接池pop出一个连接对象</span></div><div class="line">    cursor = conn.cursor()</div><div class="line">    err,res = <span class="keyword">True</span>,()</div><div class="line">    query_name = self.get_query_name(table)</div><div class="line">    sql = <span class="string">"select * from %s where %s=%r;"</span> % (table,query_name,ec_id)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> cursor.execute(sql) == <span class="number">1</span>:</div><div class="line">            rs = cursor.fetchone()</div><div class="line">            <span class="keyword">if</span> bool(rs):</div><div class="line">                err,res = <span class="keyword">False</span>,rs</div><div class="line">    <span class="keyword">except</span> BrokenPipeError <span class="keyword">as</span> e:</div><div class="line">        conn = get_conn() <span class="comment"># 连接对象已失效，重新生成</span></div><div class="line">        <span class="keyword">raise</span> e</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        conn.rollback() <span class="comment"># 这里错误类型分开写，以处理不同异常下conn</span></div><div class="line">        <span class="keyword">raise</span> e</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        cursor.close()</div><div class="line">        socket_pool.append(conn) <span class="comment"># 总之把连接对象放回连接池</span></div><div class="line">    <span class="keyword">return</span> err,res</div></pre></td></tr></table></figure>
<p>从连接池中pop和push连接对象，这样能处理多个用户同时处理的线程问题。当然最好要做个同步锁，我这里没做，因为两个用户如果不小心用到了一个连接对象，也不会造成什么问题。</p>
<p>最后定期更新池中对象的有效性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_conn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> socket_update</div><div class="line">    socket_update+=<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> socket_update &gt;= socket_limit:</div><div class="line">        socket_update = <span class="number">0</span></div><div class="line">    print(<span class="string">"[update pymysql connection.. Pipe %s]"</span>%socket_update)</div><div class="line">    socket_pool[socket_update] = get_conn()</div><div class="line">    <span class="keyword">global</span> t    <span class="comment">#Notice: use global variable!</span></div><div class="line">    t = threading.Timer(<span class="number">7200.0</span>, update_conn)</div><div class="line">    t.start()</div><div class="line"></div><div class="line">t = threading.Timer(<span class="number">7200.0</span>, update_conn)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> MyConfig.TESTING:</div><div class="line">    t.start()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;科普向&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;forward&quot;&gt;forward&lt;/h2&gt;&lt;p&gt;在后端连接数据库的时候，测试时我们一般初始化一个连接对象，把所有的操作都引入这个对象，然后进行数据库的操作。在实际生产时这样有一个问题，如果这个连接对象崩掉了，那么服务器就
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>新学期扯淡</title>
    <link href="http://yoursite.com/2016/09/28/wc-new/"/>
    <id>http://yoursite.com/2016/09/28/wc-new/</id>
    <published>2016-09-28T15:51:48.000Z</published>
    <updated>2016-09-28T17:49:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近非常闲，闲的我都在玩腻游戏之后开始写东西来排遣剩下的时间。</p>
</blockquote>
<h1 id="先对最近的小朋友的问题做一个统一的回复：">先对最近的小朋友的问题做一个统一的回复：</h1><h2 id="大神抱大腿~">大神抱大腿~</h2><p>1 我不是大神，你看我后面的回答就知道了<br>2 请阅读<a href="http://mikumiku.com.cn/2016/07/23/sorry/" target="_blank" rel="external">这篇文章</a></p>
<h2 id="学长你在做啥">学长你在做啥</h2><p>我的项目基本开源，自己去看，欢迎fork和star</p>
<h2 id="在哪，在Github？能给个链接么">在哪，在Github？能给个链接么</h2><p>我叫这个 <code>imxana</code></p>
<h2 id="我计算机零基础，学什么入门好？">我计算机零基础，学什么入门好？</h2><p>建议从C语言开始学起，教材请不要使用任何视频网站或者各种《C语言xx》,请使用《数据结构》。或者，学一点JS（逃</p>
<h2 id="JS是啥？">JS是啥？</h2><p>JavaScript，灵活的语法，能写网页应用，iOS和Android应用软件，电脑上的软件，还能部署服务器，厉害吧（雾</p>
<h2 id="有什么推荐的书吗？">有什么推荐的书吗？</h2><p>JS的话是红宝书，当年我把整本书的例子都打了一遍以上，受益匪浅。书名是这个《JavaScript高级程序设计》</p>
<h2 id="我想做一个黑客，但是没有基础，要学哪些东西">我想做一个黑客，但是没有基础，要学哪些东西</h2><p>孩子你这样问问题会被打的</p>
<h2 id="作为一个纯菜鸟，要注意些什么">作为一个纯菜鸟，要注意些什么</h2><p>这是个非常好的问题。</p>
<p>首先，日常环境下尽量脱离windows，强迫自己熟悉unix-like系统，趁时间多多折腾。</p>
<p><strong>在掌握基本的Debug能力以后</strong>，生产环境尽量脱离IDE，尽量避免由生产环境不同而导致运行结果的差异。</p>
<p><del>不要加入由老师主导的社团。</del></p>
<p>你必须掌握基本的开发、协作工具，了解一些最基本的知识，才能和前辈们平等的交流，不然怪不得别人不愿意和你说话。遇到耐心的前辈，要珍惜，要问问题时，请反复检查自己的语言组织。</p>
<h2 id="我应该从什么语言入门？/Python（或其他）难吗，有什么书推荐？怎么学？">我应该从什么语言入门？/Python（或其他）难吗，有什么书推荐？怎么学？</h2><p>No Silver Bullet.</p>
<p>语言是工具，任何语言的语法，看半小时官方文档足以记住基本使用。具体的语言要看具体需求，不同的语言在不同的场景下有优劣之分，所以不要把学语言看成一种目的，学语言是为了服从某种另外的目的。<del>当然你要写解释器当我没说</del></p>
<h2 id="但是我不知道你在说什么啊？">但是我不知道你在说什么啊？</h2><p>好吧你要这么想也行，就看官方文档吧，带好词典</p>
<h2 id="我想做iOS开发，但是我没有iPhone">我想做iOS开发，但是我没有iPhone</h2><p>Mac上的Xcode自带所有iOS设备模拟器，只要版本一样，和实际硬件完全相同。</p>
<h2 id="我也没有Mac呀">我也没有Mac呀</h2><p>。。。还是有解决方案的，比如黑苹果什么的，但是不推荐。</p>
<h2 id="求推荐Mac型号">求推荐Mac型号</h2><p>那你想要的是哪一款？这款？好就这款吧，挺不错的</p>
<h2 id="如何成为一个优秀的程序员？">如何成为一个优秀的程序员？</h2><p>《21天精通C++》</p>
<h2 id="我最近很迷茫">我最近很迷茫</h2><p>我们玩网游的时候，一般会建两个号，一个大号，一个小号。一般大号用来踩坑，做过一些难以回首的事情，浪费了很多资源在一些弯路上，最后我们不再用它；小号用来享乐，外形各种好看，属性各种强大，升级过程各种捷径，各种开心，最后这个小号变成了我们的大号。我们的人生也是一个网游，只不过，我们都只能是第一个号。</p>
<h2 id="我最近学的很累/某个很简单的问题很久未解决">我最近学的很累/某个很简单的问题很久未解决</h2><p>一般这种情况是书看的多，代码打的欠少。简称欠打</p>
<h2 id="你能带带我吗？">你能带带我吗？</h2><p>看情况</p>
<h2 id="抱一个粗壮的大腿很重要吗">抱一个粗壮的大腿很重要吗</h2><p>现在的人能拉下脸坚持问一个人问题的人还真不多，大多数都三分钟热度做别的事情去了。所以我的态度是，很重要，但看你能抱多久。</p>
<p>我作为一个资深社区吸血鬼，平时基本对所在社团没有贡献，一直在索取，感觉很棒（逃</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近非常闲，闲的我都在玩腻游戏之后开始写东西来排遣剩下的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;先对最近的小朋友的问题做一个统一的回复：&quot;&gt;先对最近的小朋友的问题做一个统一的回复：&lt;/h1&gt;&lt;h2 id=&quot;大神抱大腿~&quot;&gt;大神抱
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】单元测试</title>
    <link href="http://yoursite.com/2016/09/22/unittest/"/>
    <id>http://yoursite.com/2016/09/22/unittest/</id>
    <published>2016-09-22T14:11:50.000Z</published>
    <updated>2016-11-08T03:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>科普向</del></p>
<h2 id="forward">forward</h2><p>单元测试的好处与必要性我就不多说了，以现在做的<code>ec_forum</code>项目为例，说说现在我所做的。</p>
<h2 id="unittest">unittest</h2><h3 id="测试原理">测试原理</h3><p>我使用的单元测试模块是python原生的<code>unittest</code>，其实用什么的模块并不重要，<del>反正都是无尽的assert</del>，它的结构如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ECTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">1</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">2</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_name1</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">3</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_name2</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">4</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">name3_test</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">5</span>)</div><div class="line">		</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure>
<p>然后我们看输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">2</div><div class="line">.1</div><div class="line">4</div><div class="line">2</div><div class="line">.</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran 2 tests <span class="keyword">in</span> 0.000s</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure></p>
<p>可以看出，在进行每一项测试时，<code>ECTestCase</code>类会找到<code>test</code>开头的方法，在执行时会执行一次<code>setUp</code>，执行结束时执行一次<code>tearDown</code>，执行完成后输出一个<code>.</code>，执行完所有方法为止。如果中途报错即立刻停止测试。<del>别忘记到数据库里去删测试账号。</del></p>
<p>一般<code>setUp</code>和<code>tearDown</code>方法里，我一般是注册与销毁n个随机信息的账号，发表和删除同一篇文章，并用这些账号测试。这里的测试是单线程的，所以不用担心<code>self</code>属性被多线篡改的问题。这两个方法里尽量少放东西，这样后期测试多了以后速度影响会比较大，我只是把生成两篇文章改成了把其中一篇不太用的文章移到了其中一个测试里，测试速度就从1.7s提升到了0.9s。</p>
<h3 id="关于覆盖率">关于覆盖率</h3><p>能够触及到代码的每一个角落当然是最吼的（100%），不过这样改起来的东西也多，因此我们在assert的时候尽量用巧妙的方法。比如code_information修改频繁的话，那就去比对状态码，如果状态码修改频繁的话，就去比对message，甚至是返回值的数据类型，数组、字符串长度范围等。测试覆盖率越高，后期可见或不可见的坑就越少。</p>
<p>记得在提交版本的时候，先做一次<code>make test</code>，从而尽量避免提交bug版本。</p>
<h3 id="先功能，还是先测试？">先功能，还是先测试？</h3><p>如果需求炒鸡明确的话，建议测试先行，一定程度上先测试能起到规范功能的作用，某种意义上比文档作用更大。</p>
<p>如果需求是在变化的话，走一步看一步的那种，实际上单元测试也不是必要的，或者想我这种只有一个人的话，那就随意。脚本测试也够用了（比如注册机）</p>
<h2 id="others">others</h2><p>不为测试而写测试，我最初更向是一种『哦？！这就是单元测试啊！』的感觉，在开发路程中实际感觉到需要这么一种东西来确保我的<code>真实</code>进度，然后从简单的脚本测试到单元测试，感觉很自然的就过度过去了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;科普向&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;forward&quot;&gt;forward&lt;/h2&gt;&lt;p&gt;单元测试的好处与必要性我就不多说了，以现在做的&lt;code&gt;ec_forum&lt;/code&gt;项目为例，说说现在我所做的。&lt;/p&gt;
&lt;h2 id=&quot;unittest&quot;&gt;unitt
    
    </summary>
    
      <category term="python3" scheme="http://yoursite.com/categories/python3/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>又他喵的要阳光长跑了</title>
    <link href="http://yoursite.com/2016/09/13/run-again/"/>
    <id>http://yoursite.com/2016/09/13/run-again/</id>
    <published>2016-09-13T08:54:40.000Z</published>
    <updated>2016-09-13T09:38:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了下校内网发现距离微调过了，于是开始划线。。</p>
<p><strong>long_run.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8 </span></div><div class="line">ifo = &#123; <span class="number">1</span>:<span class="string">'体活'</span>, <span class="number">2</span>:<span class="string">'副馆'</span>, <span class="number">3</span>:<span class="string">'二教'</span>, <span class="number">4</span>:<span class="string">'九教'</span> &#125;</div><div class="line">data = &#123; <span class="string">'12'</span>:<span class="number">580</span>,<span class="string">'23'</span>:<span class="number">650</span>,<span class="string">'34'</span>:<span class="number">400</span>,<span class="string">'14'</span>:<span class="number">380</span> &#125;</div><div class="line">result = dict()</div><div class="line">aim = <span class="number">2000</span> <span class="comment"># m:2000 f:1500 </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join((<span class="keyword">lambda</span> x:(x.sort(),x)[<span class="number">1</span>])(list(s)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></div><div class="line">    rec(<span class="string">''</span>,<span class="number">0</span>)</div><div class="line">    keys = sorted(result, key=<span class="keyword">lambda</span> k:result[k])</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> keys:</div><div class="line">        <span class="keyword">print</span> result[k], k</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec</span><span class="params">(path, dis)</span>:</span></div><div class="line">    <span class="keyword">if</span> dis &gt;= aim:</div><div class="line">        result[path[:<span class="number">-2</span>]] = dis</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">if</span> path == <span class="string">''</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'1234'</span>:</div><div class="line">            rec(i, <span class="number">0</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> len(path) &gt; <span class="number">2</span>:</div><div class="line">            dis_key = sort(path[<span class="number">-3</span>]+path[<span class="number">-1</span>])</div><div class="line">            dis = dis + data[sort(dis_key)]</div><div class="line">        <span class="keyword">if</span> path[<span class="number">-1</span>] <span class="keyword">in</span> <span class="string">'13'</span>:</div><div class="line">            rec(path+<span class="string">'-2'</span>, dis)</div><div class="line">            rec(path+<span class="string">'-4'</span>, dis)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            rec(path+<span class="string">'-1'</span>, dis)</div><div class="line">            rec(path+<span class="string">'-3'</span>, dis)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    show()</div></pre></td></tr></table></figure>
<p><del>本来思路是用图的，感觉太麻烦换成树也行，但是突然发现自己已经差不多完全忘记数据结构了。后来回寝室翻翻书，最后还是用无脑递归，两节课没听就在搞这个东西。（汗）</del></p>
<p><strong>result：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="number">2000</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">2000</span> <span class="number">4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">2010</span> <span class="number">1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">2010</span> <span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-1</span></div><div class="line"><span class="number">2010</span> <span class="number">3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span></div><div class="line"><span class="number">2010</span> <span class="number">2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-2</span></div><div class="line"><span class="number">2010</span> <span class="number">4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">2010</span> <span class="number">4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">2010</span> <span class="number">2</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span></div><div class="line"><span class="number">2010</span> <span class="number">3</span><span class="number">-2</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">2030</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-1</span></div><div class="line"><span class="number">2030</span> <span class="number">1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">2080</span> <span class="number">3</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">2080</span> <span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-3</span></div><div class="line"><span class="number">2100</span> <span class="number">4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">2100</span> <span class="number">1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-2</span></div><div class="line"><span class="number">2100</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-3</span></div><div class="line"><span class="number">2100</span> <span class="number">2</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">2100</span> <span class="number">3</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>2000m…恕我眼拙注意有个整数400……平时跑的那条路变成1800+m不再考虑，等于原来二九要跑4趟的，现在变成5趟了，跑5趟也太蠢了吧，一个点要刷3次卡？万一排队怎么办？</p>
<p>所有的2010m结果其实是一样的，8种不同的姿势跑一周而已。</p>
<p>另外从去年的经验看，请尽量避免二教这个点，排队人数极其容易50+，导致速度不够从而…</p>
<p>另附女生的新路线</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="number">1520</span> <span class="number">1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">1520</span> <span class="number">4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">1540</span> <span class="number">1</span><span class="number">-2</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">1540</span> <span class="number">4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-1</span></div><div class="line"><span class="number">1540</span> <span class="number">3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">1540</span> <span class="number">1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">1560</span> <span class="number">3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">1560</span> <span class="number">4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">1560</span> <span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">1560</span> <span class="number">4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">1580</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">1580</span> <span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">1600</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">1600</span> <span class="number">4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">1610</span> <span class="number">4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span></div><div class="line"><span class="number">1610</span> <span class="number">3</span><span class="number">-2</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">1630</span> <span class="number">4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-1</span></div><div class="line"><span class="number">1630</span> <span class="number">1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p><del>最短路线居然他喵的没变</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了下校内网发现距离微调过了，于是开始划线。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;long_run.py&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>立项报告：实验班交流论坛</title>
    <link href="http://yoursite.com/2016/09/12/%E7%AB%8B%E9%A1%B9%E6%8A%A5%E5%91%8A%EF%BC%9A%E5%AE%9E%E9%AA%8C%E7%8F%AD%E4%BA%A4%E6%B5%81%E8%AE%BA%E5%9D%9B/"/>
    <id>http://yoursite.com/2016/09/12/立项报告：实验班交流论坛/</id>
    <published>2016-09-12T05:55:52.000Z</published>
    <updated>2016-12-23T05:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章更新于：2016年12月23日 星期五 13时44分12秒 CST</p>
<p>来源：<a href="https://github.com/imxana/ec_forum/blob/dev/doc/introduction.md" target="_blank" rel="external">Github</a></p>
<h1 id="实验班交流问答平台">实验班交流问答平台</h1><p>A forum of experimental class. ;)</p>
<h1 id="项目背景与意义">项目背景与意义</h1><p>设立实验班交流论坛，是为了促进内部交流，内外交流，鼓励分享，活跃技术氛围。。</p>
<h1 id="项目用户">项目用户</h1><p>面向全师生，质量驱动，通过高质量问答、发表优质文章来获取声望</p>
<hr>
<h1 id="项目功能">项目功能</h1><h2 id="一期目标">一期目标</h2><h3 id="用户档案管理">用户档案管理</h3><ul>
<li>注册与登录</li>
<li>通讯录与档案，如项目记录、github、博客地址等等</li>
<li>单元测试（覆盖率90%以上）</li>
</ul>
<h3 id="文章系统">文章系统</h3><ul>
<li>鼓励用户发表文章</li>
<li>评论，收藏</li>
<li>声望相应变换(做好接口)</li>
<li>单元测试（覆盖率90%以上）</li>
</ul>
<hr>
<h2 id="二期目标">二期目标</h2><h3 id="声望系统">声望系统</h3><ul>
<li>基于声望值给予对应的行为规范，如支持与反对等</li>
<li>声望权限系统、声望变化接口</li>
<li>用户声望动态计算？</li>
<li>单元测试（覆盖率90%以上）</li>
</ul>
<h3 id="问答系统">问答系统</h3><ul>
<li>鼓励具有高质量、代表性的提问，及高质量的回答</li>
<li>鼓励高质量回答</li>
<li>根据赞同与被赞变化声望</li>
</ul>
<hr>
<h2 id="三期目标">三期目标</h2><h3 id="内部公告与通知管理">内部公告与通知管理</h3><ul>
<li>公告看板</li>
<li>站点短消息</li>
</ul>
<h3 id="界面完善">界面完善</h3><ul>
<li>调研，运营</li>
</ul>
<hr>
<h1 id="项目实现方案">项目实现方案</h1><blockquote>
<p>基本的系统架构与技术路线</p>
</blockquote>
<h2 id="系统架构">系统架构</h2><p>典型的BS架构，以浏览器的使用为主。目前主要以PC端交互为主，但部分关键或常用功能应保证移动WEB兼容性。同时，在技术架构上，应考虑全端支持的可扩展性。</p>
<h2 id="技术路线">技术路线</h2><ul>
<li>单页应用</li>
<li>前端 express(暂) 搭建的静态页面服务</li>
<li>后端技术栈 Python3 + Flask + MySQL.</li>
<li>开发与部署平台  *nix</li>
<li>项目托管 Github</li>
<li>项目原型 Quora &amp; SF</li>
</ul>
<p>因为流量不大，项目轻量，加上需要根据需求快速部署开发，所以选择py</p>
<p>不用node的原因是因为写腻了</p>
<p>第一次在项目中使用单元测试，使用的是py的unittest</p>
<p>附：单页应用的优缺点<br>作者：clia<br>链接：<a href="https://www.zhihu.com/question/20792064/answer/22784862" target="_blank" rel="external">https://www.zhihu.com/question/20792064/answer/22784862</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
<p>优点：<br>1、分离前后端关注点，前端负责界面显示，后端负责数据存储和计算，各司其职，不会把前后端的逻辑混杂在一起；<br>2、减轻服务器压力，服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；<br>3、同一套后端程序代码，不用修改就可以用于Web界面、手机、平板等多种客户端；</p>
<p>缺点：<br>1、SEO问题，现在可以通过Prerender等技术解决一部分；<br>2、前进、后退、地址栏等，需要程序进行管理；<br>3、书签，需要程序来提供支持；</p>
<h1 id="项目成员与分工">项目成员与分工</h1><ul>
<li><p>金云天</p>
<ul>
<li>项目负责人：项目策划与管理、负责整体技术架构、团队管理</li>
<li>后台开发、运维、部署、总体单元测试</li>
</ul>
</li>
<li><p>余小兰</p>
<ul>
<li>前台开发：参与各关键功能的开发，web独立开发，测试</li>
</ul>
</li>
<li><p>韩培</p>
<ul>
<li>移动端：安卓独立开发，测试</li>
</ul>
</li>
</ul>
<h1 id="项目的学习价值">项目的学习价值</h1><p>本应用是典型的基于WEB的信息管理应用，利于掌握WEB应用开发的基本要素和技术</p>
<p>Flask是最好的WEB后端开发框架，其涉及的各种设计模式与开发技术，是后端工程师的必备技能。（雾）</p>
<h1 id="可行性分析">可行性分析</h1><ul>
<li>该项目来源于我们正在进行的实践，持续的需求和即时的用户反馈将会推动项目的健康发展</li>
</ul>
<h1 id="难点与风险">难点与风险</h1><ul>
<li>需求并未定型，除了技术能力，还需要产品设计能力</li>
<li>工作量可能过小（老师说的）</li>
<li>….</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章更新于：2016年12月23日 星期五 13时44分12秒 CST&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://github.com/imxana/ec_forum/blob/dev/doc/introduction.md&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="python3" scheme="http://yoursite.com/categories/python3/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>我为暑假续一秒</title>
    <link href="http://yoursite.com/2016/08/30/16Aug/"/>
    <id>http://yoursite.com/2016/08/30/16Aug/</id>
    <published>2016-08-30T15:43:55.000Z</published>
    <updated>2016-09-02T04:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python3">Python3</h1><p><a href="https://github.com/imxana/show-me-the-code" target="_blank" rel="external">imxana/show-me-the-code</a></p>
<p>部分练习 ( 0~13, 21, 22 )</p>
<h1 id="Linux">Linux</h1><p><a href="https://github.com/imxana/shell_test" target="_blank" rel="external">imxana/shell_test</a></p>
<p>《Linux Shell脚本攻略》学习代码（更新中），顺便一提作者是一个20岁的印度大学生</p>
<h1 id="邮箱迁移">邮箱迁移</h1><p>New_email: <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x78;&#97;&#x6e;&#97;&#x2e;&#x61;&#x77;&#97;&#x6b;&#x65;&#110;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x78;&#97;&#x6e;&#97;&#x2e;&#x61;&#x77;&#97;&#x6b;&#x65;&#110;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>部分迁移情况</p>
<table>
<thead>
<tr>
<th>item</th>
<th>state</th>
</tr>
</thead>
<tbody>
<tr>
<td>Aliyun</td>
<td>√</td>
</tr>
<tr>
<td>Amazon</td>
<td>√</td>
</tr>
<tr>
<td>AppCan</td>
<td>remove</td>
</tr>
<tr>
<td>Apple</td>
<td>√</td>
</tr>
<tr>
<td>Coding</td>
<td>√</td>
</tr>
<tr>
<td>Docker Cloud</td>
<td>√</td>
</tr>
<tr>
<td>Facebook</td>
<td>√</td>
</tr>
<tr>
<td>Github</td>
<td>√</td>
</tr>
<tr>
<td>Instagram</td>
<td>√</td>
</tr>
<tr>
<td>iturning</td>
<td>√</td>
</tr>
<tr>
<td>Leap Motion</td>
<td>√</td>
</tr>
<tr>
<td>Microsoft</td>
<td>remove</td>
</tr>
<tr>
<td>Segmentfault</td>
<td>√</td>
</tr>
<tr>
<td>Steam</td>
<td>√</td>
</tr>
<tr>
<td>Twitter</td>
<td>√</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python3&quot;&gt;Python3&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/imxana/show-me-the-code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;imxana/show-me-the-code&lt;
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>月亮忘记了</title>
    <link href="http://yoursite.com/2016/08/19/moon/"/>
    <id>http://yoursite.com/2016/08/19/moon/</id>
    <published>2016-08-19T12:18:48.000Z</published>
    <updated>2016-08-19T15:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>看见的，看不见了。<br>夏风轻轻吹过，在瞬间消失无踪，<br>记住的，遗忘了。<br>只留下一地微微晃动的迷离树影……</p>
<p>看不见的，是不是就等于不存在？<br>也许只是被浓云遮住，<br>也许刚巧风砂飞入眼帘，<br>我看不见你，<br>却依然感到温暖。</p>
</blockquote>
<p>每一个黄昏过后，大家焦虑地等待，却再也没有等到月亮升起。</p>
<p>潮水慢慢平静下来，海洋凝固成一面漆黑的水镜，没有月亮的夜晚，世界变的清冷幽寂。</p>
<p>正要登陆月球的太空船，在星海中迷航，没有人知道他们在哪里。</p>
<p>科学家沮丧得发狂，国王像孩子般无助地望着天空发呆。没有人知道该怎么办。</p>
<p>电视不断重复播报月亮失踪的消息，世界末日的恐慌瞬间弥漫全球。</p>
<p>还好，月亮出来了。</p>
<p>一车车微笑的月亮，运往每个哀伤的黑暗城市。</p>
<p>莹润可爱的月亮，发出温柔的光芒，焦虑的人们，暂时忘记了害怕。</p>
<p>它们永远不会忧伤，它们永远带着甜蜜笑容。</p>
<p>从窗口望出去，又可以看到皎洁的明月，世界又恢复一片欢乐。</p>
<blockquote>
<p>他们在无意间相遇，<br>却为幽暗的生命带来温柔美好的光亮。</p>
</blockquote>
<p>男孩为他包上柔软的毛巾。点上一盏小灯为他取暖。<br>将他抱在怀中，轻轻摇晃。温柔地为他唱歌，对他说话。月亮慢慢地睁开眼睛，发出一点幽微的光亮。</p>
<p>一开始，他像个婴儿般地只会左右晃动，光芒忽明忽灭<br>。</p>
<p>慢慢地，他学会滚动，顽皮地在屋里四处走动。</p>
<p>午夜时分，他偶尔会不由自主地飘了起来，但他有些怕高。</p>
<p>他的光芒，每天都有小小的变化。</p>
<p>他安安静静、慢慢地长大了。</p>
<p>太阳出来时，他总是晦暗地沉睡不醒。</p>
<p>太阳下山后，却精神抖擞地清亮起来。</p>
<p>他们躲进妈妈的衣柜，想象掉落神秘无底的黑洞。<br>妈妈一直都找不到他。</p>
<p>他们在海上漂流了三天三夜，还遇到海啸与恐怖的鲨鱼。<br>妈妈忙得没空来救他。</p>
<p>他们脸上涂满颜色，做出可怕的表情，还大声尖叫。<br>妈妈却一点也没有被吓着。</p>
<p>月亮学会空中旋转的那个晚上，他们在窗前整夜跳舞。<br>妈妈早就累得睡着了。</p>
<p>世界停电的夜晚，他们爬到屋顶。静静欣赏黑暗世界的惊喜。<br>没有人与他们分享这神秘安静的时刻。</p>
<p>渐渐地，男孩上学总是迟到，<br>上课总是沉沉睡去。</p>
<p>渐渐地，他的朋友愈来愈少。</p>
<p>他跟月亮也愈来愈孤单。</p>
<p>“你是天上掉下来的月亮吗？”<br>“你记得你的家在哪里吗？”<br>“你害怕一个人回到天空吗？”<br>白云缓缓飘过，小鸟在林中唱着忧伤的歌曲，天色渐渐暗了下来。</p>
<p>他们发现池塘的小鱼，在月亮靠近时，会微笑着朝他游过来。</p>
<p>草丛里飞舞的萤火虫，就好像在人间起舞的点点繁星。</p>
<p>他们喜欢在雨中散步，聆听雨水滴滴答答落在伞面的清脆声音。</p>
<p>秘密基地里的玫瑰花，在夜晚幽幽绽放迷人的花香。</p>
<p>男孩打电话给在远方的爸爸，兴奋地诉说：“我有一个真正的月亮喔，当我快乐或难过的时候，他都会陪着我，我要永远和他在一起……”<br>爸爸只是回答：“要乖乖地听妈妈的话。”</p>
<p>日子一切如常，路灯不断增加。<br>科学家有着更多解不开的困惑，<br>太空人依旧在星际里迷航……</p>
<p>公园里的大树毫无来由地突然枯萎，叶子在瞬间落尽，暗淡无光地月亮垂挂在树上，萧瑟地迎风摇晃。</p>
<p>河水不再流动，宛如一滩死水。<br>天气变得十分怪异，在热天午后，竟飘起了漫天大雪。</p>
<p>街边角落堆满了丢弃的月亮。城市里似乎隐匿着各式各样的怪兽，处处充满着危机，每个人的情绪似乎都变得异常暴烈。</p>
<blockquote>
<p>记住的是不是永远不会消失？<br>我守护如泡沫般脆弱的梦境，<br>快乐才刚开始，悲伤却早已潜伏而来。</p>
</blockquote>
<p>早上，校长演讲时说：“世界上本来就不需要月亮，小朋友不要……”<br>讲到这里，他忽然口吐白沫，倒地不起。可怕的是，没有人想要去救他。</p>
<p>放学时，老师生气地对男孩说：“明天请妈妈到学校来一趟。”<br>并要求他不要再带着月亮到学校来了。</p>
<p>傍晚，爸爸打电话来，他和妈妈讲了好久，妈妈却始终一言不发。<br>晚上，房间里传来低声的啜泣，屋里的气氛安静得令人感到窒息。</p>
<p>世界好像被宇宙遗弃了。</p>
<blockquote>
<p>但是，最深的黑夜即将过去，<br>你看，月亮出来了。</p>
</blockquote>
<p>一夜之间，月亮记起许多往事，飘到高空时也不再感到害怕。</p>
<p>但他却再也无法回到男孩的家。</p>
<p>他飘到窗外，看着熟悉的景物，着急的发出低沉的呜咽。<br>男孩更是难过得俯在墙角大声哭泣。</p>
<p>暴风雨来了，<br>男孩忧伤地问：“你还想听听伞下的雨声吗？”<br>月亮点点头。<br>他替月亮撑起一把伞。<br>雨，滴滴答答地敲出轻快的旋律。</p>
<p>黄昏的时候，一阵突来的狂风，将他们吹得好高好远，他紧紧抱住他的月亮。</p>
<p>风在耳边尖锐地呼啸，雨不断地迎面打来。</p>
<p>他们奋力穿过一层层浓密的乌云，不知过了多久，世界突然安静下来。</p>
<p>所有的喧闹在瞬间退至远方，<br>所有的烦恼消失无踪，<br>点点星光在四周缓缓流动，<br>他们感到非常欢乐。</p>
<p>月亮轻轻地转动，男孩慢慢地睡着，<br>梦里依稀闻到一股淡淡的百合花香。</p>
<blockquote>
<p>看不见的，看见了。<br>夏风轻轻吹过，草丛树叶翻舞飞扬。<br>遗忘的，记住了。<br>乌云渐渐散去，一道柔和的月光洒落在窗前……</p>
</blockquote>
<p>(完)</p>
<blockquote>
<p>梗概：</p>
<p>看不见的，是不是就等于不存在？<br>记住的，是不是永远不会消失？</p>
<p>每一个黄昏过后，大家焦虑地等待，却再也没有等到月亮升起。<br>潮水慢慢平静下来，海洋凝固成一面漆黑的水镜，没有月亮的夜晚，世界变得凄冷幽寂。</p>
<p>但是，最深的黑夜即将过去，月亮出来了……</p>
</blockquote>
<p>— 1999年几米画本《月亮忘记了》</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看见的，看不见了。&lt;br&gt;夏风轻轻吹过，在瞬间消失无踪，&lt;br&gt;记住的，遗忘了。&lt;br&gt;只留下一地微微晃动的迷离树影……&lt;/p&gt;
&lt;p&gt;看不见的，是不是就等于不存在？&lt;br&gt;也许只是被浓云遮住，&lt;br&gt;也许刚巧风砂飞入眼帘，&lt;br&gt;我看不见你，&lt;b
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>react-native不完全避坑指南(Android版)</title>
    <link href="http://yoursite.com/2016/07/23/react-native-avoid-mistake-android/"/>
    <id>http://yoursite.com/2016/07/23/react-native-avoid-mistake-android/</id>
    <published>2016-07-23T02:57:56.000Z</published>
    <updated>2016-07-24T07:47:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pre">Pre</h1><p>Android Studio在windows上的安装部署让我在大一的时候放弃了安卓，在mac上as的表现尚可，部署工程也变得不是那么坑了。</p>
<p>我们继续研究bitch项目</p>
<p>首先用AS(version 2.1)打开bitch下的的android文件夹，然后等上一段时间更新。。。具体问题可能会发生例如某些模块需要科学下载，但是OSX上基本不会有环境配置等诸多问题。</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/1.png" alt=""></p>
<h1 id="坑">坑</h1><h2 id="工程路径">工程路径</h2><p>记得打开的是<code>android</code>文件夹，而不是<code>bitch</code>文件夹，否则识别不出安卓工程，虽然部分功能可用。</p>
<p>遇到错误</p>
<p><code>Error running app: Instant Run requires &#39;Tools | Android | Enable ADB integration&#39; to be enabled.</code></p>
<p>时记得勾选 Tools -&gt; Android -&gt; Enable ADB integration</p>
<h2 id="AS里的Android版本">AS里的Android版本</h2><p>我使用的版本是N，开始我认为为了适配国内手机尽量选低版本，于是装了N、23和19，但是最后发现只有N版本才能成功在AS上跑，现在发现23版本也能运行。</p>
<p><strong>Nexus 5X API N</strong></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/2.png" alt=""></p>
<p><strong>Nexus 5X API 23</strong></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/3.png" alt=""></p>
<p><strong>Galaxy Nexus API 19还是跑不了（无限编译至timeout）</strong></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/4.png" alt=""></p>
<p>原因其实我并不是很了解，可能与版本有关，可能与机型有关。但是react-native理论上适配所有机型，也避免了魅族坑:)</p>
<p>但是如果只能高版本模拟器进行测试的话，估计低版本真机测试的时候又会出现这样那样的问题。</p>
<p>真机调试待更。。</p>
<h2 id="模拟器">模拟器</h2><p>Mac上可以直接在<code>Application/Xcode.app/Contents/Developer/Application/</code>中或者Alfred、spotlight中搜索simulator来打开Simulator.app，每个尺寸的simulator都是一个独立的device，会保存之前使用过的应用、本地数据，都会保存在对应device中。这就让后续开发绕过了Xcode，以延长电脑寿命（雾</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/18.png" alt="启动模拟器"></p>
<p>Android Studio通过启动AVD manager来启动各种型号的安卓模拟器</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/11.png" alt="就是这个东西"></p>
<p>要去绕过AS启动它<del>以延长Mac寿命</del>，首先找到AS的sdk下的tools</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/12.png" alt=""></p>
<p>然后注意到emulator这个可执行文件。。执行它发现似乎需要参数</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/13.png" alt=""></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/14.png" alt=""></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/15.png" alt=""></p>
<p>提示我到<code>$HOME/.android/avd</code>下去寻找模拟器</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/16.png" alt=""></p>
<p>把需要的模拟器复制过来</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.23/17.png" alt=""></p>
<p>模拟器就开始运行了，撒花（雾）。我这里提示该升级了</p>
<h1 id="总结">总结</h1><p>为了同时适配谷歌和苹果，尽量使用react-native标准模块，而不是原生模块，虽然是<br><code>Learn once, write everywhere</code>，我觉得更像是<code>install once, write everywhere</code>，所有的坑，在APP成功安装运行一次后，就把重心完全放到了js上。<del>好吧不仅限于上个月iPhone版本更新以后APP找不到DiskImage直接闪退，手机上20多个demo全部GG</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pre&quot;&gt;Pre&lt;/h1&gt;&lt;p&gt;Android Studio在windows上的安装部署让我在大一的时候放弃了安卓，在mac上as的表现尚可，部署工程也变得不是那么坑了。&lt;/p&gt;
&lt;p&gt;我们继续研究bitch项目&lt;/p&gt;
&lt;p&gt;首先用AS(version 2.1)
    
    </summary>
    
    
      <category term="reactnative" scheme="http://yoursite.com/tags/reactnative/"/>
    
  </entry>
  
  <entry>
    <title>Sorry</title>
    <link href="http://yoursite.com/2016/07/23/sorry/"/>
    <id>http://yoursite.com/2016/07/23/sorry/</id>
    <published>2016-07-22T16:11:51.000Z</published>
    <updated>2016-07-22T16:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抱歉">抱歉</h1><p>这是我对同学（尤其是一些“不善”待人接物的可爱的同学）们交流的问题的总结。如果你看到这段话，大概是我对你的言行稍有不适。当然我没有恶意。只是希望我们能更高效而优雅的交流。</p>
<p>如果你不幸中枪，请不要生气，不管你后来的行为如何，这段话都将不会出现第二次，因为我会尽量避免与你交流（苦笑</p>
<h1 id="关于询问">关于询问</h1><p>这是一个需要安全感的时代，安全感在陌生人直接意味着信息对等和尊重。我讨厌任何让人处于感觉不安全的状态的行为。</p>
<h2 id="错误示例">错误示例</h2><p>在吗 （n小时回复在后）在吗（又n小时回复在后）没事了/挥手</p>
<p>你是xxx吗。哦</p>
<p>这题…怎么做？</p>
<p>同学你很帅…代码能发我一份吗</p>
<h2 id="正确示例">正确示例</h2><p>现在过来，不来的话（解决方案a，b…<br>[给出备用方案]</p>
<p>我是xxx，你叫？我的博客是…，你的博客在哪？我没女朋友，你有女朋友吗？（雾）<br>[交流信息对等]</p>
<p>您好我有一个问题a，这是我Google/百度过的结果（链接b），这是我尝试过的方案c…为什么出现了d…的结果呢？我猜是e…的结果但是f明明没问题QAQ<br>[之前尝试解决的具体过程]</p>
<p>（你有一个红包请查收）…代码能发我一份吗<br>[等价交换]</p>
<h1 id="关于对错">关于对错</h1><p>关于三观不和，观点不同，我是秉持这样一个态度：作为即上。</p>
<p>不作为的人，和一直沉默的人，是最可恶的人。善恶都是在作为，只是看的角度不同而已。</p>
<h2 id="错误示例-1">错误示例</h2><p>我有一个idea，我们来做吧！</p>
<p>这个logo太高了，这个字太大了，这个排版不太好，这里应该放一个XX，反正这样总感觉是不对的…</p>
<p>这个我不会啊。。。</p>
<h2 id="正确示例-1">正确示例</h2><p>(我之前有一个idea，) 我做了一个demo，大家来看看怎么样？<br>[Show me the code, or STFU.]</p>
<p>（发了个p图）改成这样如何？<br>[Action talks.]</p>
<p>这个我不会啊。。。因为我确实xxx不行<br>[非主观原因]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;抱歉&quot;&gt;抱歉&lt;/h1&gt;&lt;p&gt;这是我对同学（尤其是一些“不善”待人接物的可爱的同学）们交流的问题的总结。如果你看到这段话，大概是我对你的言行稍有不适。当然我没有恶意。只是希望我们能更高效而优雅的交流。&lt;/p&gt;
&lt;p&gt;如果你不幸中枪，请不要生气，不管你后来的行为如何，
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>react-native不完全避坑指南(iOS版)</title>
    <link href="http://yoursite.com/2016/07/22/react-native-avoid-mistake/"/>
    <id>http://yoursite.com/2016/07/22/react-native-avoid-mistake/</id>
    <published>2016-07-22T13:57:58.000Z</published>
    <updated>2016-07-22T16:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装测试">安装测试</h1><p>RN发展的非常非常快，在我写这篇文章（7月22日 星期五）的时候已经更新到0.30版本了</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.22/2.png" alt=""></p>
<p>版本发展的太快，导致新手在使用RN时，参考的文档会不可避免的发生一些版本更迭导致的错误（比如语法全面转向ES6等），下面就以0.30为例，我重新写一个RN项目，取名为bitch</p>
<p>首先更新RN版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g react-native-cli</div></pre></td></tr></table></figure>
<p>测试安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">react-native init bitch</div><div class="line"><span class="built_in">cd</span> bitch</div></pre></td></tr></table></figure>
<p>查看package.json</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">~/workspace/reactnative/bitch » cat package.json </div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"bitch"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"react"</span>: <span class="string">"15.2.1"</span>,</div><div class="line">    <span class="string">"react-native"</span>: <span class="string">"0.30.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接运行iOS模拟器脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-ios</div></pre></td></tr></table></figure>
<p>可能会卡一段时间，当前会执行安装iOS APP的脚本，另一个弹出的是node后端，关于所有APP的信息都放在这个服务器上。之后毫无疑问的，渲染出来一个iPhone6的界面应用<img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.22/3.png" alt=""></p>
<p>然后官方文档就开始撒花了。(懵逼</p>
<h1 id="坑">坑</h1><h2 id="node路径_问题">node路径 问题</h2><p>我们在使用xcode进行应用安装时，如果你是一个好的jser，会使用nvm(node version manager)管理node版本，但是通过修改.zshrc加入node环境变量启动的话，shell会找不到<code>node</code>命令，xcode会显示build failed，此时要到项目的Build Phases 里去找到shell中的node路径，具体可以通过<code>where node</code> or <code>which node</code>命令查看 <img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.22/4.png" alt=""></p>
<h2 id="真机测试Bug">真机测试Bug</h2><p>关于真机调试，中文官方文档是这样说的：<br><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.22/5.png" alt="http://reactnative.cn/docs/0.28/debugging.html#content"><br>然而实际上要到<code>AppDelegate.m</code>去修改localhost为本机IP才会生效，修改<code>RCTWebSocketExecutor.m</code>没有实质作用(0.27版本)，然而在0.30版本里似乎进行了优化，代码优化如下：</p>
<p>RCTWebSocketExecutor.m</p>
<p><strong>Before</strong></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.22/6.png" alt=""></p>
<p><strong>After</strong></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.22/7.png" alt=""></p>
<p>测试之后，发现似乎是真机调试时主动把本机IP自动替换localhost，因此不需要修改任何代码就可以进行真机调试</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/16.7.22/8.png" alt="iPhone截图"></p>
<p>但是0.30版本前的项目还是会有这个坑。可以通过</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save react-native@0.30</div><div class="line">react-native upgrade</div></pre></td></tr></table></figure>
<p>进行项目更新</p>
<p>实际上，你的app只是一个js解释器，我可以在用一台服务器上开不同的后台让它变成不同的app，只要按装好一次app，就告别Xcode，用你喜欢的编辑器，比如vim，进行iOS的APP编写了。</p>
<h2 id="ES6">ES6</h2><p>其实这个不算一个坑，因为现在ES5是被兼容的。作为一个prototype的忠实用户，对于所有的oo语言是无法接受的，何必要包上一层糖纸去迎合那些没有class就活不下去的人呢？ES6的到来完全抢走了JS各种方言的饭碗，像之前很多人推荐的CoffeeScript、TypeScript。我大原型链指针灵活，继承自由，现在被强行规范化了。rn马上也要抛弃es5了，如果你没有接触过es5的话，那这个就不是一个坑，自动忽视掉之前版本的教程、官方/非官方例子就好。慢慢的习惯每个自定义view都用上class和它的构造函数吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装测试&quot;&gt;安装测试&lt;/h1&gt;&lt;p&gt;RN发展的非常非常快，在我写这篇文章（7月22日 星期五）的时候已经更新到0.30版本了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://coding.net/u/xana/p/yinyong/git/raw/master/i
    
    </summary>
    
    
      <category term="reactnative" scheme="http://yoursite.com/tags/reactnative/"/>
    
  </entry>
  
</feed>
