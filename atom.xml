<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XANA&#39;s Blog</title>
  <subtitle>I can be who you are</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-01T14:01:43.790Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XANA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【闲聊】写给和我一样在游戏行业迷茫的人</title>
    <link href="http://yoursite.com/2019/06/30/tosomeonelikeme/"/>
    <id>http://yoursite.com/2019/06/30/tosomeonelikeme/</id>
    <published>2019-06-30T01:21:39.000Z</published>
    <updated>2019-07-01T14:01:43.790Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>「不是生活所迫，谁愿意恰烂钱呢」</p>
</blockquote>
<h2 id="国内氛围"><a href="#国内氛围" class="headerlink" title="国内氛围"></a>国内氛围</h2><p>最近游戏行业出了一件事情，就是「行业领军」米忽悠的新游戏「原神」和塞尔达因为相似度上了话题。我的第一反应是米忽悠不可能做这种事，好歹是个有良心的公司，不会这样自我堕落（<del>划不来</del>）。后面越看越不对劲，后面连「借鉴」都开始毫不掩饰，甚至还有说崩坏3是直接解包猎天使魔女的动作的，不然不可能达到这样像素级别的复刻。要知道新做一个动作比一帧帧解包要容易的多，我开始觉得这种事情在国内完全有可能发生。无论结果如何，对米忽悠是失望的。明明有一个好IP为什么不推广，要去拿别人的东西呢？你做的再好也不可能超过原作。这样看来鹰角网络反而显得特别良心，这并不是夸鹰角网络，矮子里拔高个罢了。</p>
<p>国内环境甚至影响到了国外，连暴雪和V社都开始在国内恰烂钱了，且不论是否是粪作，这种资本和市场决定游戏内容的感觉很糟糕。国内游戏完完全全变成了利用人性弱点诱导提供财物的电子工具，而不是触动人性柔软部分的艺术品。现实过于残酷，使我迷失在新手村的Y字路口。</p>
<p>有没有办法改善这种情况呢，有。不管你说是游戏公司被股东（<del>和精神股东</del>）绑架也好，还是国内开发者的素质不够也好，有一点是肯定能改善的，就是开放游戏市场。只有在菜足够多的情况下，食客才会变得挑剔，而不是饥不择食的端上什么东西看都不看就吃。在深究原因到了国家政策层面上戛然而止，涉及到了文化管制，因此这是一个无解的话题。</p>
<p>TG在其他方面一直做的很不错，但是多年的经验告诉我不要因此全盘肯定一个人，毫无疑问TG在有些地方就是做的傻逼，完全不懂实际情况，下面的人各种耍小聪明蒙混过关，上面的人还看着虚假的业绩沾沾自喜。TG曾经要求银行超低利息向中小企业用放贷，简直就是把银行推上绝路，因为小企业的生命周期一般只有几年风险太大，银行迫不得已给平时关系好的企业合作，把一定金额借给他们买基金之类，最后的结果是银行应付了政策，企业白嫖了一波基金，负责人拿到了满意的政绩。所有数字看起来都没问题，但社会因此发展了吗？</p>
<h2 id="分级制度"><a href="#分级制度" class="headerlink" title="分级制度"></a>分级制度</h2><p>最近国内一帮大厂拉上小厂（估计没有我司）给上面写东西，建议实行游戏分级，我个人的估计是倾向悲观，分级等于放权，放权导致腐败，TG肯定觉得不如把权掌握在自己手中。说到游戏分级我就想到了电影分级，乃至一般情况下的视频分级。我觉得TG是真的太敏感了，这种分级下的18+，一般也不会涉政，不会有极端暴力的内容，放到现在来看也基本是完全健康的内容，大概最多也就是《进击的巨人》这种级别，往上的可以禁止（和现在一样），再往上的估计日本深夜电视也不允许播吧。分级制度和禁止制度完全可以共存，一步步来嘛，可以分领域，分类别慢慢实行，你们不是最懂这一套吗。政策上我反对任何一刀切的内容，哪怕你说不行，也得试点然后让我死个明白。</p>
<p>适当的文化自信有助于创作者们灵感迸发。在国内，无论哪个文化领域，最热的东西肯定就是在政策边游走的内容，比如不是很火直播主最热的内容肯定就是在ban和没ban的边缘游走。这种提心吊胆的氛围无助于提高整体质量，反而压抑人性的时间如果太久反而容易导致各种社会问题。</p>
<p>两年前也写过一篇关于<a href="http://mikumiku.com.cn/2017/05/27/creative-desire/" target="_blank" rel="external">创作的文章</a>，国内的创作者环境到现在为止都没有改善，甚至有的发表作品都需要塞钱来换取基本的入口流量。中国社会各种文化被其他文化入侵不是没有原因的，不是外国的月亮圆，是真的吃不下去翔啊。小鲜肉填补了我国三级片市场的空白，流量决定明星而不是明星决定流量。国外资本主义已经玩烂的一套在我国风生水起，很大程度上你可以通过观察国外的历史发展来观测我国社会走向，我国的审美开始变得畸形，自己的行为导致了这种审美，然后又放一个喉舌来抨击这种审美，让人感觉莫名其妙，精神分裂。</p>
<p>这部分是题外话。我国的很多智库的思考方式还是西方那一套，包括普通民众如我也是如此，有些理论基本都是常识性错误，比如经典的经济理论「过剩产能」就是个伪命题，只有「劣质产能」和「优质产能」之分，美国的产能都不知道「过剩」到什么地步去了，一样席卷全球市场。因此如果按照西方那套理论我国从制造业转向服务业，经济TM早就崩到十万八千里了（扩展阅读：韩国经济现状）。很多东西需要重新思考，当你引用一个学术观点时，实际上很有可能是错误的，思考问题时一定要基于实际进行深究，比如「民主」「自由」基于生产产品的分配方式，在经济层面上就完全是对立面，政治上分别衍生出集体主义（共产主义）和资本主义，把「民主」「自由」放在一起说完全是不对的，至少从学术上是完全不符合实际的，也就你喊着爽而已。不愿意思考本质的人是最悲哀的人，连自己迷信的的东西都不愿意深究本质。关于这部分内容我有空单独写一部分我思考的内容，关于过于迷信西方理论的东方人。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;「不是生活所迫，谁愿意恰烂钱呢」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;国内氛围&quot;&gt;&lt;a href=&quot;#国内氛围&quot; class=&quot;headerlink&quot; title=&quot;国内氛围&quot;&gt;&lt;/a&gt;国内氛围&lt;/h2&gt;&lt;p&gt;最近游戏行业出了一件事
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>【TOP】个人对C4W的初步研究</title>
    <link href="http://yoursite.com/2019/06/27/tetrisc4w/"/>
    <id>http://yoursite.com/2019/06/27/tetrisc4w/</id>
    <published>2019-06-27T13:21:39.000Z</published>
    <updated>2019-07-01T16:13:04.722Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>C4W在puyopuyo等平台就是无敌的存在</p>
</blockquote>
<h2 id="C4W概要"><a href="#C4W概要" class="headerlink" title="C4W概要"></a>C4W概要</h2><p><code>Len</code>（连击）作为俄罗斯方块三大攻击手段之一（其他两个是<code>Tetris</code>和<code>T-Spin</code>），C4W能够达到相对于其他较少width数的连击地形达到最大的连击数，和构造地形需要最少的方块数。因为是4-width的长度，所以必须确保每一个方块都能够消除掉一行。有些方块游戏的结束判定是生成方块的位置有没有方块单元存在，所以有的玩家特地这么摆，把中间生成方块的4格留出来，哪怕低端被顶到最上方都死不了，相当于白嫖一个屏幕。这就相当于两个人打架，我平白无故比你多了一条血，难怪有的人看到C4W就开始毒骂。目前为止能够对抗熟练的C4Wer的方法只有两个，一个是通过开局超快速度的连续<code>T-Spin</code>降低对面高度，另一个就是加入他们。。</p>
<table id="intro" style=""></table>

<p>附TOP平台上<code>Len</code>恐怖的攻击能力：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>连击数</th>
<th>垃圾行数</th>
<th>总数</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>2</td>
<td>6</td>
</tr>
<tr>
<td>6</td>
<td>3</td>
<td>9</td>
</tr>
<tr>
<td>7</td>
<td>3</td>
<td>12</td>
</tr>
<tr>
<td>8</td>
<td>4</td>
<td>16</td>
</tr>
<tr>
<td>9</td>
<td>4</td>
<td>20</td>
</tr>
<tr>
<td>10</td>
<td>5</td>
<td>25</td>
</tr>
</tbody>
</table>
</div>
<h2 id="残骸质量"><a href="#残骸质量" class="headerlink" title="残骸质量"></a>残骸质量</h2><p>相较于C3W和C2W，C4W对玩家的地形理解要求不低，下面统计了所有能够连击的C4W地形（部分地形不是最优解故不列出，手动计算，有错误请告诉我）</p>
<table id="root1" style=""></table>

<p>完全随机方块下连续出现相同方块的概率为1/7，而7-bag系统连续出现两个相同方块的概率为1/49，而且可以通过hold操作来进一步降低，在可以hold的情况下出现三个相同方块的概率简直微乎其微。另外不是每个方块都是渣方块，谁不希望同时持有三个I方块呢。下列是计算在不同有效方块数下，随机两块不同方块情况的消除概率。</p>
<p>为了归类方便，本文把能够容纳n种不同方块的地形简称为有效方块n的地形，或简称有效n。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">有效n地形(总数)</th>
<th style="text-align:left">两块方块都不能消除的情况(7-n)*(6-n)</th>
<th>消除率(42)</th>
<th>不含I方块时的消除率(30)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">6(3种)</td>
<td style="text-align:left">0</td>
<td>1.000</td>
<td>1.000</td>
</tr>
<tr>
<td style="text-align:left">5(1种)</td>
<td style="text-align:left">2</td>
<td>0.952</td>
<td>0.933</td>
</tr>
<tr>
<td style="text-align:left">4(2种)</td>
<td style="text-align:left">6</td>
<td>0.857</td>
<td>0.800</td>
</tr>
<tr>
<td style="text-align:left">3(5种)</td>
<td style="text-align:left">12</td>
<td>0.714</td>
<td>0.600</td>
</tr>
<tr>
<td style="text-align:left">2(1种)</td>
<td style="text-align:left">20</td>
<td>0.524</td>
<td>0.333</td>
</tr>
</tbody>
</table>
</div>
<p>因此我们基本可以说，有效6的是比较好的形状，在做连的时候尽量往这3种形状上靠；有效5地形也不错断连率极低；有效4就有一种微妙的感觉，观感上7个方块里有3个方块是渣方块，同时持有两个就GG，这个概率感觉很高，然而从计算概率上看其实并不高。因此做出有效4的形状时要尽快回到高有效的形状来。有效3是非常糟糕的情况，而且大概率情况下会走向另一个有效3，出现3的时候要么就是被系统安排了，要么就是玩家一时间脑抽了，就听天由命吧。有效2是一个非常特殊的Spin形状，它唯一的走向是有效5，做2是一个为了放下一个Z(或S)而刻意的行为，在下面的结论中，这种地形几乎算是能做而必做的。</p>
<p>有效3和有效4是常见的导致断连的形状。总体来说，有效方块数和当前形状能容纳的方块空间大小有关，当出现方块隔离和不连续的情况都会降低残骸容纳方块数。</p>
<h2 id="方块质量"><a href="#方块质量" class="headerlink" title="方块质量"></a>方块质量</h2><p>上面的计算是对残骸的研究，然而就像人见人爱的I方块一样，其他方块对C4W的相性如何呢。下列是计算在不同有效方块数下，方块情况对残骸的适应情况。为保持观感一致，继续使用有效方块(n)作为纵坐标。</p>
<ul>
<li>有效方块残骸情况有镜像形状，将ZS和JL方块分别交换即可。</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">有效方块(n)</th>
<th style="text-align:left">O(5)</th>
<th>T(7)</th>
<th>I(12)</th>
<th>S(4)</th>
<th>Z(5)</th>
<th>J(9)</th>
<th>L(6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">6(3种)</td>
<td style="text-align:left">3</td>
<td>3</td>
<td>3</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td style="text-align:left">5(1种)</td>
<td style="text-align:left">0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:left">4(2种)</td>
<td style="text-align:left">1</td>
<td>2</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td style="text-align:left">3(5种)</td>
<td style="text-align:left">1</td>
<td>1</td>
<td>5</td>
<td>0</td>
<td>1</td>
<td>5</td>
<td>2</td>
</tr>
<tr>
<td style="text-align:left">2(1种)</td>
<td style="text-align:left">0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<p>I无疑是质量最高的方块，I方块因为平放是它的唯一放法（可证），所以也无法影响残骸形状。T方块不仅仅因为它的高消除率，也因为它对地形影响的多样性，使得无论如何下面的方块都能够很舒服的放下，然而面对有效3这类分隔地形显得有些无力。</p>
<p>JL方块和也有着相当高的消除率，而且对有效3地形几乎是唯一的选项，有效3地形的不连续性使得它必须需要一个维度连续的方块才能消除(JLI)。JL放法基本也是唯一的，非插入操作的情况下，有一边必须贴墙从而制造较大的空间，因此JL也不容易制造Spin地形。</p>
<p>O方块是比较挑剔的方块，基本适应所有高消地形，基本不适应所有低消地形，是所谓的有效3杀手。有意思的一点是，方块会把高消地形变成中消地形，也会把低消地形变成中消地形。因此低消地形能用O方块时要优先考虑O方块，高消地形用O方块时要慎重。</p>
<p>ZS方块的消除情况和O方块类似，面对低消地形完全无力，除了Spin有着比较高的收益外，对地形的破坏力相当之高。Z和S对同一个高消地形的能力又完全相反。要么适用Z，要么适用S，要么全不适用，没有一个地形是两个都友好的。</p>
<p>所以我可以得出大概的结论是在IJLT是好方块，OZS的渣方块。一个基本原则是，渣方块能出手要尽量早出手，否则渣方块堆积时会是一个灾难。</p>
<ul>
<li>有效6的渣方块消除法，能多塞一个是一个。</li>
</ul>
<table id="root2" style=""></table>

<p>最后祝大家TOP水平精进~</p>
<script type="text/javascript">
    const BLOCKWITDH = 0;
    const NC = "消除不能"
    const LN = "连击不能";
    const STYLE = {
        O : "background-color:Gold;",
        T : "background-color:BlueViolet;",
        I : "background-color:DeepSkyBlue;",
        S : "background-color:LawnGreen;",
        Z : "background-color:Red;",
        J : "background-color:Blue;",
        L : "background-color:Orange;",
        N : "background-color:SeaShell;border-style:none;",
        G : "background-color:Grey;",
        V : "border-style:none;",
    }
    function Gen(tr, arr, num) {
        var text = "<table>"
        for (var x in arr) {
            text += '<tr>'
            for (var i in arr[x]){
                var ele = arr[x][i];
                var fs = STYLE[ele];
                if (BLOCKWITDH > 0)
                {
                  fs = 'height:'+BLOCKWITDH+'px;width:'+BLOCKWITDH+'px;' + fs;
                }
                text += '<td style="'+ fs +'"></td>';
            }
            text += '</tr>'
        }
        text += '</table>'
        if (num) text += '<div>' + num + '</div>'
        th = document.createElement("th");
        th.innerHTML = text;
        tr.appendChild(th);
    }
    function Tex(tr, t, t2) {
        th = document.createElement("th");
        th.innerHTML = '<div>' + t + '</div>';
        if (t2) th.innerHTML += '<div>' + t2 + '</div>';
        tr.appendChild(th);
    }
</script>



<script type="text/javascript">
    var root = document.getElementById("intro");
    var thead = root.createTHead();
    var tbody = root.createTBody();

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, [
      'NSSNNTTNNLVVVITTNNNTJJJ',
      'SSZNNNTLLLVVVITZNNTTOOJ',
      'IZZNNNNJJJVVVIZZSSNTOOL',
      'IZZNNNNOOJVVVIZSSNNNLLL',
      'IZZNNNNOOLVVVGGGNGGGGGG',
      'IZTNNNNLLLVVVGGGNGGGGGG',
      'ITTNNNNJJJVVVGGGNGGGGGG',
      'ISTNNNNOOJVVVGGGNGGGGGG',
      'ISSNNNNOOLVVVGGGGGGNGGG',
      'ITSNNNNLLLVVVGGGGGGNGGG',
      'ITTNNNNJJJVVVGGGGGGNGGG',
      'ITZNNNNOOJVVVGGGGGGNGGG',
      'IZZSSNNOOLVVVGNGGGGGGGG',
      'IZSSNNNLLLVVVGNGGGGGGGG',
       ], 'puyopuyotetris上最让人痛恨的玩家');

</script>


<script type="text/javascript">
    var root = document.getElementById("root1");
    var thead = root.createTHead();
    var tbody = root.createTBody();

    var tr = document.createElement("tr");
    thead.appendChild(tr);
    Tex(tr,  "C4W残骸", "(有效方块)");
    Gen(tr, ['NOON', 'NOON'], 'O(5)(10)');
    Gen(tr, ['NTNN', 'TTTN'], 'T(7)(14)');
    Gen(tr, ['NNNN', 'IIII'], 'I(all)(24)');
    Gen(tr, ['NSSN', 'SSNN'], 'S(4)(9)');
    Gen(tr, ['ZZNN', 'NZZN'], 'Z(5)(9)');
    Gen(tr, ['JNNN', 'JJJN'], 'J(9)(15)');
    Gen(tr, ['NNLN', 'LLLN'], 'L(6)(15)');
    Tex(tr,  "论外例", "有效(注释)");


    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GGNN', 'GNNN'], 6);
    Gen(tr, ['NNNN', 'GNOO'], 4);
    Gen(tr, ['NNNT', 'GNNT'], '6(O->5)');
    Gen(tr, ['GGNN', 'GNNN'], 6);
    Gen(tr, ['NNNN', 'GSSN'], 5);
    Gen(tr, ['NNNZ', 'GNZN'], 3);
    Tex(tr,  NC);
    Gen(tr, ['NNNN', 'GGNL'], 4);
    Gen(tr, ['NNNN', 'GGTN'], '5(T-Spin)');
    Gen(tr, ['NNSN', 'GNNS'], '2(Z->5)');
    //Gen(tr, ['NZZN', 'GNNN'], '2(不考虑)');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GGNN'], 6);
    Gen(tr, ['NNNN', 'GNOO'], 4);
    Gen(tr, ['NNNN', 'GGTN'], 5);
    Gen(tr, ['GNNN', 'GGNN'], 6);
    Tex(tr,  NC);
    Gen(tr, ['NNNN', 'GZZN'], 5);
    Gen(tr, ['NNNJ', 'GNNJ'], 6);
    Gen(tr, ['NNNL', 'GGNN'], 3);
    Gen(tr, ['NNNN', 'GGNJ'], 4);

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GNNG'], 6);
    Gen(tr, ['NNNN', 'GOON'], 5);
    Gen(tr, ['NNNN', 'GNTG' ], '4(S->6)');
    Gen(tr, ['GNNN', 'GNNG'], 6);
    Gen(tr, ['NNNN', 'GNSS'], 4);
    Tex(tr,  NC);
    Gen(tr, ['NJNN', 'GNNG'], '2(S->5)');
    Gen(tr, ['NNNL', 'GNNG'], 6);
    Gen(tr, ['NNTN', 'GNNG'], '2(Z->5)');
    Gen(tr, ['NLNN', 'GLNN'], '4(不考虑)');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['NNNN', 'GGGN'], 5);
    Tex(tr,  NC);
    Gen(tr, ['NNNT', 'NNTT'], '6(T-Spin)');
    Gen(tr, ['NNNN', 'GGGN'], 5);
    Gen(tr, ['NNSN', 'NNSS'], 3);
    Tex(tr,  NC);
    Gen(tr, ['NNNN', 'NJJJ'], 5);
    Gen(tr, ['NNLL', 'NNNL'], 6);
    Gen(tr, ['NNNI', 'NNNI', 'NNNI'], '4(不考虑)');


    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['NNNN', 'GGNG'], 4);
    Tex(tr,  NC);
    Gen(tr, ['NNNN', 'NTTT'], 5);
    Gen(tr, ['NNNN', 'GGNG'], 4);
    Tex(tr,  LN);
    Gen(tr, ['NNNZ', 'NNZZ'], 6);
    Gen(tr, ['NNNN', 'JJJN', ], 5);
    Tex(tr,  LN);
    Gen(tr, ['NNTN', 'NNTT'], '3(O->5)');
    Gen(tr, ['NNJJ', 'NNJN'], '3(O->5)');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GGNN', 'NGNN'], 4);
    Gen(tr, ['NNNN', 'NGOO'], 5);
    Gen(tr, ['NNNT', 'NGNT'], 3);
    Gen(tr, ['GGNN', 'NGNN'], 3);
    Tex(tr,  LN);
    Gen(tr, ['NNNZ', 'NGZN'], 3);
    Tex(tr,  NC);
    Tex(tr,  NC);

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['NGNN', 'GGNN'], 3);
    Gen(tr, ['NNNN', 'NGOO'], 5);
    Tex(tr,  NC);
    Gen(tr, ['NGNN', 'GGNN'], 3);
    Tex(tr,  NC);
    Tex(tr,  NC);
    Gen(tr, ['NNNJ', 'NGNJ'], 3);
    Tex(tr,  LN);

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GNGN'], 3);
    Tex(tr,  NC);
    Tex(tr,  LN);
    Gen(tr, ['GNNN', 'GNGN'], 3);
    Tex(tr,  NC);
    Tex(tr,  NC);
    Gen(tr, ['NNNN', 'GNGJ'], 4);
    Gen(tr, ['NNNN', 'GLGN'], 5);
    Gen(tr, ['NNNL', 'GNGN'], '3(不考虑)');



    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['NNNG', 'GGNN'], 3);
    Tex(tr,  NC);
    Tex(tr,  NC);
    Gen(tr, ['NNNG', 'GGNN'], 3);
    Tex(tr,  NC);
    Gen(tr, ['NNNN', 'NZZG'], 5);
    Gen(tr, ['JNNN', 'GGNN'], 6);
    Tex(tr,  LN);

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['NNNG', 'GNGN'], 3);
    Tex(tr,  NC);
    Gen(tr, ['NNNN', 'GTGN'], 5);
    Gen(tr, ['NNNG', 'GNGN'], 3);
    Tex(tr,  NC);
    Tex(tr,  NC);
    Gen(tr, ['JNNN', 'GNGN'], 3);
    Tex(tr,  LN);

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['NNNG', 'NGGN'], 3);
    Tex(tr,  NC);
    Tex(tr,  LN);
    Gen(tr, ['NNNG', 'NGGN'], 3);
    Tex(tr,  NC);
    Tex(tr,  NC);
    Gen(tr, ['JNNN', 'NGGN'], 3);
    Gen(tr, ['NNNN', 'LGGN'], 5);

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['NGNN', 'GNNG'], 2);
    Tex(tr,  NC);
    Tex(tr,  NC);
    Gen(tr, ['NGNN', 'GNNG'], 2);
    Gen(tr, ['NNNN', 'NGSS'], '5(S-Spin)');
    Tex(tr,  NC);
    Tex(tr,  NC);
    Tex(tr,  NC);

</script>



<script type="text/javascript">
    var root = document.getElementById("root2");
    var thead = root.createTHead();
    var tbody = root.createTBody();

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GGNN', 'GNNN'], 'S');
    Gen(tr, ['NNNN', 'GSSN'], 'S');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GGNN', 'GNNN'], 'SZ');
    Gen(tr, ['NNSN', 'GNNS'], 'S');
    Gen(tr, ['NNNN', 'ZZSN'], 'Z');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GGNN', 'GNNN'], 'OSZ');
    Gen(tr, ['NNNN', 'GNOO'], 'O');
    Gen(tr, ['SNNN', 'SSNN'], 'S');
    Gen(tr, ['NNNN', 'SZZN'], 'Z');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GGNN'], 'Z');
    Gen(tr, ['NNNN', 'GZZN'], 'Z');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GGNN'], 'Z(SO*n)');
    Gen(tr, ['NNNN', 'GZZN'], 'Z');
    Gen(tr, ['NNSN', 'NNSS'], 'S');
    Gen(tr, ['NNNN', 'OOSN'], 'O');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GGNN'], '(OS*n)Z');
    Gen(tr, ['NNNN', 'GNOO'], 'O');
    Gen(tr, ['SNNN', 'SSNN'], 'S');
    Gen(tr, ['NNNN', 'SZZN'], 'Z');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GNNG'], 'SJ');
    Gen(tr, ['NNNN', 'GNSS'], 'S(J-Hold)');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GNNG'], 'JS');
    Gen(tr, ['NJNN', 'GNNG'], 'J');
    Gen(tr, ['NNNN', 'NJSS'], 'S(5)');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GNNG'], 'LZ');
    Gen(tr, ['NNNL', 'GNNG'], 'L');
    Gen(tr, ['NNNN', 'ZZNL'], 'Z(4)');

    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    Gen(tr, ['GNNN', 'GNNG'], 'TZ');
    Gen(tr, ['NNTN', 'GNNG'], 'T');
    Gen(tr, ['NNNN', 'ZZTN'], 'Z(5)');

</script>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;C4W在puyopuyo等平台就是无敌的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;C4W概要&quot;&gt;&lt;a href=&quot;#C4W概要&quot; class=&quot;headerlink&quot; title=&quot;C4W概要&quot;&gt;&lt;/a&gt;C4W概要&lt;/h2&gt;&lt;p&gt;&lt;
    
    </summary>
    
      <category term="Game" scheme="http://yoursite.com/categories/Game/"/>
    
    
      <category term="TOP" scheme="http://yoursite.com/tags/TOP/"/>
    
  </entry>
  
  <entry>
    <title>【闲聊】扯淡（n）</title>
    <link href="http://yoursite.com/2018/09/20/sept20/"/>
    <id>http://yoursite.com/2018/09/20/sept20/</id>
    <published>2018-09-20T10:02:17.000Z</published>
    <updated>2018-09-24T01:13:31.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="精致韭菜"><a href="#精致韭菜" class="headerlink" title="精致韭菜"></a>精致韭菜</h2><p>最近很惭愧的被舆论带了风向，这又让我知道了人是很容易被情绪煽动的。人活得越久，越明白不是任何事情分对错就好了，否则国外为什么那么多大流氓，说到底每个个体都只是在短期利益和长期利益间进行权衡。当利益诱惑比较大时，牺牲一些道德或者甚至牺牲一些信誉都是可以预见的事情，用绝对的道德去谴责他人本来就是没有意义的事情，因为你到了那个位置一样也会那么做。</p>
<p>最近有几个话题被炒得很热，也是很有争议的，大小公知们用着自己的推论，在道德或事实基础上做一些形而上的推论，每个人的看法看起来都有一份道理。但是没办法判断到底谁的三观对，谁的说法合理。其实他们的看法都对，不过只是在他们自己的圈子里。</p>
<h2 id="排挤心理"><a href="#排挤心理" class="headerlink" title="排挤心理"></a>排挤心理</h2><p>「三观正」是一个黑话，它表达的意义有两个，一：你的三观和主流三观一样；二：你的三观和我一样。那相对的，「三观不正」的一种意义就是，你的三观和我的不一样，所以你的三观不正，这种情况其实是一件很正常的事情，每个人生长环境不同，对一件事情的看法本来就不同，有些人看到的是感情，有些人看到的是背后的资本。还有一种就是和主流三观不同。这是一件我觉得很可怕的事情，我们的社会尝试着把我们全部捏成一样的人，有些潜移默化的错误变成了潜规则。站出来喊错的人少了，抱团圈地的人多了。</p>
<p>有些人的好感很廉价的，你说了他喜欢的话，就马上各种贴脸，你说了他不喜欢的话，就各种威胁辱骂。我其实对这些都不在意，我讨厌的只是被人当枪使，特别是利益无关却自我不知，为了别人的利益在那边打得死去活来的。最近被舆论带了风向，就是这种感觉，为自己感到十分的难过。</p>
<h2 id="所谓女权"><a href="#所谓女权" class="headerlink" title="所谓女权"></a>所谓女权</h2><p>这是一个非常非常敏感的话题，因为不管你发表什么观点，都会被围而攻之。女人说女人活得艰辛，男人说男人活得艰辛。那么我们为什么会活的那么艰辛呢？我们可以简单的分析一下最近比较火，或者之前比较火的话题。</p>
<p>「他们没有身份证、身背巨额债务、与家人断绝往来、终日在网吧里流连忘返。他们玩的游戏和大多数人无异。但因为特殊的生活方式,他们被人们称为三和大神。」</p>
<p>「佛系青年,网络流行词,含义是指那些在快节奏的都市生活中,追求平和、淡然的生活方式的青年人。」</p>
<p>「女权追求的目标是平等和自由的权利，田园女权追求的是一切的单边利己的权利，这是本质区别，为了达到单边利己的目的，女权甚至会倾向于塑造极其极端的男权社会，利用女权当武器，在更好的男权社会里寄生。」</p>
<p>「……」</p>
<p>你不妨先暂停一下阅读，从这些例子中你静下心来总结这些人物的特点，你想到了什么？</p>
<p>好了，你现在告诉我，他们争来争去的女权，本质是什么？</p>
<h2 id="注水海绵"><a href="#注水海绵" class="headerlink" title="注水海绵"></a>注水海绵</h2><p>我刚进大学的时候，就已经发现软件这一块方面有趋向饱和的趋势。开发者市场上充斥的各种平台，平台的平台，平台的开发工具，平台的平台的开发工具。然而毕竟衣食住行本身就只有那么多选择，大多数的工具只是浪费而已，经济学上叫产能过剩。</p>
<p>技术的发展的放缓是蛋糕做不大的一个很重要的原因，一是蛋糕做不大分不了，二是新的蛋糕会遏制旧的蛋糕，必然导致资本的反攻。你看为什么一开始bat都不搞区块链，（当然区块链本身也不算新蛋糕）到后来搞清区块链就是个骗局以后，才放心的开始疯狂的推广（本质上就是包装起来卖他们的云产品）。不禁感叹一声，实业兴国，XX误邦。</p>
<p>Think broadly，不只是软件市场趋向饱和，我相信在中国基本上各行各业大多数也是趋向饱和的。资本已经注入到任何能赚钱，甚至不能赚钱的地方了。所以现在的年轻人都没那么拼了，一眼就能看到自己的未来。人变得不愿意去创造价值，更趋向于去取得现有的利益。这就是各种人群形成的本质：资本。</p>
<p>扩展阅读：涓滴效应</p>
<h2 id="机械发条"><a href="#机械发条" class="headerlink" title="机械发条"></a>机械发条</h2><p>我们先做道题：</p>
<p>基辛格第一次秘密访华，看到“打倒帝国主义”口号时，曾经表示过不满。尼克松访华时，毛泽东竟然提起此事，并笑着说：“我认为，像我这样的人放了许多空炮……你(尼克松)不在打倒之列，他(基辛格)也不在内。都打倒了，我们就没有朋友了嘛。”毛泽东说自己“放空炮”，是在暗示(　　)</p>
<p>A．中美之间的矛盾是虚构的 B．美国已经不是帝国主义国家 C．中国在淡化中美意识形态的分歧 D．中国感谢美国帮助中国恢复联合国合法席位</p>
<p>后来基辛格了解到，中国的每一个政治行为，都有他背后的意义，没有无缘无故的政治行为。</p>
<p>想到现在的『主流价值』，全部都是舆论导向的产物，我就不寒而栗。国家发表什么看法什么言论，一定是在推动什么什么价值观，或是要一些人去推倒另一些人。国家的本质是阶级统治的工具，阶级性是国家的本质属性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;精致韭菜&quot;&gt;&lt;a href=&quot;#精致韭菜&quot; class=&quot;headerlink&quot; title=&quot;精致韭菜&quot;&gt;&lt;/a&gt;精致韭菜&lt;/h2&gt;&lt;p&gt;最近很惭愧的被舆论带了风向，这又让我知道了人是很容易被情绪煽动的。人活得越久，越明白不是任何事情分对错就好了，否则国外为什么
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>【电魂】Progress Report Sept. 11th</title>
    <link href="http://yoursite.com/2018/09/11/sept11/"/>
    <id>http://yoursite.com/2018/09/11/sept11/</id>
    <published>2018-09-11T10:02:17.000Z</published>
    <updated>2018-09-24T01:07:59.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>手游最近在准备第二次删档内测，真实忙成狗。今天我同时在进行的三个需求，突然同时都卡在了别人那边，而且估计要卡好久，人一下子就闲下来了（U3D也被逐个拉去谈话，听说是东西写不完）。人大概是被工作虐惯了，一停下来突然不知道做什么。学习吧，不是很想看书，刚刚和web强行心平气和的司乐碧，现在很浮躁。现在还算是工作时间，想来想去就只能写写博客了。</p>
<h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>我以前写文章是这样的，不管现在是什么状态，只要一下笔，就能很自然的写下去，我好多文章都是很随性的。现在我的感觉很奇怪，手放在键盘上，不知道说什么。单调而枯燥的生活是致命的，特别是游戏行业的加班情况，根本就没有<code>chunking</code>的时间。以前闲下来还会看一些新闻来思考，现在就是业务、业务、业务。我现在也不知道我这么拼干什么，已经连续两个月全勤，有的时候还很早到，嫌996的上班还不过瘾么……上个月存的钱突然被旅游氪金等其他支出一下子花光了，说实话有点后悔，因为这类东西完全可以通过思考或者其他过程来获得同等的体验。以前我的欲望是很小的，现在对金钱的感觉有点变的不敏感了，动不动就花了好多，根本存不下来……人对时间也变得不敏感，有时候晚上快10点钟才反应过来下班，周围的人都走掉了，人变得昏昏沉沉的，到家快11点，身体代谢都变得紊乱，人的思考变得都有些不清晰，想的东西都变得乱七八糟，大脑都不按照正常的方式运作了。我现在有点祈祷这个项目赶紧结束掉，如果下一个项目还是这个样子，我说不定就放弃了。</p>
<h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>还有一个问题也很累，就是和一些同事打交道。我深知人都是短视、贪婪、畏惧、本质上又是懒惰的，但是没想到人会懒惰到这种地步。你已经给他安排好你心目中认为最最最宽松的任务了，然后他还是找借口不做，或者干脆假装忘记，你就会很恼火。次数多了以后你就不愿意和他交流，看到这个人你就会觉得很累，就像狗听到口哨就会流口水的反射一样，你看到他莫名其妙人就一下子瘫下来了。我劝各位朋友，及时做好本职工作（特别是协作性的任务），不脱别人的后腿，就是对他人最大的善良了。</p>
<h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>说起善良，撇开以前的偏见，策划真是世界上最善良的人了。策划基本上你只要和他沟通，他都听的进去并且能马上反馈给你，无论是文档的更新还是聊天记录里。策划还能拍着胸脯说<code>我背锅</code>来和人理论，和其他到处甩锅的人不同。我看到策划经常被当面骂，但是普遍脾气都很好（像我脾气就很差，只是没有当面发作而已），总是以解决问题为目的，比任何一个工程师还工程师。而且策划一般游戏都打得好，又会吹逼，我们能聊得有来有回，和其他同事就是有来无回的那种死闷骚。策划就是这么一个让人心安的职位/可怜</p>
<h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>删档内测真是一个天才的发明，找了一堆比内部测试靠谱多的人，然后又不需要发工资，反馈的效率又高，这些人找bug又找到很勤。我就不懂这些人图什么……最后拿一点微不足道的奖品来随便打发一下，然后这些人就高兴的一比。据说第一批测试报名的人有五百人还是五千人，这些人都是韭菜吗（</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;手游最近在准备第二次删档内测，真实忙成狗。今天我同时在进行的三个需求，突然同时都卡在了别人那边，而且估计要卡好久，人一下子就闲下来了（U3D也被逐个
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>【电魂】我对m3服务器的理解（三）</title>
    <link href="http://yoursite.com/2018/08/11/m3server3/"/>
    <id>http://yoursite.com/2018/08/11/m3server3/</id>
    <published>2018-08-11T12:02:17.000Z</published>
    <updated>2018-08-13T23:37:09.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运营"><a href="#运营" class="headerlink" title="运营"></a>运营</h2><p>最近在做GM工具和日志，为了了解流程向大佬要来一份运营的权限，虽然一些内幕我不能说，但是能够看到dh下所有游戏的运营数据，一时间还是很震撼的。这些运营数据是怎么来的呢，就是服务器这边不厌其烦的输出各种各样的日志，从物品到比赛，从登陆到登出，从充值到消费。基本上这边想查，任何异常数据都是随便查出来的，没有什么查不出来的情况，就是看这边的态度怎么样了。</p>
<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>m3服务器的IPC的流读写部分我原来都当做黑盒在用，因为看不太懂也不想去看，后来发现有些非IPC，比如协议和DB也在用流读写，我就正常反应的点进去看了下发现其实并不复杂。大概就是一个<code>SeNetStream</code>结构体，把读写各种基本类型数据的方法进行分开处理，用读取和移动位置的方法把数据全部存在一个char组里。这样的好处就数据量小，而且解析的方法也比较自然且直观。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> SeNetStream</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="comment">// huge code here</span></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">	<span class="keyword">char</span>	m_acData[<span class="number">65535</span>];</div><div class="line">	<span class="keyword">char</span>*	m_pcData;</div><div class="line">	<span class="keyword">int</span>		m_iSize;</div><div class="line">	<span class="keyword">int</span>		m_iPos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后我想这东西这么溜批，用法也简单，把结构体丢进去就好了，之后我发现不是的，你要为每个结构体定义读写方法（就是里面属性的读写顺序）。难怪梦2要用自动化工具，不然每定义一个协议，工作量都不小。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>记得第一篇文章的那副架构图吗，我想说的是，这个架构并不是一开始是这样的。一开始基本上全部逻辑都在ws里，包括dbserver，后来发现业务太多就分离了出去。其他服务器情况雷同，比如处理GM和运维请求的那个node服务器。这给我们一个启发，任何东西的原型都是很丑陋的，一开始不要太专注于把它设计的很好，说的程序员一点，就是不要过早优化。</p>
<h2 id="写的很怪的Node服务器"><a href="#写的很怪的Node服务器" class="headerlink" title="写的很怪的Node服务器"></a>写的很怪的Node服务器</h2><p>node服务器在解析和发送数据的时候也沿用了那套流的解析方法，以及协议的大量的枚举判断。这样写出来的的代码就充满着诡异的感觉（想想看充满着C++气息的JS代码）。导致我前面很长一段时间只能把这个node服务器当做黑盒用，哪怕到了后面，也完全没有是在写<code>Dynamically</code>的感觉，这是由于工程里硬性规定的变量命名，我copy一下文档，大概是这个样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">// 1字节的</div><div class="line">bool		bValue;		</div><div class="line">char		cValue;</div><div class="line">BYTE		byValue;</div><div class="line"></div><div class="line">// 2字节的</div><div class="line">short		sValue;</div><div class="line">WORD		wValue;</div><div class="line"></div><div class="line">// 4字节的</div><div class="line">BOOL		bValue;</div><div class="line">int			iValue;</div><div class="line">long		lValue;</div><div class="line">UINT		uiValue;</div><div class="line">DWORD		dwValue;</div><div class="line">float		fValue;</div><div class="line"></div><div class="line">// 8字节的</div><div class="line">double		dValue;</div><div class="line"></div><div class="line">// 数组</div><div class="line">char		acValues[100];</div><div class="line">UINT		auiValues[100];</div><div class="line">GePlayer	akPlayers[100];</div><div class="line"></div><div class="line">// 类实例(自定义的类)</div><div class="line">GePlayer	kPlayer;</div><div class="line"></div><div class="line">// 枚举</div><div class="line">GeState		eState;</div><div class="line"></div><div class="line">// 句柄</div><div class="line">HANDLE		hHandle;</div><div class="line"></div><div class="line">// 成员变量</div><div class="line">GePlayer	m_kPlayer;</div><div class="line"></div><div class="line">// 字符串</div><div class="line">string 		kLenth;</div><div class="line"></div><div class="line"></div><div class="line">U3D内部对象,能体现对象的含义即可</div><div class="line">比如GameObject  goObject; GameObject goUI;</div><div class="line">RectTransform  rectUI;</div></pre></td></tr></table></figure>
<p>这个在JS里也是这么要求的（用前缀去命名一个c-union，2333），我以后估计代码风格就变成这个样子了。</p>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>规范在大项目很重要，没有规范就没有一切，我能上手这个项目的很大原因就在于其清晰的结构和规范的命名（主要是协议命名）。很难相信梦2的代码是完全手撸的，我之前想参考梦2逻辑，问老大生成协议的xml，他告诉我没有xml，全部代码都是手撸的（当然包括每个通讯函数结构体的定义，及其读写方法）的时候，我一下子没反应过来。有句话说得好，前人栽树后人乘凉，我就是那个乘凉的人的其中一个，真的感谢前面种树的人，虽然很多都已经失联了，不过你们的留下的代码让我这个菜鸡学到了很多东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;运营&quot;&gt;&lt;a href=&quot;#运营&quot; class=&quot;headerlink&quot; title=&quot;运营&quot;&gt;&lt;/a&gt;运营&lt;/h2&gt;&lt;p&gt;最近在做GM工具和日志，为了了解流程向大佬要来一份运营的权限，虽然一些内幕我不能说，但是能够看到dh下所有游戏的运营数据，一时间还是很震撼的
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="cpp" scheme="http://yoursite.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【闲聊】写给新人和自己</title>
    <link href="http://yoursite.com/2018/08/11/aug11/"/>
    <id>http://yoursite.com/2018/08/11/aug11/</id>
    <published>2018-08-11T10:02:17.000Z</published>
    <updated>2018-08-13T23:42:11.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实这篇东西我很想命名成<code>August 11 Progress Report</code>的，但是很遗憾，工作压力下并没有让我学习的积累到达足够输出的地步。连写这篇文章都是在公司挤时间写的。我自我感觉算是一个享受当下的人。读书的时候如果放了假，我一定是先玩一段时间，然后假装学习写作业，最后实在没事做了才开始做一些我认为有意义的事情，换而言之，放假在我看来就是应该玩，在假期内学习本身就是一件不道德的事情，你平时不好好看书假期看，要么就是表演欲，要么就是智商低。其实我工作中学到的东西比自己去寻找的那些知识，要牢固且靠谱的多，因为都是基于实践且被反复检验，不过缺点就是太无聊而枯燥，死板而纠结于细节。有时候还能了解一些行业的内幕，这些都是是自我相处、自我学习了解不到的。这篇文章发完以后，可能就发一篇工作总结吧。</p>
<h2 id="软件工程的局限性"><a href="#软件工程的局限性" class="headerlink" title="软件工程的局限性"></a>软件工程的局限性</h2><p>我常常问自己，软件这行到底能做什么？好多好多APP说改变这个，改变那个，重新定义这个，重新定义那个，其实用老一辈的话来说，我们离开终端就是废物，你改变了那么多，说了那么多，把你手机拿掉，你还不是一无所有。你们真的不要老是嘲笑老一辈，我对所有的事物都抱着敬畏的心情。现在世界的确暂时由计算机科学定义，基于代码，如果将来出现了新的基准，（举个玄学的例子，比如星际争霸里星灵的灵能，异虫的幽能，我们以后用卡拉交流也说不定）那现在你做的事情就完全没有意义。你看星际争霸的世界观很荒诞，但是以前看现在也是同样荒诞。所以计算机技术，只是非常普通且非常局限的一门普通技术而已，而且非常受制于科技和硬件的发展。说白了计算机技术也就是餐馆里很多桌子里比较大的一桌，你能做的也只能做好自己的菜，你并不能把厨师长踢了，迎娶老板娘走上人生巅峰。</p>
<h2 id="低谷的问题"><a href="#低谷的问题" class="headerlink" title="低谷的问题"></a>低谷的问题</h2><p>大家都说我们这行浮躁的人很多，大学四年的观察下来，我感觉其实不是的，我看来了又走的人，有相当一部分人是真的想学好，只是没有走对门，走了好多死胡同而迷茫绝望的。我觉得自己只是运气好走对了路入了游戏行业，在最迷茫而孤立的时候没有放弃而已。每个人都有很多种自己的学习方法，其中肯定一定是有最佳实践的，你只要找到这种学习方法，学习就是忘我的享受。那找到这种学习方法需要的时间呢，很难说。在高考前找到的人，现在已经读了一个好的大学，或者就是你旁边周围人口中所谓遥不可及的大佬。在大学内开始找的，像沈东豪这种智商比较高自我管理又很洁癖的，从大一一开始没多久就找到了，基本上你只要去找他，一般大部分时间都在写代码。像我这种比较笨，自我管理又失败的，因为一些运气，在大二过了一半的时候开始算是走上正轨，有了写代码是享受的感觉，水平也开始随着代码量上去了。但是大部分的人还是感觉写代码是一种痛苦的折磨，还是玩游戏快乐。所以说你会发现教一个这种状态前的人，难，很难，真tm的难，即使你说了很多，ta根本也听不进去，比如我表妹，比如社团的学弟妹，比如一个我认为人很好三观又蛮合的学姐，她就是认为自己不是这行的料。你觉得他们没有挣扎过吗？不是的，他们精神上付出的努力可能不比我少，这种痛苦我能够感同身受。我在菜的阶段经历过很长很长的时间。大概不要脸的人运气会好一些吧。</p>
<h2 id="浮躁的问题"><a href="#浮躁的问题" class="headerlink" title="浮躁的问题"></a>浮躁的问题</h2><p>当然，浮躁的人会被说很多也是有原因的，像我这种现在每天都还在读十几年前的大巨头书籍补基础，你这种什么都不做，凭什么上来就想替代我？中国人很喜欢小聪明，真的很喜欢。包括亲戚圈工作圈那种一个什么一句话，一个动作就能什么走上人生巅峰/跌落人生低谷的故事，每天在被传来传去，哪怕是古代也是充满了这种投机取巧的故事。你要明白一件事情，你花多少代价得到，就需要多少的代价失去。像我对自己读书量还是很有自信的，在我现在软工四个班里读的书比我多的人估计就几个，而且我都认识知根知底。这种用时间累积起来的优势是我唯一不会担心被替代的长处。比如我有3年的C++经验，一个1年C++经验的人他再怎么天才也绝对不可能比我强。这种自信不是自我催眠的，是你自己在实践中能够实实在在感受出来的。你认识的大佬，如果你看过他的书柜你可能会害怕，真的不是什么天才，天才只是一个系数，只有在量积累的足够多的时候才会有明显的差距。人家也是一本本书读过来的，读的书量大而类杂。你真的没有理由不学习积累。你坚持积累一年，那就是积累的一年的量，不是什么一句话，一个什么捡垃圾的动作，一个什么面试的技巧这种狗屁。</p>
<p>最后希望大家能勿忘初心，保持前行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;其实这篇东西我很想命名成&lt;code&gt;August 11 Progress Report&lt;/code&gt;的，但是很遗憾，工作压力下并没有让我学习
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>【电魂】我对m3服务器的理解（二）</title>
    <link href="http://yoursite.com/2018/07/04/m3server2/"/>
    <id>http://yoursite.com/2018/07/04/m3server2/</id>
    <published>2018-07-04T00:02:17.000Z</published>
    <updated>2018-07-11T00:03:57.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>其实说是参考梦三端游的服务器，不如说更像是同为手游的光影对决的服务器。当然，两边的源码我都在读。除了架构是一样的外，很多细节也不尽相同，当然业务逻辑是不一样的。有一种一次性在做三个项目的感觉（并没有</p>
</blockquote>
<h2 id="MMServer"><a href="#MMServer" class="headerlink" title="MMServer"></a>MMServer</h2><p>每天对着这十几个G代码鼓捣来鼓捣去，从开始的盲人摸象到开始摸出这是一个什么东西了，一些超级好用的工具不说，代码本身越看越有意思。昨天对着新加的一张库表进行了DBServer的底层C++封装，一天大概贡献了几百行C++代码，下班了人都是晕的。虽然是依葫芦画瓢，但是我感觉对DBServer这个服务器已经基本理解了。其实分布式架构，真的也就这样了。我感觉过个一年对架构的理解不会比现在高多少，如果这样混日子过个3年，那不就是「3年大型游戏分布式架构经验」，但是就这样的话，想想不会不甘心么？</p>
<p>底层先是DatabaseDef对表进行简单的定义和注册，然后用宏进行初步封装，抽象出基本的CURD，然后是DBServer的DBPlayerMgr对DBPlayer的个人线程进行内存管理，把查询数据放在DBPlayer层中，而MSGProcess里的Process和Send相当于对DBPlayer内存对database的读和写。这里用的trick就是在有些比如一局游戏结算时，把数据发放到个人线程中去处理。</p>
<p>因为DBServer的结构简单，我又看了下入口的main，发现其实每个服务器进程在启动后都有自己的Debug模式，按下F1即可，比如DBserver就可以实时查看各部分内存占用，或者同步所有Player数据从内存到DB，WorldServer可以选择开关商城功能等。（宏是真的好用，明显地大幅度提升代码可读性）</p>
<p>说DBServer结构简单的原因是因为和它通信的除了一个Database，对于服务器就只有WorldServer。而且通信的方法有很简单，就是对接受data的curd。稍稍复杂的方法都放在了DBPlayer中，主要是Login时的进行内存层的DB读取，然后每读取一个模块就set一个flag，之后通过二进制运算来判断来决定是否让用户进入主界面。（我当初3天没有解决的登录问题貌似就是出在这，那时候是一个开发中的模块在入口逻辑中有人忘记注释那一行就提交到SVN，导致我登录返回值是OK但是停留在登录界面。当时整个人都快崩溃了，断点一天后update整个项目还是报错，还没人鸟我）</p>
<p>端游和手游还是有差别的，比如m3端游这边完全找不到历史战绩的模块，甚至HttpServer内容都很少。因为这里客户端基本上是直接和运维通信，就不走服务器这里，拿数据也直接从运维那里拿。而光影这边基本上是一样，但是有很多内容是客户端-服务器-运维这样走。老大这边对手游这部分的架构还保持不确定的态度，我就有点不太想做了-_-||。</p>
<h2 id="KBEngine"><a href="#KBEngine" class="headerlink" title="KBEngine"></a>KBEngine</h2><p>我看了几天的这个框架，把这个参考bigworld的国内解决方案拿来做入门服务器运维不知道是祸是福。说是文档友好其实已经过期相当一段时间，按照它的getstart的代码七改八改，然而怎么都跑不起来，只能直接用它附带的源码。用它的原因除了是国内环境以外，还是因为它们公司是电魂投资，对我会存在潜在的资源（并不-_-除了一次宣讲会完全没有）。我觉得kbe想要提高知名度和拿到更多的资源，还是需要一款游戏的成功来证明。就好像崩坏3对于unity，wow对于bigworld，仅仅靠一大堆没听过的页游是不行的。</p>
<p>虽然helloworld跑不起来，但是写的时候好处还是看的到的，至少它很对我的相性（还是说我见识少，说不定用过Photon我就不这么想了）。我刚刚fork了b站有人用它写了一个麻将的游戏，有时间去看看。看来还是看视频这种最low又最直接的方法适合我^^（&lt;-这个人真的菜</p>
<p>之前不是写了一个人物demo嘛，其实我一开始还是想把它写成多人的。很多细节就是考虑到多人联机才设计的复杂一些。但是这几天的工作下来，感觉自己一个人要完成的话会吐血到死。但是我并不指望（一开始就）有人会分摊我的工作，这也是我最近的观点，永远不要指望别人做什么，尽量发挥你的主观能动性吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实说是参考梦三端游的服务器，不如说更像是同为手游的光影对决的服务器。当然，两边的源码我都在读。除了架构是一样的外，很多细节也不尽相同，当然业务逻辑是不一样的。有一种一次性在做三个项目的感觉（并没有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="cpp" scheme="http://yoursite.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【电魂】我对m3服务器的理解（一）</title>
    <link href="http://yoursite.com/2018/06/05/m3server/"/>
    <id>http://yoursite.com/2018/06/05/m3server/</id>
    <published>2018-06-04T16:53:27.000Z</published>
    <updated>2018-07-11T00:03:47.494Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>根据MMServer.sln的结构来确认</p>
</blockquote>
<h1 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h1><h2 id="CommonShare"><a href="#CommonShare" class="headerlink" title="CommonShare"></a>CommonShare</h2><p>一些重要的通用方法和工具，一般需要先行编译。</p>
<h2 id="DependModules"><a href="#DependModules" class="headerlink" title="DependModules"></a>DependModules</h2><p>依赖库</p>
<h2 id="ServerBase"><a href="#ServerBase" class="headerlink" title="ServerBase"></a>ServerBase</h2><p>定义了SeBaseServerNew和SeNetworkService，前者用来发送心跳包，注册包，更新连接等方法；后者用于检测网络状态（？</p>
<h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><p>根据策划xml动态生成的c++代码</p>
<h2 id="TestClient"><a href="#TestClient" class="headerlink" title="TestClient"></a>TestClient</h2><p>没看，但是感觉没卵用，现在用u3d客户端直接测试。</p>
<h1 id="SeBaseServer"><a href="#SeBaseServer" class="headerlink" title="SeBaseServer"></a>SeBaseServer</h1><p>所有的服务器都基于一个基础服务器类SeBaseServer，其中包括一些通用功能，比如初始化，更新，以及网络负载均衡等。</p>
<p>启动服务器后，每个server都会启动一个监听窗口，实时打印出服务器的状态，连接情况。</p>
<h2 id="服务器架构"><a href="#服务器架构" class="headerlink" title="服务器架构"></a>服务器架构</h2><p><img src="https://oi3qt7c8d.qnssl.com/m3server.png" alt="这张图可能有点老，但是基本架构不变"></p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>每个Server的目录下有几个固定的文件路径：</p>
<p>xxxServer<br>|<br>├── (D)Logic/GameLogic：           处理业务逻辑<br>├── (D)MSGProcess<br>|          └── (D)yyyServer：      yyyServer的Send和Agent，自定义的Agent用来处理回调（Handle函数）<br>|                    └── (D)Auto： 自动生成的inl，列出需要实现的函数文件头<br>├── (D)Stream：                    流处理，传输统一使用二进制<br>└── xxxServer.h/cpp/-Def.h：       服务器的初始化，以及输出到控制台的信息序列化</p>
<h2 id="AuctionServer"><a href="#AuctionServer" class="headerlink" title="AuctionServer"></a>AuctionServer</h2><p>交易服不太了解，貌似暂时没有用，需要监听服务器端口、WS，连接DS【MySQL】</p>
<h2 id="ChatServer"><a href="#ChatServer" class="headerlink" title="ChatServer"></a>ChatServer</h2><p>单独的聊天服。处理WS中的聊天，需要监听服务器端口、TS，连接DS</p>
<h2 id="CommunityServer"><a href="#CommunityServer" class="headerlink" title="CommunityServer"></a>CommunityServer</h2><p>处理社团相关，需要监听服务器端口、TS，连接DS</p>
<h2 id="ContactServer"><a href="#ContactServer" class="headerlink" title="ContactServer"></a>ContactServer</h2><p>好友服。需要监听服务器端口、TS，连接DS【好友缓存】、DLS、SS</p>
<h2 id="DBLogServer"><a href="#DBLogServer" class="headerlink" title="DBLogServer"></a>DBLogServer</h2><p>日志系统，目前没卵用。监听服务器端口、WS、GS、ContactS、MS、CommunityS、ChatS</p>
<h2 id="DBServer"><a href="#DBServer" class="headerlink" title="DBServer"></a>DBServer</h2><p>连接指定的数据库表，提供服务器处理服务。监听服务器端口、TS、ContactS</p>
<h2 id="GlobalServer"><a href="#GlobalServer" class="headerlink" title="GlobalServer"></a>GlobalServer</h2><p>全局服。监听服务器端口、WS、LS、HttpS、MS、连接DS、NodeJSHttp集群、MySQL【全服账户信息】</p>
<h2 id="LoginServer"><a href="#LoginServer" class="headerlink" title="LoginServer"></a>LoginServer</h2><p>登录服集群。连接GS</p>
<h2 id="MatchServer"><a href="#MatchServer" class="headerlink" title="MatchServer"></a>MatchServer</h2><p>匹配服？监听服务器端口、RS、TS、HttpS、DLS、SS</p>
<h2 id="RaceServer"><a href="#RaceServer" class="headerlink" title="RaceServer"></a>RaceServer</h2><p>比赛服，处理对战时的逻辑。TCP监听，连接MS</p>
<h2 id="SwitchServer"><a href="#SwitchServer" class="headerlink" title="SwitchServer"></a>SwitchServer</h2><p>听说是取代TS的一种方案，让切换服务器的时候绕开TS。监听服务器端口、MS、ContactS、WS</p>
<h2 id="TcpServer"><a href="#TcpServer" class="headerlink" title="TcpServer"></a>TcpServer</h2><p>连接检测，socket。监听TS</p>
<h2 id="TownServer"><a href="#TownServer" class="headerlink" title="TownServer"></a>TownServer</h2><p>中心Server，基本上所有的Server的中转站。监听服务器端口、TS，连接WS、MS、DS、ContactS、CommunityS、ChatS</p>
<h2 id="WorldServer"><a href="#WorldServer" class="headerlink" title="WorldServer"></a>WorldServer</h2><p>逻辑服/支持水平扩展。监听服务器端口、TS、HttpS，连接GS、DS【逻辑缓存】、Redis【位置信息】、DLS、AS（已注释）、SS</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据MMServer.sln的结构来确认&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Common&quot;&gt;&lt;a href=&quot;#Common&quot; class=&quot;headerlink&quot; title=&quot;Common&quot;&gt;&lt;/a&gt;Common&lt;/h1&gt;&lt;h
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="cpp" scheme="http://yoursite.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【闲聊】How to Deal with the Poor</title>
    <link href="http://yoursite.com/2018/05/25/how-to-deal-with-the-poor/"/>
    <id>http://yoursite.com/2018/05/25/how-to-deal-with-the-poor/</id>
    <published>2018-05-25T09:36:12.000Z</published>
    <updated>2018-05-25T10:02:50.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何处理穷人之灭霸做的好——看油管节目后引发的思考</p>
</blockquote>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>单纯的从历史纵向来看，人类发展史从人类进入文明社会到现在高度文明，不管是人口数量还是人口质量都发生了翻天覆地的变化。但是有一点几乎不变，就是底层劳动人民所得几乎不变（兑换成粮食来计算）甚至目前一些地区所得不如古巴比伦时代人民所得多。造成这一现象的原因要从长说起。</p>
<p>我们知道在地球上土地有限，食物产出量随时间是线性增长，而人口是指数增长的。每当人口数量超过环境容纳量（K值）时，就会出现大规模人口锐减的情况，比如饥荒、瘟疫、战争、暴乱。这时，如何处理低端人口就成为每一个王国要处理的问题。有一派人认为应该要保持压迫，因为根据需求理论，给穷人资源只会产生更多的无用人口，这也是历史上最多的做法，当然还有另一派人的救济做法，不过这本来就是违反生物学的做法，当然以失败告终。</p>
<p>那穷人是不是就应该去死呢？这听起来很不人道，因为这个理论最初就是用在人的身上的。后来一个叫达尔文的家伙把这个理论推广到动物身上，控制某一个种群的数量，是不是就听起来没那么残酷了？</p>
<p>因此回到原来的问题，总结一下穷人永远是穷人的原因，这个现在还包括穷人永远存在，穷人收入几乎不变。总的来说，人首先要满足食物和生育，因此只要有多余的收入，穷人就会多生孩子，然后重新变得很穷，因此就是一个资源变成人口的过程。（哪怕穷人在某一个时间点集体蒸发，剩余的富人也很快人口上升，最终又会两极分化，重新演变成原来的过程。</p>
<p>而底端想往上爬是一件几乎不可能的事情。不用说既得利益者手里有一大堆资源可以来搞你，底端本身相互之间就存在各种斗争，而且这种斗争是为了一点点资源而你死我活的。</p>
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>地球上的人口也就是近代史这几百年才从几亿变为60亿的，究其原因为随着科技的发展，粮食产出的大幅度提高，穷人有能力和意愿养活更多的孩子，战争和疾病也得到了抑制；然而底层的情况仍然按照规律运行着。穷人仍然存在，而且一直存在。</p>
<p>近代也有一些反对残酷做法的声音，他们举的例子如下：第一，人们现在生育的欲望开始降低（比如日本虽然发达，但是人口生育低，已经进入老龄化）（难怪有人说避孕套是人类历史上最伟大的发明）；第二，粮食等资源得到的科技的帮助（杂交等）获得极大的发展，不存在因为资源不足而暴乱的情况……</p>
<p>我相信这些问题马克思应该也是研究过的，在共产主义的最终形态里，是没有家庭这一概念的，你需要性就会给你性，你需要孩子就分配给你孩子，因为公共资源是极大富足的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如何处理穷人之灭霸做的好——看油管节目后引发的思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历史&quot; class=&quot;headerlink&quot; title=&quot;历史&quot;&gt;&lt;/a&gt;历史&lt;/h2&gt;&lt;p&gt;单纯的从历史纵向来看
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>我又来找工作了^^</title>
    <link href="http://yoursite.com/2018/05/22/resume/"/>
    <id>http://yoursite.com/2018/05/22/resume/</id>
    <published>2018-05-22T01:30:31.000Z</published>
    <updated>2018-05-25T10:09:43.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>姓名：金云天 / 现居住地：杭州</p>
<p>学校：杭州电子科技大学/软件工程/大四应届生</p>
<p>联系方式：<code>MTc3NjQ1OTE0NTA=</code></p>
<p>邮箱：<em>xana.awaken@gmail.com</em></p>
<p>需求职位：<em>U3D客户端</em> 或其他相关职位</p>
<p>我从去年辞职以后自学了半年多的游戏设计、常用编程模式、Unity3d和Shader，有一定的图形学基础，目标是写一个能用到所学内容的独立游戏，并且能够一直保持更新扩展维护。</p>
<p>能熟练使用Unity3d，熟悉人物模型，物理引擎、UGUI、C#脚本，写过很多小游戏；会写一定程度的Unity-Shader，了解各种光的计算、卡通风格的渲染、广告牌等技术。</p>
<p>熟悉Git-flow工作流，能有效快速的处理bug~（前同事用了都说好</p>
<p>我自学能力很强，乐意接受并钻研分享新技术，以前写Web和iOS，能够熟练使用 Python/NodeJS/Swift/OC 每种至少有一个商业应用或者比赛作品，轻度Linux/Vim党。个人控制欲也比较强，写项目希望能完整掌握所有的细节。</p>
<p>欢迎推荐~HR请通过邮箱或者其他方式联系我~</p>
<h2 id="U3D游戏相关经历"><a href="#U3D游戏相关经历" class="headerlink" title="U3D游戏相关经历"></a>U3D游戏相关经历</h2><p>目前使用U3D进行开发，目前在做的作品demo链接：<a href="http://mikumiku.com.cn/2018/04/29/CharactorSimulator/" target="_blank" rel="external">交互模拟</a> <a href="http://mikumiku.com.cn/2018/05/16/May6/" target="_blank" rel="external">更新1</a>，（开源模型/标准库动画/触发检测/ScriptableObject/Shader/UGUI 运行环境：PC + U3D）</p>
<p>自学过一段时间的图形学，学习过Directx11（读的是原版龙书），会写一些简单的shader，了解性能优化。ShaderLab demo链接：<a href="http://mikumiku.com.cn/2018/05/08/AntiEffect/" target="_blank" rel="external">AntiEffect</a>，（自定义顶点/片源着色器 运行环境：PC + U3D）</p>
<h2 id="其他游戏经历"><a href="#其他游戏经历" class="headerlink" title="其他游戏经历"></a>其他游戏经历</h2><p>使用缘之空游戏内的素材写过一个半成品的iOS游戏（语言使用swift2）。游戏部分截图：<a href="http://mikumiku.com.cn/2016/01/12/worst_code_of_year/" target="_blank" rel="external">YZK</a></p>
<p>参加过三次hackathon，使用NodeJS快速开发游戏主要逻辑和长短请求处理。最好的一次成绩：<a href="https://mp.weixin.qq.com/s/I2_spfIfHM8QcuYT3Jh_PQ" target="_blank" rel="external">【链接】2016“龙驰杯”浙江高校Hackathon大赛圆满落幕</a> 作品源码：<a href="https://github.com/Gklub/DemoX_Model" target="_blank" rel="external">DemoX</a></p>
<p>大一写过五六个使用RPGmaker制作的游戏，其中最长的一个花了两个月整理素材，还有一个帮助姬友实现小说剧情化。</p>
<h2 id="与游戏无关的经历"><a href="#与游戏无关的经历" class="headerlink" title="与游戏无关的经历"></a>与游戏无关的经历</h2><blockquote>
<p>仅证明自学能力</p>
</blockquote>
<p>使用Objective-C写过iOS商业应用 集成支付宝/微信/QQ，独立上传过App Store。 App Store应用名：水南照相馆；文档主页：<a href="http://mikumiku.com.cn/2016/03/20/snzxg/" target="_blank" rel="external">水南照相馆技术支持文档</a>。之后还尝试用ReactNative重写一次，坑太多（RN版本更新太快），复刻界面后不了了之。</p>
<p>大三上学期使用python的flask框架写了一个为实验班搭建的论坛，后端技术栈 Python3 + Flask + Mysql，开发与部署平台 Linux / Supervisor + Nginx + uWsgi，自动化运维+测试。项目GitHub地址：<a href="https://github.com/imxana/ec_forum" target="_blank" rel="external">Experimental_Class_Forum_Backend</a></p>
<p>大三下写过一个跨国公司商业用python-django项目。原公司最初使用 svn/django-fbv 经个人坚持后转型 git-flow/django-cbv 最大的收获是 从0到1掌握Django，通过读Django源码深入解读cbv系统（view的结构组织和生命周期）和模板系统，并掌握前端基本技能（jq+Bootstrap3）。网站实现国际化，并至少支持两种语言，官网：<a href="http://www.ebizbank.com" target="_blank" rel="external">ebizbank</a></p>
<p>大四毕设，学车和看书。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人简介&quot;&gt;&lt;a href=&quot;#个人简介&quot; class=&quot;headerlink&quot; title=&quot;个人简介&quot;&gt;&lt;/a&gt;个人简介&lt;/h2&gt;&lt;p&gt;姓名：金云天 / 现居住地：杭州&lt;/p&gt;
&lt;p&gt;学校：杭州电子科技大学/软件工程/大四应届生&lt;/p&gt;
&lt;p&gt;联系方式：&lt;co
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【Unity】May 6 Study Progerss</title>
    <link href="http://yoursite.com/2018/05/16/May6/"/>
    <id>http://yoursite.com/2018/05/16/May6/</id>
    <published>2018-05-16T05:50:31.000Z</published>
    <updated>2018-06-04T16:52:17.270Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>动图（大图）杀猫，流量预警</p>
</blockquote>
<h2 id="AntiShader"><a href="#AntiShader" class="headerlink" title="AntiShader"></a>AntiShader</h2><p>Last Update: <a href="http://mikumiku.com.cn/2018/05/08/AntiEffect/" target="_blank" rel="external">2018/05/08</a></p>
<ul>
<li>改进了反色Shader，现在物体会被平行光源/点光源影响了</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/AntiSpecular.gif" alt="AntiSpecular.gif"></p>
<h2 id="CharactorSimulator"><a href="#CharactorSimulator" class="headerlink" title="CharactorSimulator"></a>CharactorSimulator</h2><p>Last Update: <a href="http://mikumiku.com.cn/2018/04/29/CharactorSimulator/" target="_blank" rel="external">2018/04/29</a></p>
<ul>
<li>添加了物品栏满后无法拾取的互动提示</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/PackageFullTips.gif" alt="PackageFullTips.gif"></p>
<ul>
<li>和NPC互动会控制玩家位置</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/NPCTalking.gif" alt="NPCTalking.gif"></p>
<ul>
<li><p>NPC在对话一定范围内会朝向玩家</p>
</li>
<li><p>添加快速转身</p>
</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/QuickTurn.gif" alt="QuickTurn.gif"></p>
<ul>
<li>设计一个玩家技能</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/SkillDemo.gif" alt="SkillDemo.gif（TODO"></p>
<h2 id="hackathon设计构思（备胎"><a href="#hackathon设计构思（备胎" class="headerlink" title="hackathon设计构思（备胎"></a>hackathon设计构思（备胎</h2><p>写一个123木头人的即时游戏</p>
<p>角色：主机（蒙眼人），其他玩家（木头人，自由观察者）</p>
<p>开始条件：主机开始</p>
<p>结束条件：主机消灭其他玩家，或者被其他玩家消灭</p>
<p>意外处理：无重连，玩家掉线即被消灭</p>
<ul>
<li>基础玩法</li>
</ul>
<p>场地：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">         人          人 人 人</div><div class="line">========================================</div><div class="line">   |               人↓              |</div><div class="line">  ===================================</div></pre></td></tr></table></figure>
<p>设计主机的转身cd，转身会释放一个很帅的反色球，在球内移动的玩家会被消灭（或设置重力掉到下一个败者场景）</p>
<p>再次转身收回反色球</p>
<ul>
<li>进阶玩法</li>
</ul>
<p>把主机设计成ai，使用生存模式，设计道具使玩家竞争（香蕉皮，炸弹，固定的障碍等</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;动图（大图）杀猫，流量预警&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;AntiShader&quot;&gt;&lt;a href=&quot;#AntiShader&quot; class=&quot;headerlink&quot; title=&quot;AntiShader&quot;&gt;&lt;/a&gt;AntiShad
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="ShaderLab" scheme="http://yoursite.com/tags/ShaderLab/"/>
    
  </entry>
  
  <entry>
    <title>【ShaderLab】时空断裂效果</title>
    <link href="http://yoursite.com/2018/05/08/AntiEffect/"/>
    <id>http://yoursite.com/2018/05/08/AntiEffect/</id>
    <published>2018-05-08T03:33:05.000Z</published>
    <updated>2018-05-08T04:24:45.223Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>居然写出来了，没想过能写出来</p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://oi3qt7c8d.qnssl.com/AntiEffect.gif" alt="AntiEffect.gif"></p>
<p>AntiEffect.shader<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">Shader "Custom/AntiTexture"</div><div class="line">&#123;</div><div class="line">	Properties</div><div class="line">	&#123;</div><div class="line">		_MainTex ("Texture", 2D) = "white" &#123;&#125;</div><div class="line">		[Enum(Const,1,Gradient,2)] _RenderType ("Render Type", Int) = 1</div><div class="line">		[Enum(AntiConst,1,AntiInverse,2)] _ColorType ("Color Type", Int) = 1</div><div class="line">		_Radius ("Radius", Range(0, 10)) = 0.0</div><div class="line">		_StartPos ("Start Position", Vector) = (0, 0, 0, 0)</div><div class="line">	&#125;</div><div class="line">	SubShader</div><div class="line">	&#123;</div><div class="line">		Pass</div><div class="line">		&#123;</div><div class="line">			CGPROGRAM</div><div class="line">			#pragma vertex vert</div><div class="line">			#pragma fragment frag</div><div class="line"></div><div class="line">			sampler2D _MainTex;</div><div class="line">			half _Radius;</div><div class="line">			fixed3 _StartPos;</div><div class="line">			int _RenderType;</div><div class="line">			int _ColorType;</div><div class="line"></div><div class="line"></div><div class="line">			#include "UnityCG.cginc"</div><div class="line"></div><div class="line">			struct a2v</div><div class="line">			&#123;</div><div class="line">				float4 vertex : POSITION;</div><div class="line">				float2 uv : TEXCOORD0;</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			struct v2f</div><div class="line">			&#123;</div><div class="line">				float2 uv : TEXCOORD0;</div><div class="line">				float4 vertex : SV_POSITION;</div><div class="line">				float3 worldPos : TEXCOORD1;</div><div class="line">			&#125;;</div><div class="line"></div><div class="line"></div><div class="line">			v2f vert (a2v v)</div><div class="line">			&#123;</div><div class="line">				v2f o;</div><div class="line">				o.vertex = UnityObjectToClipPos(v.vertex);</div><div class="line">				o.worldPos = mul(unity_ObjectToWorld,  v.vertex);</div><div class="line">				o.uv = v.uv;</div><div class="line">				return o;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			bool inRange(float3 pos)</div><div class="line">			&#123;</div><div class="line">				return distance(pos, _StartPos.xyz) &lt; _Radius;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			fixed4 frag (v2f i) : SV_Target</div><div class="line">			&#123;</div><div class="line">				fixed4 col = tex2D(_MainTex, i.uv);</div><div class="line"></div><div class="line">				// improve performance</div><div class="line">				if (_RenderType == 1)</div><div class="line">				&#123;</div><div class="line">					if (_ColorType == 2)</div><div class="line">					&#123;</div><div class="line">						col = 1 - col;</div><div class="line">					&#125;</div><div class="line">					return col;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				switch(_ColorType)</div><div class="line">				&#123;</div><div class="line">					case 1:</div><div class="line">						if (inRange(i.worldPos))</div><div class="line">						&#123;</div><div class="line">							col = 1 - col;</div><div class="line">						&#125;</div><div class="line">						break;</div><div class="line">					case 2:</div><div class="line">						if (!inRange(i.worldPos))</div><div class="line">						&#123;</div><div class="line">							col = 1 - col;</div><div class="line">						&#125;</div><div class="line">						break;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				return col;</div><div class="line">			&#125;</div><div class="line">			ENDCG</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote>
<p>复制粘贴在车上和旅馆里用手机打的字：</p>
</blockquote>
<p>想要实现的效果</p>
<p>全局断裂 效果</p>
<p>一开始是考虑这样一个效果，从某个点（比如player的中心）开始生成一个逐渐变大的球，在球范围内的物体开始产生效果（比如反色）</p>
<p>直接效果</p>
<p>对于一些简单的情况当然是可以做到的，比如物体A要被断裂，判断断裂球是否与A碰撞，从碰撞时在物体的shader传入几个参数（物体a的中心和断裂中心以计算断裂直线轨迹，还有断裂传播速度以获取半径），不过由于每帧要判断顶点或片元是否处于断裂球内，这样shader的计算量会变得相当大，可能会遇到一个性能瓶颈。</p>
<p>还有一个问题，如果只是简单的贴图shader还好，对于本身shader就很复杂的物体改写shader也是一件很痛苦的事情。或者说构建很复杂的物体，比如一个简单的人物模型上面就有几十几百个子物体，要这样全部改一遍根本不可能。</p>
<p>而且material和shader是多对一的关系，基本上就告别共用material了。（后记：对于Unity来说，shader即材质，没有更换shader的说法</p>
<p>间接效果</p>
<p>还有一个更加简单的办法，就是使用屏幕后处理。由名思义就是在所有渲染完成，呈现最终屏幕上的最终效果后，再进行最终的处理。</p>
<p>这样就简单了，因为只是处理一个tex2d，只要传入一个平面坐标和扩散速度，这个shader写起来就没有任何难度可言。但是这样做就不好控制深度问题，比如我不想影响被A挡住的B，但是不可能，因为先屏幕后处理再渲染B的话会出现诡异的位置情况。</p>
<p>（补个图）<br><img src="https://oi3qt7c8d.qnssl.com/AntiScreen.gif" alt="AntiScreen.gif"></p>
<p>这大概就是一个取舍问题。</p>
<p>无论如何，直接效果还是需要进行实验的，大致进度如下：（回去用那个猫模型为例）</p>
<p>反色材质shader → 动态反色材质shader → 加上触发器 → 加上传入参数功能</p>
<p>（然后摸了一周）</p>
<blockquote>
<p>这是写完后的想法：</p>
</blockquote>
<p>构思这个东西断断续续大概花了一周的时间，虽然一个很简单的想法，但是写起来不知道为什么那么痛苦。特别是shader的Debug，因为shader几乎没有Debug的方法，只能凭经验判断是哪里出了错。而且shaderlab对于初学者极不友好，我是在读了大概不知道多少个例子（而且是很陈旧的例子）之后，在脑子中推断语法，还要时时刻刻考虑性能问题。上面的代码我给出了一个<code>_RenderType</code>，从而在非碰撞时，设计一个能够跳过片元着色器的逻辑判断的分支。</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>感谢下列文章，虽然无法根本解决问题，但是为我提供了宝贵的思考价值：</p>
<p>【链接】UnityShader使用枚举切换整体色调<br><a href="https://blog.csdn.net/chy555chy/article/details/79065485" target="_blank" rel="external">https://blog.csdn.net/chy555chy/article/details/79065485</a></p>
<p>【链接】【猫猫的UnityShader之旅】之使用顶点的世界坐标<br><a href="https://blog.csdn.net/dbtxdxy/article/details/45679371" target="_blank" rel="external">https://blog.csdn.net/dbtxdxy/article/details/45679371</a></p>
<p>【链接】unity几种优化建议<br><a href="https://blog.csdn.net/ElyXiao/article/details/51980863" target="_blank" rel="external">https://blog.csdn.net/ElyXiao/article/details/51980863</a></p>
<p>以及《Unity Shader入门精要》，从附带的代码中解决了我绝大多数的困惑</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;居然写出来了，没想过能写出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://oi3
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Shader" scheme="http://yoursite.com/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】人物交互</title>
    <link href="http://yoursite.com/2018/04/29/CharactorSimulator/"/>
    <id>http://yoursite.com/2018/04/29/CharactorSimulator/</id>
    <published>2018-04-29T01:21:39.000Z</published>
    <updated>2018-05-08T04:19:58.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>动图杀猫，流量预警</p>
</blockquote>
<p>手撸了一个人物互动的例子，目前已经实现了一部分功能，一些看似简单的东西还是需要考虑很多东西的。这时候之前学到的东西都有用了，比如卡通shader和常用的设计模式等等，都帮助了我很多，同时下了一堆例子来别人是怎么设计库存的，又感觉打开了新世界的大门。通过模仿别人的设计模式来设计自己的功能，然后独立设计子功能再对照他人的设计，想想某个局部为什么要这样设计，都是有益的。</p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>以下列出了目前实现的功能，项目目前放在GitHub上</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>场景中的Prefab</p>
<p><input type="checkbox" disabled checked> 基本场景，人物模型，光</p>
<p><input type="checkbox" disabled checked> 人物控制，人物物理效果，自动追踪镜头</p>
<p><input type="checkbox" disabled checked> 几种不同类型的互动道具实例</p>
<p><input type="checkbox" disabled checked> 互动道具简单的物体效果，只禁止xz轴旋转（思考？</p>
<p><input type="checkbox" disabled checked> 互动NPC</p>
<p><input type="checkbox" disabled> 互动NPC的简单自发行为</p>
<h3 id="简单拓展"><a href="#简单拓展" class="headerlink" title="简单拓展"></a>简单拓展</h3><p>用于测试互动效果的实际情况</p>
<p><input type="checkbox" disabled checked> 显示player2(npc)的视角，添加视角切换功能</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-switchview.gif" alt="第二视角"></p>
<h3 id="UI功能"><a href="#UI功能" class="headerlink" title="UI功能"></a>UI功能</h3><p>这部分目前仅仅是设置panel的active属性，后面要考虑做一个完整的controller来管理所有的面板，控制depth等</p>
<p><input type="checkbox" disabled checked> [H] 显示帮助</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-ui-help.gif" alt="显示帮助"></p>
<p><input type="checkbox" disabled checked> [T] 显示提示栏</p>
<p><input type="checkbox" disabled checked> [I] 显示库存</p>
<h3 id="道具互动"><a href="#道具互动" class="headerlink" title="道具互动"></a>道具互动</h3><p><input type="checkbox" disabled checked> [R] 显示可互动的范围</p>
<p><input type="checkbox" disabled checked> 标记互动范围的可互动物体，用高亮边缘着色</p>
<p><input type="checkbox" disabled checked> 高亮边缘着色时，物体上方同时提示互动按键</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-reachpick.gif" alt="互动范围"></p>
<p><input type="checkbox" disabled checked> [C] 检查互动范围内的物体，用另一种高亮边缘着色</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-check.gif" alt="检查"></p>
<p><input type="checkbox" disabled checked> [1-9，0，MouseWheel] 选定当前道具栏内的道具</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-itemselect.gif" alt="选择道具"></p>
<p><input type="checkbox" disabled checked> [E] 拾取可互动范围内的一个物体</p>
<p><input type="checkbox" disabled checked> [Q] 丢弃当前道具栏选定的道具</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-itemdiscard.gif" alt="丢弃道具"></p>
<p><input type="checkbox" disabled checked> [F] 使用当前道具栏选定的道具</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-itemuse.gif" alt="丢弃道具"></p>
<h3 id="人物互动"><a href="#人物互动" class="headerlink" title="人物互动"></a>人物互动</h3><p><input type="checkbox" disabled> bh3式人物互动效果</p>
<h2 id="扯淡"><a href="#扯淡" class="headerlink" title="扯淡"></a>扯淡</h2><blockquote>
<p>关于提高自学效率</p>
</blockquote>
<p>Richard Feynman说如果你想成为天才，就在你的头脑里随时准备好12个需要解决的问题。每当你的生活中发生一件事，就把这些问题拿出来检查一下，看其中是否有问题会得到进展。我觉得普通人都不缺乏解决问题的能力，缺乏的还是发现问题的能力。当然并不需要像Feynman准备那么多问题（一般人也不具备那样发掘问题的能力），至少做到不断地在你的todolist上添加一些挑战性的事情，然后从日常的其他事件中不经意的就能够解决一些。（甚至有一些通过简单的精神训练就可以）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;动图杀猫，流量预警&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手撸了一个人物互动的例子，目前已经实现了一部分功能，一些看似简单的东西还是需要考虑很多东西的。这时候之前学到的东西都有用了，比如卡通shader和常用的设计模式等等，都帮助了我很多，同时
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】April 21 Daily</title>
    <link href="http://yoursite.com/2018/04/21/unreal_renderring/"/>
    <id>http://yoursite.com/2018/04/21/unreal_renderring/</id>
    <published>2018-04-21T04:12:17.000Z</published>
    <updated>2018-04-29T01:24:06.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>老了再去思考怎么安逸吧</p>
</blockquote>
<h1 id="Assets-store"><a href="#Assets-store" class="headerlink" title="Assets store"></a>Assets store</h1><p>unity官网的素材商店已经几乎处在dead的边缘，不管是实体素材还是脚本素材的贵的一比，而且作者无暇维护。好多高评分的素材都是尼玛四年前五年前的评论，而unity早就更新换代几百遍了。话虽如此，我还是花了20美刀买了两个脚本（Dynamic  bones，里面真的就是两个脚本），真的肉痛，虽然想过用盗版，但还是想想算了，难得的作者还在更新，兼容性和文档又这么好的素材也难得。目前的unity开发者在assets store花上几万块的人也不在少数，但对于初学者来说可能是一笔负担。幸好商店里的免费素材足够多（当然很多都是为完整版打广告的预览版），可以让你前期过渡足够的时间。使用商店里的素材的好处就是你可以让素材跟着账号走，不需要考虑版权问题等，说到底就是图个心安。</p>
<h1 id="使用mmd模型"><a href="#使用mmd模型" class="headerlink" title="使用mmd模型"></a>使用mmd模型</h1><p>unity是无法直接使用mmd导出的.pmx人物模型的，但是有一个日本大神写了一个unity插件<a href="http://stereoarts.jp" target="_blank" rel="external">MMD4Mecanim</a>可以把.pmx完全转化为unity的人物model。我们可以下载一些开源的mmd模型，例如绊爱（目前唯一开源的YouTuber形象），v家（模型开源但是需要有账号）进行尝试。插件下好后是一个 .unitypachage，导入后项目内原本不被识别的.pmx模型文件，其inspector界面就变成了一个用户协议签署界面，同意下一步后就是一个model的生成配置界面，这里可以导入.vmd文件来生成，这样就是一个完整的mmd动画（音乐另配）。</p>
<p>不用担心兼容性的问题，这里的mmd模型已经完全变成Unity的人物model了，注意把模型的Rig类型改成humanoid（旧版动画是Legacy）。这里可以利用骨骼脚本实现乳摇啊、飘逸裙底啊的效果（没错，就是那个20美刀的脚本）至于调的效果如何，这是一个强迫症的问题。当然你调的越仔细效果越逼真（可以玩一天/捂脸</p>
<p><img src="https://oi3qt7c8d.qnssl.com/aichan.gif" alt="用绊爱替换U酱，这里还需要给对zz妹子的头发使用骨骼脚本设置参数使其变得柔软，再对头部添加碰撞器避免穿模"></p>
<h1 id="卡通风格的Shader"><a href="#卡通风格的Shader" class="headerlink" title="卡通风格的Shader"></a>卡通风格的Shader</h1><p>卡通类型的人物不需要真实的光影效果，他们都有两个很明显的特点：1.人物边缘有明显的描线或者其他效果；2.大片面积的相同颜色。实现这两个效果实际上并不复杂，仅需两个简单的pass即可完成，这里简单提供下思路：1.边缘上的点扩展其法线（向量归一扩展后再归一）2.把高光判断条件从曲线型函数改为区间函数。</p>
<p>渲染部分的内容已经没必要继续往下看了，现在还是需要完成一个完整的功能，这几天一直在思考这个（反正有需要的时候再读</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;老了再去思考怎么安逸吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Assets-store&quot;&gt;&lt;a href=&quot;#Assets-store&quot; class=&quot;headerlink&quot; title=&quot;Assets store&quot;&gt;&lt;/a&gt;Asse
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Shader" scheme="http://yoursite.com/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>【ShaderLab】光</title>
    <link href="http://yoursite.com/2018/04/16/light/"/>
    <id>http://yoursite.com/2018/04/16/light/</id>
    <published>2018-04-16T08:38:35.000Z</published>
    <updated>2018-04-18T04:19:25.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>n个月后重读《Unity Shader入门精要》（第六章</p>
</blockquote>
<h1 id="光与材质"><a href="#光与材质" class="headerlink" title="光与材质"></a>光与材质</h1><p>首先要明白一件事情，物体的呈现的颜色不是物体的性质。物体的颜色取决于物体的材质和光。</p>
<p>而光有分为好几种，一是最简单的平行光，它没有所谓的光源，光强均等，是一种理想模型（例如狭义上的太阳光），二是点光源，例如基本上所有的灯光都是点光源，它的光强与它有限的距离成反比，还有其他衍生下去的光类型，不外乎这几种性质：照射距离，光的强度（颜色）。</p>
<p>物体的材质包括对各个颜色分量的处理程度，因此对某个颜色处理得更宽容，物体就偏向呈现那个颜色。还包括反射率，漫反射率，和环境光率，这些都直接影响到物体呈现的效果。</p>
<p>物体除了被光直接照亮，反射到摄像机中，还有其他的光线。例如密室中一个物体被聚光灯照亮，背部也不是完全的黑暗。这就是部分散射光和环境光的作用。总体来说，「从摄像机看到某位置的」光=反射光+散射光+环境光，这有一个具体的公式，有兴趣的可以查阅相关资料</p>
<h1 id="标准光照模型（数学基础"><a href="#标准光照模型（数学基础" class="headerlink" title="标准光照模型（数学基础"></a>标准光照模型（数学基础</h1><p>裴祥风（Bui Tuong Phong）提1975年出的的标准光照模型，基本方法是把进入摄像机的光线分为四个部分，每个部分用各自的方法计算贡献度。由简单至复杂陈列如下：</p>
<h2 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h2><p>环境光用于描述所有其他的间接光照，但在标准光照模型中，通常使用一个全局变量环境光来近似模拟间接光照：</p>
<script type="math/tex; mode=display">c_{ambiet}\,=\,g_{ambiet}</script><h2 id="自发光"><a href="#自发光" class="headerlink" title="自发光"></a>自发光</h2><p>光线可以由光源直接进入摄像机而不进行反射。自发光的表面并不会照亮其他物体，只是使自身看起来更亮而已。计算时直接使用材质的自发光颜色：</p>
<script type="math/tex; mode=display">c_{emissive}\,=\,m_{emissive}</script><h2 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h2><p>漫反射光照符合兰伯特定律（Lambert’s law）：反射光线强度与表面法线和光源方向间夹角的余弦成正比。因此漫反射部分计算如下：</p>
<script type="math/tex; mode=display">c_{diffuse} = ( c_{light} · m_{diffuse} )\max(0, \ n·l)</script><p>其中$c_{light}$光源颜色，$m_{diffuse}$为材质的漫反射颜色，$n$为表面法线，$l$为指向光源的单位矢量</p>
<h2 id="高光反射"><a href="#高光反射" class="headerlink" title="高光反射"></a>高光反射</h2><p>这里的高光反射都是经验模型，不符合真实世界情况。它用于计算那些镜面反射的光线，使物体看起来比较有光泽。</p>
<p>已知表面法线$n$，光源方向$l$，视角方向$v$这三个矢量，可以推出第四个矢量反射方向$r$：</p>
<script type="math/tex; mode=display">r = 2(n·l)n-l</script><p>这样就可以利用Phone模型，计算高光反射部分如下</p>
<script type="math/tex; mode=display">c_{specular} = ( c_{light} · m_{specular} )\max(0, v·r) ^{m_{gloss}}</script><p>其中$c_{light}$为光源颜色和强度， $m_{specular}$为材质的高光反射颜色。$m_{gloss}$为材料的光泽度（gloss），也成为反光度（shininess），$m_{gloss}$越小，亮点就越大。</p>
<p>Blinn使用了一个更简单的修改方法来得到类似的效果，它的基本思想是避免计算反射方向$r$。因此引入一个新的矢量$h$，它是通过$v$和$l$的取平均后再归一得到的，即</p>
<script type="math/tex; mode=display">h = \frac{v+l}{|v+l|}</script><p>然后使用$n$和$h$之间的夹角进行计算</p>
<script type="math/tex; mode=display">c_{specular} = ( c_{light} · m_{specular} )\max(0, n·h) ^{m_{gloss}}</script><p>在硬件实现时如果摄像机和光源足够近（$v$和$l$都是定值，因此$h$是常量），Blinn模型会更快。如果$v$和$l$不是定值时Phong模型可能更快一点。Blinn方法由于简化计算从而在某些情况可能更快，而且在一些情况下更符合实验结果。但是注意，这两种光照模型都是经验模型，不应该认为Blinn是『正确的』Phong模型的近似。</p>
<p>标准光照模型是一个经验模型，因为裴祥风先提出、Blinn的方法简化计算，因此这种模型称为Blinn-Phone模型。</p>
<h1 id="实现（Unity-Shader"><a href="#实现（Unity-Shader" class="headerlink" title="实现（Unity Shader"></a>实现（Unity Shader</h1><h2 id="漫反射光照模型"><a href="#漫反射光照模型" class="headerlink" title="漫反射光照模型"></a>漫反射光照模型</h2><p>上一节我们给出漫反射部分的计算公式：</p>
<script type="math/tex; mode=display">c_{diffuse} = ( c_{light} · m_{diffuse} )\max(0, \ n·l)</script><ul>
<li>saturate(x)函数把x截取在[0,1]内</li>
</ul>
<h3 id="逐顶点光照"><a href="#逐顶点光照" class="headerlink" title="逐顶点光照"></a>逐顶点光照</h3><p>DiffuseVertexLevel.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">Shader "Unity Shaders Book/Chapter 6/Diffuse Vertex-Level" &#123;</div><div class="line">  Properties &#123;</div><div class="line">    _Diffuse ("Diffuse", Color) = (1, 1, 1, 1)</div><div class="line">  &#125;</div><div class="line">  SubShader &#123;</div><div class="line">    Pass &#123;</div><div class="line">      Tags &#123; "LightMode"="ForwardBase" &#125;</div><div class="line"></div><div class="line">      CGPROGRAM</div><div class="line"></div><div class="line">      #pragma vertex vert</div><div class="line">      #pragma fragment frag</div><div class="line"></div><div class="line">      #include "Lighting.cginc"</div><div class="line"></div><div class="line">      fixed4 _Diffuse;</div><div class="line"></div><div class="line">      struct a2v &#123;</div><div class="line">        float4 vertex : POSITION;</div><div class="line">        float3 normal : NORMAL;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      struct v2f &#123;</div><div class="line">        float4 pos : SV_POSITION;</div><div class="line">        fixed3 color : COLOR;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      v2f vert(a2v v) &#123;</div><div class="line">        v2f o;</div><div class="line">        // Transform the vertex from object space to projection space</div><div class="line">        o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</div><div class="line"></div><div class="line">        // Get ambient term</div><div class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</div><div class="line"></div><div class="line">        // Transform the normal from object space to world space</div><div class="line">        fixed3 worldNormal = normalize(mul(v.normal, (float3x3)_World2Object));</div><div class="line">        // Get the light direction in world space</div><div class="line">        fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz);</div><div class="line">        // Compute diffuse term</div><div class="line">        fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));</div><div class="line"></div><div class="line">        o.color = ambient + diffuse;</div><div class="line"></div><div class="line">        return o;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">        return fixed4(i.color, 1.0);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ENDCG</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  FallBack "Diffuse"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="逐像素光照"><a href="#逐像素光照" class="headerlink" title="逐像素光照"></a>逐像素光照</h3><p>DiffusePixelLevel.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">Shader "Unity Shaders Book/Chapter 6/Diffuse Pixel-Level" &#123;</div><div class="line">  Properties &#123;</div><div class="line">    _Diffuse ("Diffuse", Color) = (1, 1, 1, 1)</div><div class="line">  &#125;</div><div class="line">  SubShader &#123;</div><div class="line">    Pass &#123;</div><div class="line">      Tags &#123; "LightMode"="ForwardBase" &#125;</div><div class="line"></div><div class="line">      CGPROGRAM</div><div class="line"></div><div class="line">      #pragma vertex vert</div><div class="line">      #pragma fragment frag</div><div class="line"></div><div class="line">      #include "Lighting.cginc"</div><div class="line"></div><div class="line">      fixed4 _Diffuse;</div><div class="line"></div><div class="line">      struct a2v &#123;</div><div class="line">        float4 vertex : POSITION;</div><div class="line">        float3 normal : NORMAL;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      struct v2f &#123;</div><div class="line">        float4 pos : SV_POSITION;</div><div class="line">        float3 worldNormal : TEXCOORD0;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      v2f vert(a2v v) &#123;</div><div class="line">        v2f o;</div><div class="line">        // Transform the vertex from object space to projection space</div><div class="line">        o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</div><div class="line"></div><div class="line">        // Transform the normal from object space to world space</div><div class="line">        o.worldNormal = mul(v.normal, (float3x3)_World2Object);</div><div class="line"></div><div class="line">        return o;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">        // Get ambient term</div><div class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</div><div class="line"></div><div class="line">        // Get the normal in world space</div><div class="line">        fixed3 worldNormal = normalize(i.worldNormal);</div><div class="line">        // Get the light direction in world space</div><div class="line">        fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</div><div class="line"></div><div class="line">        // Compute diffuse term</div><div class="line">        fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLightDir));</div><div class="line"></div><div class="line">        fixed3 color = ambient + diffuse;</div><div class="line"></div><div class="line">        return fixed4(color, 1.0);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ENDCG</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  FallBack "Diffuse"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="半兰伯特模型"><a href="#半兰伯特模型" class="headerlink" title="半兰伯特模型"></a>半兰伯特模型</h3><p>Valve在开发HF的时候在兰伯特模型（即漫反射光照模型）上进行修改，因此称为半兰伯特光照模型，广义的半兰伯特光照模型的公式如下</p>
<script type="math/tex; mode=display">c_{diffuse} = ( c_{light} · m_{diffuse} )（\alpha(n·l) +\beta）</script><p>使用了一次函数来代替max函数防止负值，绝大多数情况下，$\alpha$和$\beta$的值为0.5，即</p>
<script type="math/tex; mode=display">c_{diffuse} = ( c_{light} · m_{diffuse} )（0.5(n·l) +0.5）</script><p>修改DiffusePixelLevel.shader中的片源着色器：</p>
<p>HalfLambert.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    // Compute diffuse term</div><div class="line">    fixed halfLambert = dot(worldNormal, worldLightDir) * 0.5 + 0.5;</div><div class="line">    fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * halfLambert;</div><div class="line"></div><div class="line">    fixed3 color = ambient + diffuse;</div><div class="line"></div><div class="line">    return fixed4(color, 1.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是三个光照的对比效果：（半兰伯特很明显能够使背光面照亮</p>
<p><img src="https://oi3qt7c8d.qnssl.com/diff.gif" alt="diff.gif"></p>
<h2 id="高光反射模型"><a href="#高光反射模型" class="headerlink" title="高光反射模型"></a>高光反射模型</h2><p>上一节我们给出高光反射部分的计算公式：</p>
<script type="math/tex; mode=display">c_{specular} = ( c_{light} · m_{specular} )\max(0, v·r) ^{m_{gloss}}</script><ul>
<li>reflect(i,n)函数用于计算反射方向（i：入射方向，n：法线方向）</li>
</ul>
<h3 id="逐顶点光照-1"><a href="#逐顶点光照-1" class="headerlink" title="逐顶点光照"></a>逐顶点光照</h3><p>SpecularVertexLevel.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">Shader "Unity Shaders Book/Chapter 6/Specular Vertex-Level" &#123;</div><div class="line">  Properties &#123;</div><div class="line">    _Diffuse ("Diffuse", Color) = (1, 1, 1, 1)</div><div class="line">    _Specular ("Specular", Color) = (1, 1, 1, 1)</div><div class="line">    _Gloss ("Gloss", Range(8.0, 256)) = 20</div><div class="line">  &#125;</div><div class="line">  SubShader &#123;</div><div class="line">    Pass &#123;</div><div class="line">      Tags &#123; "LightMode"="ForwardBase" &#125;</div><div class="line"></div><div class="line">      CGPROGRAM</div><div class="line"></div><div class="line">      #pragma vertex vert</div><div class="line">      #pragma fragment frag</div><div class="line"></div><div class="line">      #include "Lighting.cginc"</div><div class="line"></div><div class="line">      fixed4 _Diffuse;</div><div class="line">      fixed4 _Specular;</div><div class="line">      float _Gloss;</div><div class="line"></div><div class="line">      struct a2v &#123;</div><div class="line">        float4 vertex : POSITION;</div><div class="line">        float3 normal : NORMAL;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      struct v2f &#123;</div><div class="line">        float4 pos : SV_POSITION;</div><div class="line">        fixed3 color : COLOR;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      v2f vert(a2v v) &#123;</div><div class="line">        v2f o;</div><div class="line">        // Transform the vertex from object space to projection space</div><div class="line">        o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</div><div class="line"></div><div class="line">        // Get ambient term</div><div class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</div><div class="line"></div><div class="line">        // Transform the normal from object space to world space</div><div class="line">        fixed3 worldNormal = normalize(mul(v.normal, (float3x3)_World2Object));</div><div class="line">        // Get the light direction in world space</div><div class="line">        fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</div><div class="line"></div><div class="line">        // Compute diffuse term</div><div class="line">        fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLightDir));</div><div class="line"></div><div class="line">        // Get the reflect direction in world space</div><div class="line">        fixed3 reflectDir = normalize(reflect(-worldLightDir, worldNormal));</div><div class="line">        // Get the view direction in world space</div><div class="line">        fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - mul(_Object2World, v.vertex).xyz);</div><div class="line"></div><div class="line">        // Compute specular term</div><div class="line">        fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(reflectDir, viewDir)), _Gloss);</div><div class="line"></div><div class="line">        o.color = ambient + diffuse + specular;</div><div class="line"></div><div class="line">        return o;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">        return fixed4(i.color, 1.0);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ENDCG</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  FallBack "Specular"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="逐像素光照-1"><a href="#逐像素光照-1" class="headerlink" title="逐像素光照"></a>逐像素光照</h3><p>SpecularPixelLevel.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">Shader "Unity Shaders Book/Chapter 6/Specular Pixel-Level" &#123;</div><div class="line">  Properties &#123;</div><div class="line">    _Diffuse ("Diffuse", Color) = (1, 1, 1, 1)</div><div class="line">    _Specular ("Specular", Color) = (1, 1, 1, 1)</div><div class="line">    _Gloss ("Gloss", Range(8.0, 256)) = 20</div><div class="line">  &#125;</div><div class="line">  SubShader &#123;</div><div class="line">    Pass &#123;</div><div class="line">      Tags &#123; "LightMode"="ForwardBase" &#125;</div><div class="line"></div><div class="line">      CGPROGRAM</div><div class="line"></div><div class="line">      #pragma vertex vert</div><div class="line">      #pragma fragment frag</div><div class="line"></div><div class="line">      #include "Lighting.cginc"</div><div class="line"></div><div class="line">      fixed4 _Diffuse;</div><div class="line">      fixed4 _Specular;</div><div class="line">      float _Gloss;</div><div class="line"></div><div class="line">      struct a2v &#123;</div><div class="line">        float4 vertex : POSITION;</div><div class="line">        float3 normal : NORMAL;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      struct v2f &#123;</div><div class="line">        float4 pos : SV_POSITION;</div><div class="line">        float3 worldNormal : TEXCOORD0;</div><div class="line">        float3 worldPos : TEXCOORD1;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      v2f vert(a2v v) &#123;</div><div class="line">        v2f o;</div><div class="line">        // Transform the vertex from object space to projection space</div><div class="line">        o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</div><div class="line"></div><div class="line">        // Transform the normal from object space to world space</div><div class="line">        o.worldNormal = mul(v.normal, (float3x3)_World2Object);</div><div class="line">        // Transform the vertex from object spacet to world space</div><div class="line">        o.worldPos = mul(_Object2World, v.vertex).xyz;</div><div class="line"></div><div class="line">        return o;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">        // Get ambient term</div><div class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</div><div class="line"></div><div class="line">        fixed3 worldNormal = normalize(i.worldNormal);</div><div class="line">        fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</div><div class="line"></div><div class="line">        // Compute diffuse term</div><div class="line">        fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLightDir));</div><div class="line"></div><div class="line">        // Get the reflect direction in world space</div><div class="line">        fixed3 reflectDir = normalize(reflect(-worldLightDir, worldNormal));</div><div class="line">        // Get the view direction in world space</div><div class="line">        fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - i.worldPos.xyz);</div><div class="line">        // Compute specular term</div><div class="line">        fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(reflectDir, viewDir)), _Gloss);</div><div class="line"></div><div class="line">        return fixed4(ambient + diffuse + specular, 1.0);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ENDCG</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  FallBack "Specular"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Blinn-Phong光照模型"><a href="#Blinn-Phong光照模型" class="headerlink" title="Blinn-Phong光照模型"></a>Blinn-Phong光照模型</h3><p>上一节中提到了Phong光照模型的实习，但是我们提出来另一种Blinn光照模型，即引入一个矢量$h$来避免计算反射方向$r$：</p>
<script type="math/tex; mode=display">h = \frac{v+l}{|v+l|}</script><p>然后使用$n$和$h$之间的夹角进行计算（Blinn模型）：</p>
<script type="math/tex; mode=display">c_{specular} = ( c_{light} · m_{specular} )\max(0, n·h) ^{m_{gloss}}</script><p>修改SpecularPixelLevel.shader中的片源着色器：</p>
<p>BlinnPhong.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">  ...</div><div class="line"></div><div class="line">  // Compute diffuse term</div><div class="line">  fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * max(0, dot(worldNormal, worldLightDir));</div><div class="line"></div><div class="line">  // Get the view direction in world space</div><div class="line">  fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - i.worldPos.xyz);</div><div class="line">  // Get the half direction in world space</div><div class="line">  fixed3 halfDir = normalize(worldLightDir + viewDir);</div><div class="line">  // Compute specular term</div><div class="line">  fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0, dot(worldNormal, halfDir)), _Gloss);</div><div class="line"></div><div class="line">  return fixed4(ambient + diffuse + specular, 1.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是三个高光的对比效果：（Blinn-Phong模型看起来更大更亮一些。</p>
<p><img src="https://oi3qt7c8d.qnssl.com/spe.gif" alt="spe.gif"></p>
<h2 id="使用Unity内置函数"><a href="#使用Unity内置函数" class="headerlink" title="使用Unity内置函数"></a>使用Unity内置函数</h2><p>与BlinnPhong.shader中代码几乎一致，修改部分代码如下</p>
<p>BlinnPhongUseBuildInFunctions.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">v2f vert(a2v v) &#123;</div><div class="line">	v2f o;</div><div class="line">  ...</div><div class="line"></div><div class="line">  // Use the build-in funtion to compute the normal in world space</div><div class="line">  o.worldNormal = UnityObjectToWorldNormal(v.normal);</div><div class="line">  ...</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">  ...</div><div class="line">  fixed3 worldNormal = normalize(i.worldNormal);</div><div class="line">  //  Use the build-in funtion to compute the light direction in world space</div><div class="line">  // Remember to normalize the result</div><div class="line">  fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  // Use the build-in funtion to compute the view direction in world space</div><div class="line">  // Remember to normalize the result</div><div class="line">  fixed3 viewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="UnityCG-cginc的常用函数"><a href="#UnityCG-cginc的常用函数" class="headerlink" title="UnityCG.cginc的常用函数"></a>UnityCG.cginc的常用函数</h3><div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>float3 WorldSpaceViewDir(float4 v)</td>
<td>模型空间的顶点位置-&gt;世界空间中该点到摄像机的观察方向（内部使用UnityWorldSpaceViewDir）</td>
</tr>
<tr>
<td>float3 UnityWorldSpaceViewDir(float4 v)</td>
<td>世界空间的顶点位置-&gt;世界空间中该点到摄像机的观察方向</td>
</tr>
<tr>
<td>float3 ObjSapceViewDir(float4 v)</td>
<td>模型空间的顶点位置-&gt;模型空间中该点到摄像机的观察方向</td>
</tr>
<tr>
<td>float3 WorldSpaceLightDir(float4 v)</td>
<td>前向渲染中，模型空间的顶点位置-&gt;世界空间中该点到摄像机的光照方向。没有归一化（内部使用UnityWorldSpaceLightDir）</td>
</tr>
<tr>
<td>float3 UnityWorldSpaceLightDir(float4 v)</td>
<td>前向渲染中，世界空间的顶点位置-&gt;模型空间中该点到摄像机的光照方向。没有归一化</td>
</tr>
<tr>
<td>float3 ObjSpaceLightDir(float4 v)</td>
<td>前向渲染中，模型空间的顶点位置-&gt;模型空间中该点到摄像机的光照方向。没有归一化</td>
</tr>
<tr>
<td>float3 UnityObjectToWorldNormal(float3 norm)</td>
<td>法线方向，模型空间-&gt;世界空间</td>
</tr>
<tr>
<td>float3 UnityObjectToWorldDir(float3 dir)</td>
<td>方向矢量，模型空间-&gt;世界空间</td>
</tr>
<tr>
<td>float3 UnityWorldToObjectDir(float3 dir)</td>
<td>方向矢量，世界空间-&gt;模型空间</td>
</tr>
</tbody>
</table>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;n个月后重读《Unity Shader入门精要》（第六章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;光与材质&quot;&gt;&lt;a href=&quot;#光与材质&quot; class=&quot;headerlink&quot; title=&quot;光与材质&quot;&gt;&lt;/a&gt;光与材质&lt;/h1&gt;&lt;p
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Shader" scheme="http://yoursite.com/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>【闲聊】我理想中的极客部落</title>
    <link href="http://yoursite.com/2018/04/15/Ideal-Geeklub/"/>
    <id>http://yoursite.com/2018/04/15/Ideal-Geeklub/</id>
    <published>2018-04-15T14:41:46.000Z</published>
    <updated>2018-04-16T11:48:21.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>看群里人聊天有感而发</p>
</blockquote>
<h2 id="之前的极客部落"><a href="#之前的极客部落" class="headerlink" title="之前的极客部落"></a>之前的极客部落</h2><p>大二曾经赌气，在所有社交平台上发了「不再干涉组织和社团的相关事宜」的文字，大抵是抗争失败而表达了对geeklub发展的不满。但是作为一个大四快毕业的老逼，还是对曾经心中的社团有感情的，因为这个社团，我认识了很多正常途径不会遇到的朋友，比如基东斌神，比如12届的学长们（快一个班那么多了），和他们的相处使我从一个一无所知的内向小白，发展到一个厚脸皮、技术还算可以的老逼，从性格上还是见识上都经历了一个很大的跨度。理论上没有这个社团，我就不会遇见这些人，也不会有这么大的改变。而且这如果是一般的那种社团，也不会有这种氛围的，因为这是我大学里见过的最牛逼的社团</p>
<p>极客部落貌似最初面试挺麻烦的，我大一的时候是中途加入的，第二学期的时候作为一个真小白，在隔壁漫研社（我也是这个社的初代成员之一，大一自己成立的）跑过来厚着脸皮和学长一起吃了几次饭以后，稍微熟悉一下关系。之后偷偷加到gk的群里，于是就绕过繁琐的内部考核机制，基本上也不算gk的成员，但是参加了gk的全部活动。这当然是后话了，我只想说的是，你只要脸皮够厚，有些事还是做得到的。</p>
<p>有一点我是很诧异的，现在的新生是不是都被洗脑了，愿意相信老师，不愿相信学长学姐，这是我最不能理解的。大学老师只把你们当做免费劳动力，在你们意识到这些事情的时候狠狠的压榨你们（万恶的资本主义）。我那时候对学长学姐还是很仰慕的，但有时候不太了解上几届的人际关系，因此还做了些一厢情愿的傻事……不过我觉得都是值得的。</p>
<p>以前的gk不需要广告，强者上场，弱智退散，本部的那些技术社团根本无法与gk同台竞技，特别是12届有些强的令人发指（真的屌，软工一个小破学院，根本拿不到学校资源，各种拉赞助搞活动，各种帮张云擦xx）。但是自从软工合并、学长的离开以后社团变得有些死气沉沉，我也曾苦苦思索社团的出路。社长完全不表态，最后我们几个决定完全放权（Qi），自然生长，到时候社团如果到了那一步，该散也就散了。（毕竟我们这群人还在，本来招新也不是必要的事情。</p>
<h2 id="由盛而衰"><a href="#由盛而衰" class="headerlink" title="由盛而衰"></a>由盛而衰</h2><p>被问起社团定位的时候，我蛮尴尬的表示，社团处于放养状态。一个组织完全没有组织的作用，甚至成了负担。</p>
<p>我也曾经思考过社团转型的可能，社团目前要和hw那种区分开，发展出独特的路线，这得到了当时大多数人的默认或认同：</p>
<ol>
<li>社员不分技术，自我审查代替定期被动审查；</li>
<li>所有活动分为一个提议者和其他自愿响应者，讨论确定后自觉遵守并执行；</li>
<li>社员代谢方式为广泛吸收，沉淀筛选，反正到时候觉得自己跟不上或者不适合的自然不活跃……</li>
</ol>
<p>但是这里我犯了一个错误，就是我默认所有人都是很理性、上进、自信的。然而事实上，所有人都是短视、贪婪、畏惧、本质上又是懒惰的。你扪心自问一下，你在大学坚持做过最长的事情是什么？我没有做过坚持很长的事情，但是我把做过的事情都坚持用博客写了下来，一坚持就是四年，到目前我还常常看过去的文字来反省自己。</p>
<p>我一厢情愿的相信，作为前社长，刘昆和雾雾也思考过这个问题。但是最终没有改变，是不是也要反省一下自己呢？我觉得，你们是优秀的好社员，但真的不是一个好社长。</p>
<p>社团的机制，运作模式，以及处理具体的例子，还是最好一开始就说清楚，中途执行会带来无尽的麻烦。</p>
<h2 id="人的本能"><a href="#人的本能" class="headerlink" title="人的本能"></a>人的本能</h2><p>人的行为动机基于反馈机制，按钮会亮所以你会去按，任务有奖励或者后续剧情所以你才会去做。你加入一个组织，大抵也是想或多或少的获取到一些生存资源，这合情合理，但是形式如何呢？</p>
<p>最初是自己办的讲座分享，我们这届尝试过、效果并不好。上面焦头烂额，下面低头手机。层次差太多不行，层次相近又没有意义。最重要的事情是，分享者作为一个普通大学生，本身没有得到什么反馈，而且这些东西都是我从万千次试错中得出来的结论，听众要是不犯过同等数量级的错误，是不会理解我这么做的合理性的，这是我一个不愿意分享的重要原因。如果是那种科普类，谁都能讲的那种讲座更没有意义了，而且人只会相信实际应用的东西，理论上的无论你怎么说都很无力。最重要的是，听的人本身没兴趣，这个打击是最大的</p>
<p>其他形式有没有？有，比如问问题。但是问问题又是一门不是很高深，但是非入门不可的学问了。有兴趣可以参考我之前的一篇<a href="http://mikumiku.com.cn/2016/07/23/sorry/" target="_blank" rel="external">文章</a>。</p>
<p>因此最靠谱，最稳定的社团交流互动还是需要存在于同期生之间，特别对于萌新来说。但是问题又来了，何为良性的交流互动？我们经常能看到大家习惯性的索取姿态，平时一句话不说，有需要了伸个手。第一点，你的反馈得到了满足，但对于除开你之外的剩余成员得到了什么？第二点，如果你的问题没有解决，理论上社团生态圈是平衡了，但是你会不会因此反感社团？</p>
<p>我曾经多次提起写博客或类似的习惯，是因为要保持定时输出的好习惯。这更是一种对自己的负责。如果你和一帮小伙伴能够共同进步，一直分享这个月你学了什么，我学了什么，看到别人进步了感觉很急躁从而努力，这样你追我赶，不是挺好的嘛？</p>
<p>博客内容我也说过，我倾向写「湿货」类文章，就是解决具体问题，填具体填一个坑的文章，这种文章没有什么参考价值，但是你从中获得的解决问题的思考方法是很重要的。（这个看个人喜好</p>
<p>用文字表达也很重要，你脑袋里所谓天马行空、浩浩荡荡的想法，用文字写下来可能就区区五十个字。有时候写下来更容易分析可行性。对于萌新，还是鼓励大家学习一些于课本外的技术。记住，要培养不是新技术，是学习新技术的能力。</p>
<h2 id="理想的社团"><a href="#理想的社团" class="headerlink" title="理想的社团"></a>理想的社团</h2><p>其实不只是GK，以上说明适用于任何兴趣型社团。现在的GK已经不求你能有多少贡献了，新人们只要在大学里能够保持自我，不迷失自己就是对GK的莫大建设。如果GK还想重新成为那个我设想中社团，至少要满足以下几点：</p>
<ol>
<li>一个牛逼的社长。社长绝对、绝对要是一个牛逼的人，不仅技术要好，交际能力也要足够好，行动力也要够强，不怕搞事。</li>
<li>足够活跃的社员。大佬直接是会相互吸引的，而萌新们能够及时洞悉相处规则后也能够保持足够的活跃度。（这种事情越早了解越好</li>
<li>一个足够完整的成员信息公告板。至少我看到某个名字能够通过查询某个地方了解这个人所提供的信息，从而进一步交流。（特别是对于同期的社员来说</li>
<li>定期的集体活动。组队参加比赛之类的能够十分深刻的加深彼此的了解，能够帮你交到好朋友：）</li>
</ol>
<p>但是理想究竟是理想，新社长在百人群里办个活动（且不论活动组织性如何，有没有完整的活动说明啊，有没有签到预估人数啊）只来了5个人，GK也差不多完成了它的历史使命吧。</p>
<h2 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h2><p><a href="https://coding.net/u/hellovass/p/GeeKlub/git?public=true" target="_blank" rel="external">轲爷的在coding上为我们这一届做的GeekLub项目</a> 发展故事在  event / The Story of GeeKlub</p>
<p>（如果你有写或者看到关于对GK评价的文章或者其他，联系我我会把链接加到这里</p>
<h2 id="博客公式测试"><a href="#博客公式测试" class="headerlink" title="博客公式测试"></a>博客公式测试</h2><p>$ x^{y^z}=(1+e^x)^{-2xy^w} $</p>
<p>$ A_0A_1A_2A_3 $</p>
<p>参见这些文章<a href="https://www.cnblogs.com/Ai-heng/p/7282110.html" target="_blank" rel="external">1</a>，<a href="https://www.jianshu.com/p/a0aa94ef8ab2" target="_blank" rel="external">2</a>，<a href="https://docs.mathjax.org/en/latest/api/index.html" target="_blank" rel="external">APIdoc</a></p>
<p>（因为后面要改很多手里屯着的文章，不要问我为什么发文章这么慢，因为写的太水呀……我只是不愿意妥协而已</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看群里人聊天有感而发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;之前的极客部落&quot;&gt;&lt;a href=&quot;#之前的极客部落&quot; class=&quot;headerlink&quot; title=&quot;之前的极客部落&quot;&gt;&lt;/a&gt;之前的极客部落&lt;/h2&gt;&lt;p&gt;大二曾经赌
    
    </summary>
    
    
      <category term="GeekLub" scheme="http://yoursite.com/tags/GeekLub/"/>
    
  </entry>
  
  <entry>
    <title>【DirectX】March 2018 Progress Report</title>
    <link href="http://yoursite.com/2018/04/03/March-2018-Progress-Report/"/>
    <id>http://yoursite.com/2018/04/03/March-2018-Progress-Report/</id>
    <published>2018-04-03T08:48:30.000Z</published>
    <updated>2018-05-16T05:56:12.595Z</updated>
    
    <content type="html"><![CDATA[<p>手撸了第六章的5个例子（box/hills/skull/shapes/waves)，顺便大致过了一遍第七章：因为光(Light)在《Unity-shader入门精要》已经看过了，而且我觉得那个说的更好（</p>
<p>总之先输出一点</p>
<h2 id="Rendering-pipeline-in-GPU"><a href="#Rendering-pipeline-in-GPU" class="headerlink" title="Rendering pipeline in GPU"></a>Rendering pipeline in GPU</h2><p>渲染管线大致分解为以下几个主要阶段：</p>
<p>[输入装配（IA）阶段]</p>
<p>Input Assembelr Stage</p>
<p>[顶点着色器（VS）阶段]</p>
<p>Vertex Shader Stage</p>
<p>[细分着色器]</p>
<p>Hull Shader Stage （外壳着色器阶段）</p>
<p>Tessellator Stage （曲面细分）</p>
<p>Domain Shader Stage （域着色器）</p>
<p>[几何着色器（GS）阶段]</p>
<p>Geometry Shader Stage</p>
<p>(Stream Output Stage)（流输出）</p>
<p>[裁剪阶段]</p>
<p>[光栅化（RS）阶段]</p>
<p>Rasterizer Stage</p>
<p>[像素着色器（PS）]</p>
<p>Pixel Shader Stage</p>
<p>[和输出合并器（OM）阶段]</p>
<p>Output Merger Stage</p>
<p>…</p>
<hr>
<p>举例来说基本上你看到函数名字是以IA开头的，就是在进行输入装配阶段。细分着色器属于高阶阶段，目前我还木有遇到细分处理的例子。</p>
<h2 id="WavesDemo"><a href="#WavesDemo" class="headerlink" title="WavesDemo"></a>WavesDemo</h2><p>用Demo做例子，这里skull及之后的例子才用到了光栅化。最后一个例子WavesDemo由两部分组成，z=f(x, y)的山谷和波动的水面网格。</p>
<p><img src="https://oi3qt7c8d.qnssl.com/wavesdemo.gif" alt="wavesdemo.gif"></p>
<p>先不管update函数直接看draw</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MountainDemo.cpp (WavesDemo.cpp)</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> MountainApp::DrawScene()</div><div class="line">&#123;</div><div class="line">	assert(md3dImmediateContext);</div><div class="line">	assert(mSwapChain);</div><div class="line"></div><div class="line">	md3dImmediateContext-&gt;ClearRenderTargetView(mRenderTargetView, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">float</span>*&gt;(&amp;Colors::LightSteelBlue));</div><div class="line">	md3dImmediateContext-&gt;ClearDepthStencilView(mDepthStencilView, D3D11_CLEAR_DEPTH|D3D11_CLEAR_STENCIL, <span class="number">1.0f</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">	md3dImmediateContext-&gt;IASetInputLayout(mInputLayout);</div><div class="line">	md3dImmediateContext-&gt;IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);</div><div class="line"></div><div class="line">	UINT strike = <span class="keyword">sizeof</span>(Vertex);</div><div class="line">	UINT offset = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">//XMATRIX mxfWorldViewProj</span></div><div class="line">	XMMATRIX view  = XMLoadFloat4x4(&amp;mView);</div><div class="line">	XMMATRIX proj  = XMLoadFloat4x4(&amp;mProj);</div><div class="line"></div><div class="line">	D3DX11_TECHNIQUE_DESC techDesc;</div><div class="line">	mTech-&gt;GetDesc(&amp;techDesc);</div><div class="line">	<span class="keyword">for</span> ( UINT p = <span class="number">0</span>; p &lt; techDesc.Passes; ++p)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// the land</span></div><div class="line">		md3dImmediateContext-&gt;IASetVertexBuffers(<span class="number">0</span>, <span class="number">1</span>, &amp;mLandVB, &amp;strike, &amp;offset);</div><div class="line">		md3dImmediateContext-&gt;IASetIndexBuffer(mLandIB, DXGI_FORMAT_R32_UINT, <span class="number">0</span>);</div><div class="line"></div><div class="line">		XMMATRIX world = XMLoadFloat4x4(&amp;mGridWorld);</div><div class="line">		XMMATRIX worldViewProj = world*view*proj;</div><div class="line">		mfxWorldViewProj-&gt;SetMatrix(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">float</span>*&gt;(&amp;worldViewProj));</div><div class="line">		mTech-&gt;GetPassByIndex(p)-&gt;Apply(<span class="number">0</span>, md3dImmediateContext);</div><div class="line">		md3dImmediateContext-&gt;DrawIndexed(mGridIndexCount, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">		<span class="comment">// the waves</span></div><div class="line">		md3dImmediateContext-&gt;RSSetState(mWireframeRS); <span class="comment">// wf set</span></div><div class="line">		md3dImmediateContext-&gt;IASetVertexBuffers(<span class="number">0</span>, <span class="number">1</span>, &amp;mWavesVB, &amp;strike, &amp;offset);</div><div class="line">		md3dImmediateContext-&gt;IASetIndexBuffer(mWavesIB, DXGI_FORMAT_R32_UINT, <span class="number">0</span>);</div><div class="line"></div><div class="line">		world = XMLoadFloat4x4(&amp;mWavesWorld);</div><div class="line">		worldViewProj = world*view*proj;</div><div class="line">		mfxWorldViewProj-&gt;SetMatrix(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">float</span>*&gt;(&amp;worldViewProj));</div><div class="line">		mTech-&gt;GetPassByIndex(p)-&gt;Apply(<span class="number">0</span>, md3dImmediateContext);</div><div class="line">		md3dImmediateContext-&gt;DrawIndexed(<span class="number">3</span>*mWaves.TriangleCount(), <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">		md3dImmediateContext-&gt;RSSetState(<span class="number">0</span>); <span class="comment">// wf reset</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	HR(mSwapChain-&gt;Present(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>mTech是fx文件（HLSL，包含VS和PS）编译后赋值的私有<code>ID3DX11EffectTechnique*</code>成员</p>
<p>mVB和mIB（根据对象取别名）是私有函数<code>BuildGeometryBuffers</code>（根据对象取别名）的最终产物（存放顶点和索引缓冲，这是三角形带的一种表示方法）</p>
<p>draw函数依赖于<code>md3dImmediateContext</code>这个上下文环境（和以前写WebCanvas类似），按照流程很明显的就是 IA-&gt;IA(VS/PS)-&gt;IA(GS)-&gt;IA(RS)-&gt;DrawIndexed 尽管顺序略有不同，但是基本上包含了所有阶段需要的参数。细分着色器中部分是DirectX11的新特性，目前还没有用到</p>
<p>接着看update部分（即mainloop），这里涉及到动画处理，如果涉及过设计模式会好理解很多，这是典型的序列型模式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MountainDemo.cpp</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> MountainApp::UpdateScene(<span class="keyword">float</span> dt)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// Convert Spherical to Cartesian coordinates.</span></div><div class="line">	<span class="keyword">float</span> x = mRadius*sinf(mPhi)*cosf(mTheta);</div><div class="line">	<span class="keyword">float</span> z = mRadius*sinf(mPhi)*sinf(mTheta);</div><div class="line">	<span class="keyword">float</span> y = mRadius*cosf(mPhi);</div><div class="line"></div><div class="line">	<span class="comment">// Build the view matrix.</span></div><div class="line">	XMVECTOR pos    = XMVectorSet(x, y, z, <span class="number">1.0f</span>);</div><div class="line">	XMVECTOR target = XMVectorZero();</div><div class="line">	XMVECTOR up     = XMVectorSet(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">	XMMATRIX V = XMMatrixLookAtLH(pos, target, up);</div><div class="line">	XMStoreFloat4x4(&amp;mView, V);</div><div class="line"></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="comment">// Every quarter second, generate a random wave.</span></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">float</span> t_base = <span class="number">0.0f</span>;</div><div class="line">	<span class="keyword">if</span>( (mTimer.TotalTime() - t_base) &gt;= <span class="number">0.25f</span> )</div><div class="line">	&#123;</div><div class="line">		t_base += <span class="number">0.25f</span>;</div><div class="line"></div><div class="line">		DWORD i = <span class="number">5</span> + rand() % <span class="number">190</span>;</div><div class="line">		DWORD j = <span class="number">5</span> + rand() % <span class="number">190</span>;</div><div class="line"></div><div class="line">		<span class="keyword">float</span> r = MathHelper::RandF(<span class="number">1.0f</span>, <span class="number">2.0f</span>);</div><div class="line"></div><div class="line">		mWaves.Disturb(i, j, r);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	mWaves.Update(dt);</div><div class="line"></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="comment">// Update the wave vertex buffer with the new solution.</span></div><div class="line">	<span class="comment">//</span></div><div class="line"></div><div class="line">	D3D11_MAPPED_SUBRESOURCE mappedData;</div><div class="line">	HR(md3dImmediateContext-&gt;Map(mWavesVB, <span class="number">0</span>, D3D11_MAP_WRITE_DISCARD, <span class="number">0</span>, &amp;mappedData));</div><div class="line"></div><div class="line">	Vertex* v = <span class="keyword">reinterpret_cast</span>&lt;Vertex*&gt;(mappedData.pData);</div><div class="line">	<span class="keyword">for</span>(UINT i = <span class="number">0</span>; i &lt; mWaves.VertexCount(); ++i)</div><div class="line">	&#123;</div><div class="line">		v[i].Pos = mWaves[i];</div><div class="line">		v[i].Color = XMFLOAT4(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	md3dImmediateContext-&gt;Unmap(mWavesVB, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>update的前面部分是把球坐标转换成直角坐标，来构筑mView（最终<code>worldViewProj = world*view*proj</code>，记得这个公式），中后部分用于处理水面动画，Waves对象使用了设计模式中<a href="http://mikumiku.com.cn/2017/11/11/game_programming_patterns/#%E6%9B%B4%E6%96%B0%E6%96%B9%E6%B3%95" target="_blank" rel="external">更新方法</a>，设计一个update的方法，把mainloop中的deltatime作为参数传入子部件的update中，以保持同步的时间步长，后面的一个for主要是将waves同步的数据更新到mVB中，先来看看waves的update是如何设计的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Waves.cpp</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> Waves::Update(<span class="keyword">float</span> dt)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">float</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">// Accumulate time.</span></div><div class="line">	t += dt;</div><div class="line"></div><div class="line">	<span class="comment">// Only update the simulation at the specified time step.</span></div><div class="line">	<span class="keyword">if</span>( t &gt;= mTimeStep )</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// Only update interior points; we use zero boundary conditions.</span></div><div class="line">		<span class="keyword">for</span>(DWORD i = <span class="number">1</span>; i &lt; mNumRows<span class="number">-1</span>; ++i)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span>(DWORD j = <span class="number">1</span>; j &lt; mNumCols<span class="number">-1</span>; ++j)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">// After this update we will be discarding the old previous</span></div><div class="line">				<span class="comment">// buffer, so overwrite that buffer with the new update.</span></div><div class="line">				<span class="comment">// Note how we can do this inplace (read/write to same element)</span></div><div class="line">				<span class="comment">// because we won't need prev_ij again and the assignment happens last.</span></div><div class="line"></div><div class="line">				<span class="comment">// Note j indexes x and i indexes z: h(x_j, z_i, t_k)</span></div><div class="line">				<span class="comment">// Moreover, our +z axis goes "down"; this is just to</span></div><div class="line">				<span class="comment">// keep consistent with our row indices going down.</span></div><div class="line"></div><div class="line">				mPrevSolution[i*mNumCols+j].y =</div><div class="line">					mK1*mPrevSolution[i*mNumCols+j].y +</div><div class="line">					mK2*mCurrSolution[i*mNumCols+j].y +</div><div class="line">					mK3*(mCurrSolution[(i+<span class="number">1</span>)*mNumCols+j].y +</div><div class="line">					     mCurrSolution[(i<span class="number">-1</span>)*mNumCols+j].y +</div><div class="line">					     mCurrSolution[i*mNumCols+j+<span class="number">1</span>].y +</div><div class="line">						 mCurrSolution[i*mNumCols+j<span class="number">-1</span>].y);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// We just overwrote the previous buffer with the new data, so</span></div><div class="line">		<span class="comment">// this data needs to become the current solution and the old</span></div><div class="line">		<span class="comment">// current solution becomes the new previous solution.</span></div><div class="line">		<span class="built_in">std</span>::swap(mPrevSolution, mCurrSolution);</div><div class="line"></div><div class="line">		t = <span class="number">0.0f</span>; <span class="comment">// reset time</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>典型的<a href="http://mikumiku.com.cn/2017/11/11/game_programming_patterns/#%E5%8F%8C%E7%BC%93%E5%86%B2" target="_blank" rel="external">双缓冲</a>，避免同时读写同一块内存。这里注意到三个mk参数，找到其赋值的init函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Waves.cpp</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> Waves::Init(UINT m, UINT n, <span class="keyword">float</span> dx, <span class="keyword">float</span> dt, <span class="keyword">float</span> speed, <span class="keyword">float</span> damping)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// 	mWaves.Init(200, 200, 0.8f, 0.03f, 3.25f, 0.4f);</span></div><div class="line">	mNumRows = m;</div><div class="line">	mNumCols = n;</div><div class="line">	mVertexCount = m*n;</div><div class="line">	mTriangleCount = (m<span class="number">-1</span>)*(n<span class="number">-1</span>)*<span class="number">2</span>;</div><div class="line"></div><div class="line">	mTimeStep = dt;                           <span class="comment">// 时间步长</span></div><div class="line">	mSpatialStep = dx;                        <span class="comment">// 空间步长</span></div><div class="line"></div><div class="line">	<span class="keyword">float</span> d = damping*dt+<span class="number">2.0f</span>;                <span class="comment">// 阻尼系数（速度？）*dt + 常数</span></div><div class="line">	<span class="keyword">float</span> e = (speed*speed)*(dt*dt)/(dx*dx);  <span class="comment">// pow(（水波速度 / dv）, 2)</span></div><div class="line">	mK1     = (damping*dt<span class="number">-2.0</span>f)/ d;           <span class="comment">// （d(dt) - a0） / d(dt)</span></div><div class="line">	mK2     = (<span class="number">4.0f</span><span class="number">-8.0</span>f*e) / d;              <span class="comment">// (a0 - 2 * a0 * e(dt)) / d(dt)</span></div><div class="line">	mK3     = (<span class="number">2.0f</span>*e) / d;                   <span class="comment">// (2 * a0) / d(dt) / 4</span></div><div class="line"></div><div class="line">	<span class="comment">// In case Init() called again.</span></div><div class="line">	<span class="keyword">delete</span>[] mPrevSolution;</div><div class="line">	<span class="keyword">delete</span>[] mCurrSolution;</div><div class="line"></div><div class="line">	mPrevSolution = <span class="keyword">new</span> XMFLOAT3[m*n];</div><div class="line">	mCurrSolution = <span class="keyword">new</span> XMFLOAT3[m*n];</div><div class="line"></div><div class="line">	<span class="comment">// Generate grid vertices in system memory.</span></div><div class="line"></div><div class="line">	<span class="keyword">float</span> halfWidth = (n<span class="number">-1</span>)*dx*<span class="number">0.5f</span>; <span class="comment">// 这样看来dx = mSpatialStep  = 网格边长</span></div><div class="line">	<span class="keyword">float</span> halfDepth = (m<span class="number">-1</span>)*dx*<span class="number">0.5f</span>;</div><div class="line">	<span class="keyword">for</span>(UINT i = <span class="number">0</span>; i &lt; m; ++i)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">float</span> z = halfDepth - i*dx;</div><div class="line">		<span class="keyword">for</span>(UINT j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">float</span> x = -halfWidth + j*dx;</div><div class="line"></div><div class="line">			mPrevSolution[i*n+j] = XMFLOAT3(x, <span class="number">0.0f</span>, z);</div><div class="line">			mCurrSolution[i*n+j] = XMFLOAT3(x, <span class="number">0.0f</span>, z);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>理论上水波模型一般使用正弦函数，这里用了近似的函数组合来模拟，水波的某一点取决于上一帧的状态和周围四格的状态。</p>
<p>将 speed=3.25, damping=0.4, dx=0.8 带入得：</p>
<pre><code>mK1 = ( 0.4 * dt - 2.0 ) / ( 0.4 * dt + 2.0 )
mK2 = ( 4.0 - 132.0 * dt * dt )  / ( 0.4 * dt + 2.0 )
</code></pre><p>研究了一会之后，我只能说这是经验公式，这样只有前两个水波比较明显（由函数图像可得）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手撸了第六章的5个例子（box/hills/skull/shapes/waves)，顺便大致过了一遍第七章：因为光(Light)在《Unity-shader入门精要》已经看过了，而且我觉得那个说的更好（&lt;/p&gt;
&lt;p&gt;总之先输出一点&lt;/p&gt;
&lt;h2 id=&quot;Renderin
    
    </summary>
    
    
      <category term="Directx11" scheme="http://yoursite.com/tags/Directx11/"/>
    
      <category term="cpp" scheme="http://yoursite.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【DirectX】BoxDemo学习</title>
    <link href="http://yoursite.com/2018/03/23/BoxDemo-learning/"/>
    <id>http://yoursite.com/2018/03/23/BoxDemo-learning/</id>
    <published>2018-03-23T08:11:11.000Z</published>
    <updated>2018-04-15T15:13:18.481Z</updated>
    
    <content type="html"><![CDATA[<p>123</p>
<blockquote>
<p>人算不如天算</p>
</blockquote>
<p>龙书第六章中间的一个例子，用到了前几节所有的知识点。把这几百行行代码读懂就基本了解渲染管线的工作流程（日常读源码</p>
<h2 id="Demo-Debug"><a href="#Demo-Debug" class="headerlink" title="Demo Debug"></a>Demo Debug</h2><p><img src="https://oi3qt7c8d.qnssl.com/boxdemo.jpg" alt="Front"><br><img src="https://oi3qt7c8d.qnssl.com/boxdemo1.jpg" alt="Back"></p>
<h2 id="Src"><a href="#Src" class="headerlink" title="Src"></a>Src</h2><p>BoxDemo.cpp （使用D3DApp框架结构</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"><span class="comment">// BoxDemo.cpp by Frank Luna (C) 2011 All Rights Reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Demonstrates rendering a colored box.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Controls:</span></div><div class="line"><span class="comment">//        Hold the left mouse button down and move the mouse to rotate.</span></div><div class="line"><span class="comment">//      Hold the right mouse button down to zoom in and out.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"d3dApp.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"d3dx11Effect.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathHelper.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Vertex</div><div class="line">&#123;</div><div class="line">    XMFLOAT3 Pos;</div><div class="line">    XMFLOAT4 Color;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> BoxApp : <span class="keyword">public</span> D3DApp</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    BoxApp(HINSTANCE hInstance);</div><div class="line">    ~BoxApp();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Init</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnResize</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateScene</span><span class="params">(<span class="keyword">float</span> dt)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DrawScene</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMouseDown</span><span class="params">(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMouseUp</span><span class="params">(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMouseMove</span><span class="params">(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildGeometryBuffers</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildFX</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildVertexLayout</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    ID3D11Buffer* mBoxVB; <span class="comment">// [vertex buffer]</span></div><div class="line">    ID3D11Buffer* mBoxIB; <span class="comment">// [index buffer]</span></div><div class="line"></div><div class="line">    ID3DX11Effect* mFX;   <span class="comment">// update in BuildFX()</span></div><div class="line">    ID3DX11EffectTechnique* mTech;</div><div class="line">    ID3DX11EffectMatrixVariable* mfxWorldViewProj;</div><div class="line"></div><div class="line">    ID3D11InputLayout* mInputLayout; <span class="comment">// update in BuildVertexLayout();</span></div><div class="line"></div><div class="line">    XMFLOAT4X4 mWorld;</div><div class="line">    XMFLOAT4X4 mView;</div><div class="line">    XMFLOAT4X4 mProj; <span class="comment">// 3 for DrawScene()</span></div><div class="line"></div><div class="line">    <span class="keyword">float</span> mTheta;</div><div class="line">    <span class="keyword">float</span> mPhi;</div><div class="line">    <span class="keyword">float</span> mRadius; <span class="comment">// 3 for rotation</span></div><div class="line"></div><div class="line">    POINT mLastMousePos; <span class="comment">// record the mouse postion for update scene</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE prevInstance,</span></span></div><div class="line">                   PSTR cmdLine, <span class="keyword">int</span> showCmd)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Enable run-time memory check for debug builds.</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(DEBUG) | defined(_DEBUG)</span></div><div class="line">    <span class="number">_</span>CrtSetDbgFlag( <span class="number">_</span>CRTDBG_ALLOC_MEM_DF | <span class="number">_</span>CRTDBG_LEAK_CHECK_DF );</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="function">BoxApp <span class="title">theApp</span><span class="params">(hInstance)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( !theApp.Init() ) <span class="comment">// minit</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> theApp.Run();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">BoxApp::BoxApp(HINSTANCE hInstance)</div><div class="line">: D3DApp(hInstance), mBoxVB(<span class="number">0</span>), mBoxIB(<span class="number">0</span>), mFX(<span class="number">0</span>), mTech(<span class="number">0</span>),</div><div class="line">  mfxWorldViewProj(<span class="number">0</span>), mInputLayout(<span class="number">0</span>),</div><div class="line">  mTheta(<span class="number">1.5f</span>*MathHelper::Pi), mPhi(<span class="number">0.25f</span>*MathHelper::Pi), mRadius(<span class="number">5.0f</span>)</div><div class="line">&#123;</div><div class="line">    mMainWndCaption = <span class="string">L"Box Demo"</span>;</div><div class="line"></div><div class="line">    mLastMousePos.x = <span class="number">0</span>;</div><div class="line">    mLastMousePos.y = <span class="number">0</span>;</div><div class="line"></div><div class="line">    XMMATRIX I = XMMatrixIdentity();</div><div class="line">    XMStoreFloat4x4(&amp;mWorld, I);</div><div class="line">    XMStoreFloat4x4(&amp;mView, I);</div><div class="line">    XMStoreFloat4x4(&amp;mProj, I); <span class="comment">// init these m-args</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">BoxApp::~BoxApp()</div><div class="line">&#123;</div><div class="line">    ReleaseCOM(mBoxVB);</div><div class="line">    ReleaseCOM(mBoxIB);</div><div class="line">    ReleaseCOM(mFX);</div><div class="line">    ReleaseCOM(mInputLayout);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> BoxApp::Init() <span class="comment">//dinit</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!D3DApp::Init())</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    BuildGeometryBuffers(); <span class="comment">//mbgb</span></div><div class="line">    BuildFX();              <span class="comment">//mbfx</span></div><div class="line">    BuildVertexLayout();    <span class="comment">//mbvl</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//******************************** Scene map (d3dapp methods) ********************************</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::OnResize()</div><div class="line">&#123;</div><div class="line">    D3DApp::OnResize();</div><div class="line"></div><div class="line">    <span class="comment">// The window resized, so update the aspect ratio and recompute the projection matrix.</span></div><div class="line">    XMMATRIX P = XMMatrixPerspectiveFovLH(<span class="number">0.25f</span>*MathHelper::Pi, AspectRatio(), <span class="number">1.0f</span>, <span class="number">1000.0f</span>);</div><div class="line">    XMStoreFloat4x4(&amp;mProj, P); <span class="comment">// update mProj</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::UpdateScene(<span class="keyword">float</span> dt)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Convert Spherical to Cartesian coordinates.</span></div><div class="line">    <span class="keyword">float</span> x = mRadius*sinf(mPhi)*cosf(mTheta);</div><div class="line">    <span class="keyword">float</span> z = mRadius*sinf(mPhi)*sinf(mTheta);</div><div class="line">    <span class="keyword">float</span> y = mRadius*cosf(mPhi);</div><div class="line"></div><div class="line">    <span class="comment">// Build the view matrix.</span></div><div class="line">    XMVECTOR pos    = XMVectorSet(x, y, z, <span class="number">1.0f</span>);</div><div class="line">    XMVECTOR target = XMVectorZero();</div><div class="line">    XMVECTOR up     = XMVectorSet(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">    XMMATRIX V = XMMatrixLookAtLH(pos, target, up);</div><div class="line">    XMStoreFloat4x4(&amp;mView, V); <span class="comment">// update mView</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::DrawScene()</div><div class="line">&#123;</div><div class="line">    md3dImmediateContext-&gt;ClearRenderTargetView(mRenderTargetView, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">float</span>*&gt;(&amp;Colors::LightSteelBlue));</div><div class="line">    md3dImmediateContext-&gt;ClearDepthStencilView(mDepthStencilView, D3D11_CLEAR_DEPTH|D3D11_CLEAR_STENCIL, <span class="number">1.0f</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    md3dImmediateContext-&gt;IASetInputLayout(mInputLayout);</div><div class="line">    md3dImmediateContext-&gt;IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);</div><div class="line"></div><div class="line">    UINT stride = <span class="keyword">sizeof</span>(Vertex);</div><div class="line">    UINT offset = <span class="number">0</span>;</div><div class="line">    md3dImmediateContext-&gt;IASetVertexBuffers(<span class="number">0</span>, <span class="number">1</span>, &amp;mBoxVB, &amp;stride, &amp;offset);</div><div class="line">    md3dImmediateContext-&gt;IASetIndexBuffer(mBoxIB, DXGI_FORMAT_R32_UINT, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Set constants</span></div><div class="line">    XMMATRIX world = XMLoadFloat4x4(&amp;mWorld);</div><div class="line">    XMMATRIX view  = XMLoadFloat4x4(&amp;mView);</div><div class="line">    XMMATRIX proj  = XMLoadFloat4x4(&amp;mProj);</div><div class="line">    XMMATRIX worldViewProj = world*view*proj;</div><div class="line"></div><div class="line">    mfxWorldViewProj-&gt;SetMatrix(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">float</span>*&gt;(&amp;worldViewProj));</div><div class="line"></div><div class="line">    D3DX11_TECHNIQUE_DESC techDesc;</div><div class="line">    mTech-&gt;GetDesc( &amp;techDesc );</div><div class="line">    <span class="keyword">for</span>(UINT p = <span class="number">0</span>; p &lt; techDesc.Passes; ++p)</div><div class="line">    &#123;</div><div class="line">        mTech-&gt;GetPassByIndex(p)-&gt;Apply(<span class="number">0</span>, md3dImmediateContext);</div><div class="line"></div><div class="line">        <span class="comment">// 36 indices for the box.</span></div><div class="line">        md3dImmediateContext-&gt;DrawIndexed(<span class="number">36</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    HR(mSwapChain-&gt;Present(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//************************* Mouse Control ***********************************************</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::OnMouseDown(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">&#123;</div><div class="line">    mLastMousePos.x = x;</div><div class="line">    mLastMousePos.y = y;</div><div class="line"></div><div class="line">    SetCapture(mhMainWnd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::OnMouseUp(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">&#123;</div><div class="line">    ReleaseCapture();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::OnMouseMove(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>( (btnState &amp; MK_LBUTTON) != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Make each pixel correspond to a quarter of a degree.</span></div><div class="line">        <span class="keyword">float</span> dx = XMConvertToRadians(<span class="number">0.25f</span>*<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(x - mLastMousePos.x));</div><div class="line">        <span class="keyword">float</span> dy = XMConvertToRadians(<span class="number">0.25f</span>*<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(y - mLastMousePos.y));</div><div class="line"></div><div class="line">        <span class="comment">// Update angles based on input to orbit camera around box.</span></div><div class="line">        mTheta += dx;</div><div class="line">        mPhi   += dy;</div><div class="line"></div><div class="line">        <span class="comment">// Restrict the angle mPhi.</span></div><div class="line">        mPhi = MathHelper::Clamp(mPhi, <span class="number">0.1f</span>, MathHelper::Pi<span class="number">-0.1</span>f);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( (btnState &amp; MK_RBUTTON) != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Make each pixel correspond to 0.005 unit in the scene.</span></div><div class="line">        <span class="keyword">float</span> dx = <span class="number">0.005f</span>*<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(x - mLastMousePos.x);</div><div class="line">        <span class="keyword">float</span> dy = <span class="number">0.005f</span>*<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(y - mLastMousePos.y);</div><div class="line"></div><div class="line">        <span class="comment">// Update the camera radius based on input.</span></div><div class="line">        mRadius += dx - dy;</div><div class="line"></div><div class="line">        <span class="comment">// Restrict the radius.</span></div><div class="line">        mRadius = MathHelper::Clamp(mRadius, <span class="number">3.0f</span>, <span class="number">15.0f</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLastMousePos.x = x;</div><div class="line">    mLastMousePos.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//******************************* rendering pipeline *****************************************</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::BuildGeometryBuffers() <span class="comment">//dbgb</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// directx use left-handed like this:</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// |y       </span></div><div class="line">    <span class="comment">// |  /z     </span></div><div class="line">    <span class="comment">// | /       </span></div><div class="line">    <span class="comment">// |/_____x  </span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Create vertex buffer</span></div><div class="line">    Vertex vertices[] =</div><div class="line">    &#123;</div><div class="line">        &#123; XMFLOAT3(<span class="number">-1.0</span>f, <span class="number">-1.0</span>f, <span class="number">-1.0</span>f), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::White   &#125;,</div><div class="line">        &#123; XMFLOAT3(<span class="number">-1.0</span>f, +<span class="number">1.0f</span>, <span class="number">-1.0</span>f), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Black   &#125;,</div><div class="line">        &#123; XMFLOAT3(+<span class="number">1.0f</span>, +<span class="number">1.0f</span>, <span class="number">-1.0</span>f), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Red     &#125;,</div><div class="line">        &#123; XMFLOAT3(+<span class="number">1.0f</span>, <span class="number">-1.0</span>f, <span class="number">-1.0</span>f), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Green   &#125;,</div><div class="line">        &#123; XMFLOAT3(<span class="number">-1.0</span>f, <span class="number">-1.0</span>f, +<span class="number">1.0f</span>), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Blue    &#125;,</div><div class="line">        &#123; XMFLOAT3(<span class="number">-1.0</span>f, +<span class="number">1.0f</span>, +<span class="number">1.0f</span>), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Yellow  &#125;,</div><div class="line">        &#123; XMFLOAT3(+<span class="number">1.0f</span>, +<span class="number">1.0f</span>, +<span class="number">1.0f</span>), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Cyan    &#125;,</div><div class="line">        &#123; XMFLOAT3(+<span class="number">1.0f</span>, <span class="number">-1.0</span>f, +<span class="number">1.0f</span>), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Magenta &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// color map:</span></div><div class="line"></div><div class="line">    <span class="comment">//   Yellow---Cyan</span></div><div class="line">    <span class="comment">//    /|      /|</span></div><div class="line">    <span class="comment">// Black---Red |</span></div><div class="line">    <span class="comment">//   | |     | |</span></div><div class="line">    <span class="comment">//   |Blue---|-Magenta</span></div><div class="line">    <span class="comment">//   |/      |/</span></div><div class="line">    <span class="comment">// White---Green</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    D3D11_BUFFER_DESC vbd; <span class="comment">// buffer description [vertex buffer]</span></div><div class="line">    vbd.Usage = D3D11_USAGE_IMMUTABLE;</div><div class="line">    vbd.ByteWidth = <span class="keyword">sizeof</span>(Vertex) * <span class="number">8</span>;</div><div class="line">    vbd.BindFlags = D3D11_BIND_VERTEX_BUFFER;</div><div class="line">    vbd.CPUAccessFlags = <span class="number">0</span>;</div><div class="line">    vbd.MiscFlags = <span class="number">0</span>;</div><div class="line">    vbd.StructureByteStride = <span class="number">0</span>;</div><div class="line"></div><div class="line">    D3D11_SUBRESOURCE_DATA vinitData; <span class="comment">// zone for init buffer</span></div><div class="line">    vinitData.pSysMem = vertices; <span class="comment">// set buffer container</span></div><div class="line"></div><div class="line">    HR(md3dDevice-&gt;CreateBuffer(&amp;vbd, &amp;vinitData, &amp;mBoxVB)); <span class="comment">// [vertex buffer created]</span></div><div class="line"></div><div class="line">    <span class="comment">// index map: Clockwise</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//     5-------6    1→2         1→2   2        2  1→2          7--6</span></div><div class="line">    <span class="comment">//    /|      /|    ↑ ↓     LR: ↑    ↗↓   RL: ↗↓  ↑    backRL: |  |</span></div><div class="line">    <span class="comment">//   1-------2 |    0←3         0   0 3      0 3  0            4--5</span></div><div class="line">    <span class="comment">//   | |     | |</span></div><div class="line">    <span class="comment">//   | 4-----|-7</span></div><div class="line">    <span class="comment">//   |/      |/</span></div><div class="line">    <span class="comment">//   0-------3</span></div><div class="line"></div><div class="line">    <span class="comment">// Create the index buffer</span></div><div class="line"></div><div class="line">    UINT indices[] = &#123;</div><div class="line">        <span class="comment">// front face ↙LR  1--2</span></div><div class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,        <span class="comment">// 0--3</span></div><div class="line"></div><div class="line">        <span class="comment">// back face       ↙LR        5--6  ↘RL    6--5   ↙RL      7--6</span></div><div class="line">        <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>,        <span class="comment">// (front)    |  |  (back) |  |   (rotate) |  |</span></div><div class="line">        <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>,        <span class="comment">// (anti-cw)  4--7         7--4            4--5</span></div><div class="line"></div><div class="line">        <span class="comment">// left face ↙LR   5--1</span></div><div class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>,        <span class="comment">// 4--0</span></div><div class="line"></div><div class="line">        <span class="comment">// right face ↙LR  2--6</span></div><div class="line">        <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>,        <span class="comment">// 3--7</span></div><div class="line"></div><div class="line">        <span class="comment">// top face  ↙LR   5--6</span></div><div class="line">        <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>,        <span class="comment">// 1--2</span></div><div class="line"></div><div class="line">        <span class="comment">// bottom face ↙LR 0--3</span></div><div class="line">        <span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>         <span class="comment">// 4--7</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    D3D11_BUFFER_DESC ibd; <span class="comment">// buffer description [index buffer]</span></div><div class="line"></div><div class="line">    ibd.Usage = D3D11_USAGE_IMMUTABLE;</div><div class="line">    ibd.ByteWidth = <span class="keyword">sizeof</span>(UINT) * <span class="number">36</span>;</div><div class="line">    ibd.BindFlags = D3D11_BIND_INDEX_BUFFER;</div><div class="line">    ibd.CPUAccessFlags = <span class="number">0</span>;</div><div class="line">    ibd.MiscFlags = <span class="number">0</span>;</div><div class="line">    ibd.StructureByteStride = <span class="number">0</span>; <span class="comment">// set ibd args</span></div><div class="line"></div><div class="line">    D3D11_SUBRESOURCE_DATA iinitData; <span class="comment">// zone for init buffer</span></div><div class="line">    iinitData.pSysMem = indices; <span class="comment">// set buffer container</span></div><div class="line"></div><div class="line">    HR(md3dDevice-&gt;CreateBuffer(&amp;ibd, &amp;iinitData, &amp;mBoxIB)); <span class="comment">// [index buffer created]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::BuildFX() <span class="comment">//dbfx use color.fx</span></div><div class="line">&#123;</div><div class="line">    DWORD shaderFlags = <span class="number">0</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( DEBUG ) || defined( _DEBUG )</span></div><div class="line">    shaderFlags |= D3D10_SHADER_DEBUG;</div><div class="line">    shaderFlags |= D3D10_SHADER_SKIP_OPTIMIZATION;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    ID3D10Blob* compiledShader = <span class="number">0</span>;  <span class="comment">// compiling shader pointer</span></div><div class="line">    ID3D10Blob* compilationMsgs = <span class="number">0</span>; <span class="comment">// store errs or wanrings</span></div><div class="line"></div><div class="line">    <span class="comment">// main method &lt;D3DX11CompileFromFile&gt;</span></div><div class="line">    HRESULT hr = D3DX11CompileFromFile(<span class="string">L"FX/color.fx"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">"fx_5_0"</span>, shaderFlags,</div><div class="line">        <span class="number">0</span>, <span class="number">0</span>, &amp;compiledShader, &amp;compilationMsgs, <span class="number">0</span>);</div><div class="line">    <span class="comment">// and check method&lt;D3DX11CompileFromFile&gt; result below</span></div><div class="line"></div><div class="line">    <span class="comment">// compilationMsgs can store errors or warnings.</span></div><div class="line">    <span class="keyword">if</span>( compilationMsgs != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        MessageBoxA(<span class="number">0</span>, (<span class="keyword">char</span>*)compilationMsgs-&gt;GetBufferPointer(), <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        ReleaseCOM(compilationMsgs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Even if there are no compilationMsgs, check to make sure there were no other errors.</span></div><div class="line">    <span class="keyword">if</span>(FAILED(hr))</div><div class="line">    &#123;</div><div class="line">        DXTrace(<span class="number">__F</span>ILE__, (DWORD)<span class="number">__L</span>INE__, hr, <span class="string">L"D3DX11CompileFromFile"</span>, <span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// main method &lt;D3DX11CreateEffectFromMemory&gt;</span></div><div class="line">    HR(D3DX11CreateEffectFromMemory(compiledShader-&gt;GetBufferPointer(), compiledShader-&gt;GetBufferSize(),</div><div class="line">        <span class="number">0</span>, md3dDevice, &amp;mFX)); <span class="comment">// update mFX</span></div><div class="line"></div><div class="line">    <span class="comment">// Done with compiled shader.</span></div><div class="line">    ReleaseCOM(compiledShader);</div><div class="line"></div><div class="line">    mTech    = mFX-&gt;GetTechniqueByName(<span class="string">"ColorTech"</span>);</div><div class="line">    mfxWorldViewProj = mFX-&gt;GetVariableByName(<span class="string">"gWorldViewProj"</span>)-&gt;AsMatrix();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::BuildVertexLayout() <span class="comment">//dbvl</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Create the vertex input layout.</span></div><div class="line">    D3D11_INPUT_ELEMENT_DESC vertexDesc[] =</div><div class="line">    &#123;</div><div class="line">        &#123;<span class="string">"POSITION"</span>, <span class="number">0</span>, DXGI_FORMAT_R32G32B32_FLOAT, <span class="number">0</span>, <span class="number">0</span>, D3D11_INPUT_PER_VERTEX_DATA, <span class="number">0</span>&#125;,</div><div class="line">        &#123;<span class="string">"COLOR"</span>,    <span class="number">0</span>, DXGI_FORMAT_R32G32B32A32_FLOAT, <span class="number">0</span>, <span class="number">12</span>, D3D11_INPUT_PER_VERTEX_DATA, <span class="number">0</span>&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Create the input layout</span></div><div class="line">    D3DX11_PASS_DESC passDesc;</div><div class="line">    mTech-&gt;GetPassByIndex(<span class="number">0</span>)-&gt;GetDesc(&amp;passDesc);</div><div class="line">    HR(md3dDevice-&gt;CreateInputLayout(vertexDesc, <span class="number">2</span>, passDesc.pIAInputSignature,</div><div class="line">        passDesc.IAInputSignatureSize, &amp;mInputLayout)); <span class="comment">// update mInputLayout</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>color.fx （没啥好说的，一个顶点着色器和一个像素着色器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">//***************************************************************************************</div><div class="line">// color.fx by Frank Luna (C) 2011 All Rights Reserved.</div><div class="line">//</div><div class="line">// Transforms and colors geometry.</div><div class="line">//***************************************************************************************</div><div class="line"></div><div class="line">cbuffer cbPerObject</div><div class="line">&#123;</div><div class="line">	float4x4 gWorldViewProj;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct VertexIn</div><div class="line">&#123;</div><div class="line">	float3 Pos   : POSITION;</div><div class="line">	float4 Color : COLOR;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct VertexOut</div><div class="line">&#123;</div><div class="line">	float4 PosH  : SV_POSITION;</div><div class="line">    float4 Color : COLOR;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">VertexOut VS(VertexIn vin)</div><div class="line">&#123;</div><div class="line">	VertexOut vout;</div><div class="line"></div><div class="line">	// Transform to homogeneous clip space.</div><div class="line">	vout.PosH = mul(float4(vin.Pos, 1.0f), gWorldViewProj);</div><div class="line"></div><div class="line">	// Just pass vertex color into the pixel shader.</div><div class="line">    vout.Color = vin.Color;</div><div class="line"></div><div class="line">    return vout;</div><div class="line">&#125;</div><div class="line"></div><div class="line">float4 PS(VertexOut pin) : SV_Target</div><div class="line">&#123;</div><div class="line">    return pin.Color;</div><div class="line">&#125;</div><div class="line"></div><div class="line">technique11 ColorTech</div><div class="line">&#123;</div><div class="line">    pass P0</div><div class="line">    &#123;</div><div class="line">        SetVertexShader( CompileShader( vs_5_0, VS() ) );</div><div class="line">		SetGeometryShader( NULL );</div><div class="line">        SetPixelShader( CompileShader( ps_5_0, PS() ) );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>DirectX的官网只有一个sdk下载链接，没有实例，木有文档，正常开发者下了根本没卵用。所以没有办法，只能使用各种书籍的随书源码作为参考。不过书籍上的项目一般历史久远，想要run起来还是会有一定的挑战。</p>
<p>vs的sln工程个有说法，不同版本的工程策略不同。不同版本vs构建的工程之间兼容性会有一定的问题，主要表现在开发工具（包括面向平台）、c++库等的更新迭代。当你需要打开一个远古时期的工程时，最简单粗暴的方法是下载构建版本时的vs（vs允许多版本共存）和相应的SDK，设置添加SDK的path include includepath lib 和源文件路径到项目的vc++目录中（绝大多数搜索引擎出来的vs兼容性问题的根源）。使用新的vs去跑老版本的工程会修改老工程中的配置，这样就无法再使用旧版本的vs去打开工程，而且新vs也不一定能够跑起来，可能会遇到各种问题（经常出现难以解决的情况），吃力不讨好。（突然感觉用unix-like的人控制欲都好强啊</p>
<p>bin路径一般放二进制文件(.exe)，即path环境路径；lib路径放库文件(.lib)，有时候需要用sdk工程手动build出来，因为有时候为了区分debug和release出来的库，会在debug下出来的lib文件名后加个<code>d</code>（比如<code>Effects11.lib</code>和<code>Effects11d.lib</code>其实是同一个项目<code>Effects11</code>build出来的库）；include路径中存放需要被<code>#include</code>的文件；一般使用src路径存放源文件；vs的工程文件把不管你乱七八糟存放的文件路径整理成它自己的一套映射路径，这种方案可能一些人很舒服，一些人很不舒服（比如我，乱七八糟路径太多，一个工程一个沙盒不好么）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;123&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人算不如天算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;龙书第六章中间的一个例子，用到了前几节所有的知识点。把这几百行行代码读懂就基本了解渲染管线的工作流程（日常读源码&lt;/p&gt;
&lt;h2 id=&quot;Demo-Debug&quot;&gt;&lt;a h
    
    </summary>
    
    
      <category term="Directx11" scheme="http://yoursite.com/tags/Directx11/"/>
    
      <category term="cpp" scheme="http://yoursite.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】February 2018 Progress Report</title>
    <link href="http://yoursite.com/2018/03/09/uchan-learn/"/>
    <id>http://yoursite.com/2018/03/09/uchan-learn/</id>
    <published>2018-03-09T09:36:43.000Z</published>
    <updated>2018-04-16T08:37:28.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>跟着油管上的外国教程指导下写了一个第三人称视角跳跃例子</p>
</blockquote>
<p><img src="https://oi3qt7c8d.qnssl.com/uchan.gif" alt="uchan.gif"></p>
<h2 id="使用的组件"><a href="#使用的组件" class="headerlink" title="使用的组件"></a>使用的组件</h2><p>人物模型：开源项目Unity-Chan（以下简称uchan)<br>使用到的Unity标准库：<br>Camera（MultipurposeCameraRig组件，使视角自动旋转跟踪角色后上方）<br>Characters （第三人称人物Prefab，用uchan内的女性化动作代替模型内的男性动作）<br>CrossPlatformInput（适配移动端的输入，添加简单的摇杆和较大的按钮）</p>
<h2 id="需要了解的知识"><a href="#需要了解的知识" class="headerlink" title="需要了解的知识"></a>需要了解的知识</h2><p>人物状态机，即图，在满足某个某个条件后状态即从某个顶点到达另一个顶点。一个顶点可以是段固定动画，也可以是一个动作树。</p>
<p>人物动画，是可以通过设置关键帧来进行组合剪辑来形成连贯的新动作。</p>
<p>第三人称人物Prefab的移动Animation和uchan的移动Animation有设计上的差异，前者具有移动的地面和脚本参数的设置（比如双腿交替频率），而uchan只是一个动画，即原地踏步而已。所以需要在uchan的移动动画的首帧至末帧添加一个参数来表示速度（从前者地面移动速度中获取数值），然后在移动逻辑里添加这个移动的向量，并且修改一下脚本参数使移动看起来较为顺畅。</p>
<h2 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h2><p>mac版本的unity（5.3.4版本）目前因为苹果的新的文件格式APFS，导致Unity打开项目时显示Project为空，按照网上内容新建一个分区可解决。但还是存在text元素不显示的的问题，我开始以为是哪里代码的问题，后来发现所有以前的项目的text都不见了，在win上显示正常，所以仍然是Unity的问题。</p>
<p>在win上利用AndroidStudio下载 Android-SDK 时卡住，在设置全局模式无效时，请不要使用国内乱七八糟的高校proxy，还是使用socks模式设置localhost:1080 靠谱的多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跟着油管上的外国教程指导下写了一个第三人称视角跳跃例子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://oi3qt7c8d.qnssl.com/uchan.gif&quot; alt=&quot;uchan.gif&quot;&gt;&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
      <category term="Game" scheme="http://yoursite.com/categories/Game/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】做两个游戏Demo（二）</title>
    <link href="http://yoursite.com/2018/02/16/%E5%81%9A%E4%B8%A4%E4%B8%AA%E6%B8%B8%E6%88%8FDemo%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/16/做两个游戏Demo（二）/</id>
    <published>2018-02-15T17:25:19.000Z</published>
    <updated>2018-04-15T15:14:29.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h1><p>我有好几篇博客是写了很长时间的，但是在原来那篇文章上续写然后注明时间的话，所有文章看起来就很时间错乱（你某个时间到底在干啥），还会有一种看起来好久没更新的感觉（我真的没拖更呀）。以后遇到时间间隔比较长的情况还是分篇写，这样两篇时间上并行的文章就看起来更有层次感一点，也比较利于自ji己de写tian作keng。</p>
<h1 id="LLDP"><a href="#LLDP" class="headerlink" title="LLDP"></a>LLDP</h1><h2 id="version-0-2-2-14"><a href="#version-0-2-2-14" class="headerlink" title="version 0.2 (2.14"></a>version 0.2 (2.14</h2><p>到目前完成了条形飞行道具的抛物线运动和运动过程中的旋转变换，这里使用了<code>rigidbody</code>这个物理模型，通过赋予加速度和速度的方式来代替原本的数学公式计算。（有关物理引擎的计算要使用<code>FixedUpdate</code>中）</p>
<p>优化了代码架构</p>
<h2 id="version-0-3-2-23"><a href="#version-0-3-2-23" class="headerlink" title="version 0.3 (2.23"></a>version 0.3 (2.23</h2><p>完成飞行物体初始化（即发射），绑定到UI界面中。使用<code>Queue</code>对飞行道具数量进行有限控制，销毁掉队列头部的飞行道具从而控制一定数量</p>
<p>重改并优化两个摄像机，自由视角摄像机(wasdSpaceCtrl+mouse)和鼠标控制左右边界平行拖动、滚轮缩放的远矩视角摄像机</p>
<h2 id="version-1-0-2-24"><a href="#version-1-0-2-24" class="headerlink" title="version 1.0 (2.24"></a>version 1.0 (2.24</h2><p>完成碰撞检测，主要是双方玩家、飞行道具(trigger)和地面碰撞器，以及盒型边界的接触回收。飞行初始参数可以控制但目前先使用范围随机参数。</p>
<p>此游戏已经有基本的发射、飞行、命中操作。（到这里有点想弃坑了，不过还是把它搞完把</p>
<h2 id="version-1-1"><a href="#version-1-1" class="headerlink" title="version 1.1"></a>version 1.1</h2><p>给物体加上了一个血条，并使用脚本使血条永远对着摄像机。因为摄像机群管理是我自己写的一套工具，没有使用网上推荐的那种方法，所以不能使用<code>Camera.Current</code>来确定，所以在工具里暴露一个方法，return回当前的摄像机。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Foreward&quot;&gt;&lt;a href=&quot;#Foreward&quot; class=&quot;headerlink&quot; title=&quot;Foreward&quot;&gt;&lt;/a&gt;Foreward&lt;/h1&gt;&lt;p&gt;我有好几篇博客是写了很长时间的，但是在原来那篇文章上续写然后注明时间的话，所有文章看起来就很
    
    </summary>
    
      <category term="Game" scheme="http://yoursite.com/categories/Game/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
</feed>
