<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XANA&#39;s Blog</title>
  <subtitle>I can be who you are</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-21T07:51:19.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XANA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cbv是个好东西</title>
    <link href="http://yoursite.com/2017/04/21/cbv%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF/"/>
    <id>http://yoursite.com/2017/04/21/cbv是个好东西/</id>
    <published>2017-04-21T05:17:49.000Z</published>
    <updated>2017-04-21T07:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>将狗里cbv与fbv的优劣不阐述, cbv的多态继承与python这种oo语言风格上就保持了一致, 无论是呈现逻辑(View)与业务逻辑(Mixin)都能很好的进行拼接, 更别说有大量的第三方扩展了</p>
<h2 id="1-CBVs的使用原则">1.CBVs的使用原则</h2><p>代码越少越好</p>
<p>永远不要重复代码</p>
<p>View应当只包含呈现逻辑, 不应包括业务逻辑</p>
<p>保持view逻辑清晰简单</p>
<p>不要将CBVs用作403, 404, 500的错误处理程序</p>
<p>保持mixin简单明了</p>
<h2 id="2-如何使用mixin">2.如何使用mixin</h2><p>在编程中mixin是指为继承它的class提供额外的功能, 但它自身却不能单独使用的类. 在具有多继承能力的编程语言中, mixin可以为类增加额外功能或方法. 在Django中, 我们可以使用mixin为CBVs提供更多的扩展性, 当然在类继承过程中, 我们推荐以下原则:</p>
<p>Django自身提供的View永远在最右边</p>
<p>mixin依次在以上view的左边</p>
<p>mixin永远继承自Python的object类型</p>
<h2 id="3-减少重复砌砖头?来看看通用视图">3.减少重复砌砖头?来看看通用视图</h2><p>为了深入了解Django的通用view, 到了痛苦地读源码(文末附)的时候了. 当然如果你不写Django也不妨看看, 读一读或许对模板系统的理解有所启发</p>
<p>来来来我们进入Django.views.generic (anyway), 从简到繁</p>
<h3 id="base-py">base.py</h3><p>颜料盒<code>base.py</code></p>
<table>
<thead>
<tr>
<th>class</th>
<th>Super</th>
<th>Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td>ContextMixin</td>
<td>object</td>
<td>A default context mixin that passes the keyword arguments received by get_context_data as the template context.</td>
</tr>
<tr>
<td>View</td>
<td>object</td>
<td>Intentionally simple parent class for all views. Only implements dispatch-by-method and simple sanity checking.</td>
</tr>
<tr>
<td>TemplateResponseMixin</td>
<td>object</td>
<td>A mixin that can be used to render a template.</td>
</tr>
<tr>
<td>TemplateView</td>
<td>ContextMixin, TemplateResponseMixin, View</td>
<td>A view that renders a template.  This view will also pass into the context any keyword arguments passed by the URLconf.</td>
</tr>
<tr>
<td>RedirectView</td>
<td>View</td>
<td>A view that provides a redirect on any GET request.</td>
</tr>
</tbody>
</table>
<p>三个继承<code>Object</code>的初始class, 这就好比绘图使用的三原色, 后面大部分的Mixin和View都是由它们变化而来. 其中:</p>
<p><code>ContextMixin</code>包含一个<code>get_context_data</code>方法, 用于渲染模板数据</p>
<p><code>View</code>是通用View,包含一个<code>as_view</code>的req到res响应方法, 提供http方法及其允许列表, 进行一些简单的检查</p>
<p><code>TemplateResponseMixin</code>是用于渲染模板的方法, 包括指定模板路径和渲染引擎</p>
<p>这个<code>TemplateView</code>是个简单的模板View, 继承与上面三个对象, 定义了<code>render_to_response</code>, 相当于静态页面, 无法动态加载数据</p>
<p><code>RedirectView</code>重定向View, 重写了<code>get</code>, 只需要处理GET请求的view, 使用<code>url</code>参数指定重定向页面</p>
<h3 id="detail-py">detail.py</h3><p>detail.py里定义了一系列对象信息展示的view, 核心View是最后的<code>DetailView</code></p>
<table>
<thead>
<tr>
<th>class</th>
<th>Super</th>
<th>Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td>SingleObjectMixin</td>
<td>ContextMixin</td>
<td>Provides the ability to retrieve a single object for further manipulation.</td>
</tr>
<tr>
<td>BaseDetailView</td>
<td>SingleObjectMixin, View</td>
<td>A base view for displaying a single object</td>
</tr>
<tr>
<td>SingleObjectTemplateResponseMixin</td>
<td>TemplateResponseMixin</td>
<td>-</td>
</tr>
<tr>
<td>DetailView</td>
<td>SingleObjectTemplateResponseMixin, BaseDetailView</td>
<td>Render a “detail” view of an object. By default this is a model instance looked up from <code>self.queryset</code>, but the view will support display of <em>any</em> object by overriding <code>self.get_object()</code>.</td>
</tr>
</tbody>
</table>
<p><code>SingleObjectMixin</code>扩展了<code>ContextMixin</code>, 使其能够使用model,query等获取对象, 然后通过设置定义的<code>context_object_name</code>去渲染模板内定义的字段</p>
<p><code>BaseDetailView</code>在<code>view</code>上使用了<code>SingleObjectMixin</code>, 给<code>get</code>方法添加了将对象转化为<code>context</code>(上下文)的操作, 使其成为一个能够请求处理对象的基础view, 但是还没有渲染方法, 不设置的原因是还能够绑定删除mixin成为<code>BaseDeleteView</code></p>
<p><code>SingleObjectTemplateResponseMixin</code>无说明, 但是从代码上看是除了渲染方法以外,额外定义默认对象渲染模板名称 默认页面后缀<code>_detail</code> 这个方法多次复用于base类view, 给基础对象处理类view提供渲染方法</p>
<p><code>DetailView</code>详情View, 单纯地继承<code>BaseDetailView</code>和<code>SingleObjectTemplateResponseMixin</code></p>
<h3 id="list-py">list.py</h3><p>list.py用于展示列表, 写法与<code>detail.py</code>类似, 核心View是<code>ListView</code></p>
<table>
<thead>
<tr>
<th>class</th>
<th>Super</th>
<th>Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td>MultipleObjectMixin</td>
<td>Context</td>
<td>A mixin for views manipulating multiple objects.</td>
</tr>
<tr>
<td>BaseListView</td>
<td>MultipleObjectMixin, View</td>
<td>A base view for displaying a list of objects.</td>
<td></td>
</tr>
<tr>
<td>MultipleObjectTemplateResponseMixin</td>
<td>TemplateResponseMixin</td>
<td>Mixin for responding with a template and list of objects.</td>
</tr>
<tr>
<td>ListView</td>
<td>MultipleObjectTemplateResponseMixin, BaseListView</td>
<td>Render some list of objects, set by <code>self.model</code> or <code>self.queryset</code>. <code>self.queryset</code> can actually be any iterable of items, not just a queryset.</td>
</tr>
</tbody>
</table>
<p><code>MultipleObjectMixin</code>与<code>SingleObjectMixin</code>不同的方式扩展了<code>ContextMixin</code>, 使其能够使用model等获取queryset之外, 额外提供了页面分页功能及其参数和方法</p>
<p><code>BaseListView</code>是一个能够请求处理对象列表的基础view, 但是还没有渲染方法</p>
<p><code>MultipleObjectTemplateResponseMixin</code>功能都差不多..</p>
<p><code>ListView</code>单纯继承上面两个</p>
<h3 id="edit-py">edit.py</h3><p>edit.p涉及了CRUD, 所以引入了<code>form</code>的概念, 核心View为<code>CreateView</code>,<code>UpdateView</code>,<code>DeleteView</code>,这里的View比较耳熟吧</p>
<table>
<thead>
<tr>
<th>class</th>
<th>Super</th>
<th>Docs</th>
</tr>
</thead>
<tbody>
<tr>
<td>FormMixinBase</td>
<td>type</td>
<td>-</td>
</tr>
<tr>
<td>FormMixin</td>
<td>six.with_metaclass(FormMixinBase, ContextMixin)</td>
<td>A mixin that provides a way to show and handle a form in a request.</td>
</tr>
<tr>
<td>ModelFormMixin</td>
<td>FormMixin, SingleObjectMixin</td>
<td>A mixin that provides a way to show and handle a modelform in a request.</td>
</tr>
<tr>
<td>ProcessFormView</td>
<td>View</td>
<td>A mixin that renders a form on GET and processes it on POST.</td>
</tr>
<tr>
<td>BaseFormView</td>
<td>FormMixin, ProcessFormView</td>
<td>A base view for displaying a form</td>
</tr>
<tr>
<td>FormView</td>
<td>TemplateResponseMixin, BaseFormView</td>
<td>A view for displaying a form, and rendering a template response.</td>
</tr>
<tr>
<td>BaseCreateView</td>
<td>ModelFormMixin, ProcessFormView</td>
<td>Base view for creating an new object instance. Using this base class requires subclassing to provide a response mixin.</td>
</tr>
<tr>
<td>CreateView</td>
<td>SingleObjectTemplateResponseMixin, BaseCreateView</td>
<td>View for creating a new object instance, with a response rendered by template.</td>
</tr>
<tr>
<td>BaseUpdateView</td>
<td>ModelFormMixin, ProcessFormView</td>
<td>Base view for updating an existing object. Using this base class requires subclassing to provide a response mixin.</td>
</tr>
<tr>
<td>UpdateView</td>
<td>SingleObjectTemplateResponseMixin, BaseUpdateView</td>
<td>View for updating an object, with a response rendered by template.</td>
</tr>
<tr>
<td>DeletionMixin</td>
<td>object</td>
<td>A mixin providing the ability to delete objects</td>
</tr>
<tr>
<td>BaseDeleteView</td>
<td>DeletionMixin, BaseDetailView</td>
<td>Base view for deleting an object. Using this base class requires subclassing to provide a response mixin.</td>
</tr>
<tr>
<td>DeleteView</td>
<td>SingleObjectTemplateResponseMixin, BaseDeleteView</td>
<td>View for deleting an object retrieved with <code>self.get_object()</code>, with a response rendered by template.</td>
</tr>
</tbody>
</table>
<p>注: six是一个python2和python3兼容库.</p>
<p><code>FormMixinBase</code>继承type定义了一个类型, 重写了<code>__new__</code>, 内容暂时看不懂:)</p>
<p><code>FormMixin</code>表单逻辑, 这里就定义了几个重要的属性和方法, 用户使用form<code>form_class</code>, 成功回调url<code>success_url</code> 表单合法<code>form_valid</code> 表单不合法<code>form_invalid</code>等</p>
<p><code>ModelFormMixin</code>进一步扩展<code>FormMixin</code>, 提供<code>fields</code>字段使用户能够处理<code>ModelForm</code>, <code>form_valid</code>中添加了保存操作</p>
<p><code>ProcessFormView</code>功能View, 重写了<code>View</code>的get和post方法(put直接return post方法) 使View能够在get的时候 渲染form内容, post的时候能提交form内容</p>
<p><code>BaseFormView</code> 相当于给<code>ProcessFormView</code>提供了表单处理逻辑, 相当于能处理一些简单的请求了</p>
<p><code>FormView</code> 继续给<code>BaseFormView</code>加上模板渲染引擎, 处理结果能从前台渲染出来了</p>
<p><code>BaseCreateView</code> 和<code>BaseFormView</code>类似, 不过其使用的是modelForm, <code>form_valid</code>会调用<code>form.save()</code>方法, <code>get</code>和<code>post</code>中执行了一句<code>self.object = None</code> 其作用于<code>SingleObjectMixin</code>的<code>get_context_data</code>方法中 (detail.py 103-107行,判断self.object不为空时执行取址操作 v1.9.5)</p>
<p><code>CreateView</code> 单纯基础<code>BaseCreateView</code>和<code>SingleObjectTemplateResponseMixin</code>,别忘了后者只是是一个轻度继承的渲染工具 默认页面后缀<code>_form</code></p>
<p><code>BaseUpdateView</code> 和<code>BaseCreateView</code>代码几乎相同, 除了<code>self.object = None</code>改为<code>self.object = self.get_object()</code> 作用于相同位置, 进行字典更新操作</p>
<p><code>UpdateView</code> 单纯基础<code>BaseUpdateView</code>和<code>SingleObjectTemplateResponseMixin</code> 默认页面后缀<code>_form</code></p>
<p><code>DeletionMixin</code> 新的颜料,因为功能使用不频繁所以单独放在这里, 提供了<code>delete</code>方法和<code>success_url</code>属性, <code>delete</code>执行<code>self.object.delete()</code>后会自动执行页面回调. 特别注意的是, 这里只有<code>post</code>方法return了<code>delete</code>方法, 其他方法暂不支持</p>
<p><code>BaseDeleteView</code> 给<code>BaseDetailView</code>绑定删除功能, 仅简单继承, 无页面渲染 简单的删除后跳转</p>
<p><code>DeleteView</code> 单纯继承<code>BaseDeleteView</code>和<code>SingleObjectTemplateResponseMixin</code>,  默认页面后缀<code>_confirm_delete</code>, 给一个删除页面, get即渲染一个页面, 给个表格, post到这个页面后将删除对象</p>
<h3 id="dates-py">dates.py</h3><p>这是一个基于时间的页面通用view模板, 但是除了博客之类的基本上用不着, 不阐述.</p>
<h2 id="假装参考">假装参考</h2><p><a href="http://www.weiguda.com/blog/11/" target="_blank" rel="external">weiguda的博客</a></p>
<p>(这篇博文原意是好的, 但是读着感觉变成<code>django-braces</code>文档了, 那我为啥不去看源文档呢呢)</p>
<p><a href="https://docs.djangoproject.com/en/1.9/topics/class-based-views/intro/" target="_blank" rel="external">django官方文档</a></p>
<p>这些通用view的具体简单实例.</p>
<p><a href="https://github.com/django/django/tree/master/django/views/generic" target="_blank" rel="external">django.views.generic源码</a></p>
<p>本文源码 顺带一提 Django中admin还是保持fbv风格(逃</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将狗里cbv与fbv的优劣不阐述, cbv的多态继承与python这种oo语言风格上就保持了一致, 无论是呈现逻辑(View)与业务逻辑(Mixin)都能很好的进行拼接, 更别说有大量的第三方扩展了&lt;/p&gt;
&lt;h2 id=&quot;1-CBVs的使用原则&quot;&gt;1.CBVs的使用原则&lt;
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>扯淡(三)</title>
    <link href="http://yoursite.com/2017/04/03/%E6%89%AF%E6%B7%A1%E4%B8%89/"/>
    <id>http://yoursite.com/2017/04/03/扯淡三/</id>
    <published>2017-04-03T13:05:03.000Z</published>
    <updated>2017-04-21T08:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>附<a href="http://mikumiku.com.cn/2016/04/27/扯淡二/" target="_blank" rel="external">上一篇</a></p>
<h2 id="关于他人">关于他人</h2><p>到目前为止, 我的很多想法又和大学的前半段时期又有所不同, 比如我常常挂在嘴边的</p>
<blockquote>
<p>人不能救人, 人只能自救</p>
</blockquote>
<p>表达的意思是这个世界是残酷的, 每个人只有改变自己的态度, 才能从本质上改变自己的处境.</p>
<p>我之前认为打击就是最好的鼓励</p>
<p>一个在悬崖边上挂着的人, 假装踹他下去比拉他上来更能激发他的求生欲</p>
<p>但是鉴于现在打击别人的人太多, 作为一个表演型人格者, 我又陷入了思考</p>
<p>或许在别人难过的时候拉一把, 或许也是不错?</p>
<blockquote>
<p>因为人都不缺孤独的时候</p>
</blockquote>
<p>现在的人太容易感动, 以至于陌生人搭个伞能温暖很久, 是这世间过于冷漠了么?</p>
<h2 id="关于塑身">关于塑身</h2><blockquote>
<p>体型不取决你每天的摄入的正反馈, 而在于每天的消耗的负反馈</p>
</blockquote>
<p>很多年才明白的一个道理…</p>
<h2 id="关于疾病">关于疾病</h2><p>看病这个问题我有自己非常个人化的一套价值观, 不能适用于大多数人</p>
<p>很多疾病对身体的伤害是不可逆的, 我们能做的只能减少其对身体副作用而已, 但是很多人花了太多时间太多精力, 想一次根治一劳永逸, 简直是异想天开. 然而很多人不明白或者不愿意明白这个事实</p>
<p>身体康复不是因为打针吃药, 身体康复永远只能通过自愈</p>
<blockquote>
<p>所以生病最好是什么都不做, 等待身体自愈从而提高抗性. </p>
</blockquote>
<p>有人说我在放屁</p>
<p>我可以和你讲个故事</p>
<p>我的外公是医生, 先天性心脏病, 现在80多岁经常住院, 但是和他同时期的医生很多天天爬山锻炼, 都死了几十年了, 他说静养他才能活这么久</p>
<p>除了我家里人和几个交好, 我对医生有本能的排斥反应</p>
<p>如果我信了医生说的话, 那么我初二就应该休学躺床来避免腰突带来的疼痛, 整天无所事事, 然后病情越来越重, 小概率半身瘫痪, 而不是每天一边读书一边锻炼背肌, 减少脊髓核对周围神经带来的压迫</p>
<p>那时候为了减轻疼痛, 吃药吃的胃疼, 贴膏药贴到皮肤溃烂, 都没有任何作用, 况且这些带来的痛苦远超出了其原本的疼痛</p>
<p>想想也是, 从消化系统的胃部出发要使胶囊里溶解后的有效分子作用到第4到第5节脊椎, 或外部皮肤出发用热量去感动它, 有脚趾想想都没卵用, 又何提这期间药物大概率提前作用? 或者根本无用?</p>
<p>我当时非常沮丧, 为什么全校几千人, 为什么我这么倒霉发生在我身上, 我要承受我这个年纪不应该承担的痛苦, 而且这种痛苦有可能会伴随终生</p>
<p>直到家里人问我要不要去打封闭的时候, 作为一个非常叛逆的初中小孩, 我罕见认真思考本源的问题</p>
<p>疼痛实际上是一种身体的保护机制, 为什么要逃离他? 切断了疼痛, 下次身体受到损伤时, 有谁还能保护我?</p>
<p>有个哲人说过一句话, 是谁我忘了, 放在这里好像也不太合适? 不过我觉得你能读懂我的意思:</p>
<blockquote>
<p>痛,证明你还活着</p>
</blockquote>
<p>身体是我最好的朋友, 他通过疼的方式, 用本能而直接的方式一直在向我诉说着这个地方有问题, 这个地方需要关注, 我为啥想着折磨他呢?</p>
<p>那几天我翻阅大量的关于腰突的医学资料, 如果我是医学生的话, 估计可以写一篇论文了. 那几天了解到病理原理和目前的N种的治疗方案后, 我坦然接受了其不能治愈的事实, 以及一直承受其带来的疼痛的准备. 那个时候, 我多大来着?</p>
<p>有次在电视上看到吃药治腰突的广告, 我花了15分钟从生物到病理层面上给家里人说明了这种方案的不可行性及其可笑之处, 这显然是个骗局</p>
<p>第一次出于对自己判断的认可, 首先手术肯定是绝对不会做的, 因为摘除突出髓核虽然能暂时从根本上处理生理问题, 但是一不能防止复发, 复发的后果很严重; 二是手术需要修养半年修养, 而当时我只是一心想摆脱义务教育, 没有时间可以耗在这个上面.</p>
<p>心里默默的骂了那个医生王八蛋以后, 在学校里我就完全按照自己的行程表行动, 那个时候我就基本不在意自己的脸了. <del>哪怕出于某种需要在全校面前脱裤子我也会秒做: 老子tm差点瘫痪了, 谁管你怎么看.</del> 那节课不舒服了, 我就会请假回寝室躺一会. 后来某一届智障班主任不允许了, 我一说就让家里人来接我回去, 说什么回寝室休息会影响其他人教室自习… <del>影响你mb啊, 你tm是zz吗?</del></p>
<p>然后开始用各种姿势锻炼腰肌, 动作不讲究标准, 只要腰肌变硬就是实质有效锻炼. 锻炼一段时间之后休息起来能保持坐立姿势的时间延长了许多, 到后来(包括现在)基本只要不去做一些动作已经感觉不到任何异样了</p>
<p>我突然想起去医院拍核共振查出腰突都是我强行拉家里人带我去的查的, 之前他们都完全不当一回事</p>
<p>所以我开始倾向自己做决定, 解决问题时倾向于探求问题本质</p>
<h2 id="作为即上">作为即上</h2><p>事情有对错之分, 不过那是出于人观测角度. 从物质角度上观测只有建设与不建设. 因此只要保持作为, 人总是在发展的, 做好事和做坏事我都是鼓励的, 最可恶的人就是沉默不作为的人, 他们消耗着不属于他们的物质, 对集体甚至他自己毫无贡献. </p>
<p>观点不同是很正常的, 但是最不可思议的事情是两个没有实践的人之间的矛盾, 而且这种事情常常发生. </p>
<p>有的人说话说得天花乱坠, 说一个朋友如何如何. 核心思想就是一个人很厉害, 我认识他, 所以我也很厉害. 每次遇到这种情况我总是草草结束话题, 因为你不能和他深究, 否则弄得两边都很尴尬.</p>
<p>玩游戏分两种目的,  当我意识到我玩游戏时得不到任何乐趣, 仅仅是为了排遣时间时, 我感到非常的沮丧, 因为我花了几年的时间, 仅仅是为了和其他人有共同的话题和度过艰难的义务教育时间. </p>
<p>校园生活有一个叫做无聊的致命缺陷, 如何对抗无聊, 成为校园生活的主要课题, 一部分人, 包括我, 选择了排遣时间这种最简单直接的方式, 还有一部分, 在犹豫中纠结, 最后的结果一样在排遣</p>
<p>或许, 主动脱离舒适区, 去寻求一些边缘经验是不错的选择</p>
<p>只有自己挣取的, 才有好东西. 送上门来的, 肯定是别人不要的</p>
<h2 id="关于独立">关于独立</h2><p>非常遗憾的事情是, 我在22岁的时候才终于在杭州能够养活自己, 我最初目标是成年之前</p>
<p>独立很重要, 关乎你在家里的地位. 这里的独立不单单指经济独立</p>
<p>独立标志着你真正的成年, 不然别怪父母把你当小孩子</p>
<p>我希望我的朋友也都是独立的人, 我认识的人也能早日找到自己的兴趣所在</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;附&lt;a href=&quot;http://mikumiku.com.cn/2016/04/27/扯淡二/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于他人&quot;&gt;关于他人&lt;/h2&gt;&lt;p&gt;到目前为止, 我的很多想法又和大学的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>这几天学到的Django项目总体架构思路</title>
    <link href="http://yoursite.com/2017/03/27/%E8%BF%99%E5%87%A0%E5%A4%A9%E5%AD%A6%E5%88%B0%E7%9A%84Django%E9%A1%B9%E7%9B%AE%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/03/27/这几天学到的Django项目总体架构思路/</id>
    <published>2017-03-27T10:09:45.000Z</published>
    <updated>2017-04-20T10:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原标题: 这几天搬砖所得</p>
</blockquote>
<p>搬了大概一周的砖头以后, 对<code>Django</code>这个框架的想法就是, 真tm好用, 又真tm难用. 好用的地方在于web开发中你一切遇到的所有问题, 都会有一套对应的解决方案; 难用的地方就是, 遇到的那些问题, 你必须要按照它的那套解决方案. 所以写<code>Django</code>的时候, 基本上不需要休息思考的时间, 就是查手册, 查源码, 搜方案, 面向stackoverflow编程, 必须用IDE, 爬断点, 文件改名全局索引, debug热点表达式, 不然手动打log工作量就不是人能承受的了.当然, 如果你是个熟练工的话,用<code>Django</code>的工作量可能是最小的…</p>
<h2 id="应用挂载">应用挂载</h2><p>Django是一个典型的<code>Restful</code>架构框架, 举个例子, 在<code>animal</code>应用下挂载一个猫应用, tree如下所示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── animal</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── settings.py</div><div class="line">│   ├── urls.py</div><div class="line">│   └── wsgi.py</div><div class="line">├── cat</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── admin.py</div><div class="line">│   ├── models.py</div><div class="line">│   ├── tests.py</div><div class="line">│   └── views.py</div><div class="line">└── manage.py</div></pre></td></tr></table></figure>
<p>如果在cat下继续挂应用, 比如挂喂养的子应用, 此时无法直接通过manage.py创建cat/feed应用, 需要手动构建, 具体做法如下(feed模块为手动构建):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── animal</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── settings.py</div><div class="line">│   ├── urls.py</div><div class="line">│   └── wsgi.py</div><div class="line">├── cat</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── admin.py</div><div class="line">│   ├── feed</div><div class="line">│   │   ├── __init__.py</div><div class="line">│   │   ├── models.py</div><div class="line">│   │   ├── templates</div><div class="line">│   │   │   └── feed</div><div class="line">│   │   │       └── home.html</div><div class="line">│   │   ├── urls.py</div><div class="line">│   │   └── views.py</div><div class="line">│   ├── models.py</div><div class="line">│   ├── tests.py</div><div class="line">│   ├── urls.py</div><div class="line">│   └── views.py</div><div class="line">└── manage.py</div></pre></td></tr></table></figure>
<p>先在项目setting.py中注册下列模块:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;cat&apos;</div><div class="line">&apos;cat.feed&apos;</div></pre></td></tr></table></figure>
<p>项目url配置, animal/urls.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">	url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">	url(<span class="string">r'^cat/'</span>, include(<span class="string">'cat.urls'</span>))</div><div class="line">)</div></pre></td></tr></table></figure>
<p>挂载app的url, 新建cat/urls.py, namespace可选</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    url(<span class="string">r'^feed/'</span>, include(<span class="string">'cat.feed.urls'</span>, namespace=<span class="string">'cat_feed'</span>))</div><div class="line">)</div></pre></td></tr></table></figure>
<p>就可以通过配置 cat/feed/urls.py, 配置子项目的MVC了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">	url(<span class="string">r'^$'</span>,  <span class="string">'cat.feed.views.home'</span>,  name=<span class="string">'home'</span>),</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="模板路径">模板路径</h2><p>Django的模板路径优先级是先去搜索<code>setting.py</code>下<code>TEMPLATES</code>变量里的<code>DIRS</code>对象中的路径下遍历的<code>templates</code>文件夹, 同名的按照先搜索到的为准. 因此除了一些公用模板(例如<code>base.html</code>和<code>404.html</code>), 一般子应用的模板不应该随意用长变量名的方式放在应用挂载下, 应该放在<code>templates</code>内同名的文件夹中,例如feed应用应该在feed目录下的templates文件夹中新建一个feed文件夹,在这个文件夹中放feed应用的专用模板, 这样挂载在子应用下的子应用内的view层就能通过<code>应用名/模板名</code>的方式去引用模板, 一层一层的extend上一层应用的<code>base.html</code>, 这样就遵循了代码组件化的原则, 类似于React.<br>同时使用<code>namespace</code>可以使路由可读性变得更好.</p>
<h2 id="自定义用户">自定义用户</h2><p>这里涉及到Django庞大的第三方库的使用, 一般第三方库都不会去重写User类, 倾向于到Django中<code>django.contrib.auth.model</code>去重写/继承/封装,例如要在User中添加字段的技巧</p>
<p>————————— 以下引用 —————————</p>
<p>本篇主要讨论一下User Model的使用技巧. 注意, 由于Django 1.5之后user model带来了很大的变化, 本篇内容只针对django 1.5之后的版本.</p>
<p><em>1.确定 User Model</em></p>
<p>我们推荐一下方式来确定某一django项目使用的user model:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用默认User model时</span></div><div class="line">&gt;&gt;&gt; from django.contrib.auth import get_user_model</div><div class="line">&gt;&gt;&gt; get_user_model()</div><div class="line">&lt;class <span class="string">'django.contrib.auth.models.User'</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># 使用自定义User model时</span></div><div class="line">&gt;&gt;&gt; from django.contrib.auth import get_user_model</div><div class="line">&gt;&gt;&gt; get_user_model()</div><div class="line">&lt;class <span class="string">'xxx.models.UserProfile'</span>&gt;</div></pre></td></tr></table></figure>
<p><em>2.使用settings.AUTH_USER_MODEL</em></p>
<p>自从django 1.5之后, 用户可以自定义User model了, 如果需要外键使用user model, 官方推荐的方法如下:</p>
<p>在settings中设置AUTH_USER_MODEL:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># settings.py</span></div><div class="line"><span class="comment"># 格式为 "&lt;django_app名&gt;.&lt;model名&gt;"</span></div><div class="line">AUTH_USER_MODEL = <span class="string">"myapp.NewUser"</span></div></pre></td></tr></table></figure>
<p>在models.py中使用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></div><div class="line">    author = models.ForeignKey(settings.AUTH_USER_MODEL)</div><div class="line">    title = models.CharField(max_length=<span class="number">255</span>)</div></pre></td></tr></table></figure>
<p>还有需要注意的是, 不要在外键中使用get_user_model().</p>
<p><em>3.自定义 User Model</em></p>
<p>方法1: 扩展 AbstractUser类</p>
<p>如果你对django自带的User model刚到满意, 又希望额外的field的话, 你可以扩展AbstractUser类:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># myapp/models.py</span></div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewUser</span><span class="params">(AbstractUser)</span>:</span></div><div class="line">    new_field = models.CharField(max_length=<span class="number">100</span>)</div></pre></td></tr></table></figure>
<p>不要忘了在settings.py中设置:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AUTH_USER_MODEL = <span class="string">"myapp.NewUser"</span></div></pre></td></tr></table></figure>
<p>方法2: 扩展 AbstractBaseUser类</p>
<p>AbstractBaseUser中只含有3个field: password, last_login和is_active. 如果你对django user model默认的first_name, last_name不满意, 或者只想保留默认的密码储存方式, 则可以选择这一方式.</p>
<p>参考官方文档:<br><a href="https://docs.djangoproject.com/en/1.7/topics/auth/customizing/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.7/topics/auth/customizing/</a></p>
<p>方法3: 使用OneToOneField</p>
<p>如果你想建立一个第三方模块发布在PyPi上, 这一模块需要根据用户储存每个用户的额外信息. 或者我们的django项目中希望不同的用户拥有不同的field, 有些用户则需要不同field的组合, 且我们使用了方法1或方法2:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># profiles/models.py</span></div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="keyword">from</span> flavors.models <span class="keyword">import</span> Flavor</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EasterProfile</span><span class="params">(models.Model)</span>:</span></div><div class="line">    user = models.OneToOneField(settings.AUTH_USER_MODEL)</div><div class="line">    favorite_ice_cream = models.ForeignKey(Flavor, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScooperProfile</span><span class="params">(models.Model)</span>:</span></div><div class="line">    user = models.OneToOneField(settings.AUTH_USER_MODEL)</div><div class="line">    scoops_scooped = models.IntergerField(default=<span class="number">0</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventorProfile</span><span class="params">(models.Model)</span>:</span></div><div class="line">    user = models.OneToOneField(settings.AUTH_USER_MODEL)</div><div class="line">    flavors_invented = models.ManyToManyField(Flavor, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>使用以上方法, 我们可以使用user.easterprofile.favorite_ice_cream获取相应的profile.</p>
<p>使用这一方法的坏处可能就是增加了代码的复杂性.</p>
<p>原文链接: <a href="http://www.weiguda.com/blog/28/" target="_blank" rel="external">http://www.weiguda.com/blog/28/</a></p>
<p>————————— 引用完毕 —————————</p>
<p>目前我用方法3的方式, 就是使用<code>OneToOneField</code>的方式, 因为这样做的显著降低代码耦合性, 使应用结构更加松散.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原标题: 这几天搬砖所得&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搬了大概一周的砖头以后, 对&lt;code&gt;Django&lt;/code&gt;这个框架的想法就是, 真tm好用, 又真tm难用. 好用的地方在于web开发中你一切遇到的所有问题, 都会有一套对
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>svn快速入门</title>
    <link href="http://yoursite.com/2017/03/23/svn%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/03/23/svn快速入门/</id>
    <published>2017-03-23T01:40:47.000Z</published>
    <updated>2017-04-21T07:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>寄人篱下, 生活所迫</p>
</blockquote>
<h2 id="Foward">Foward</h2><ol>
<li>此文写给能使用git, 但是当下需要非常迫切使用SVN的开发人员</li>
<li>本文默认你已经能够掌握git协议相关知识, 否则本文涉及到的相关术语看起来会造成一定的困惑.</li>
<li>既然是快速入门, 文本尽量用git与SVN作对比进行说明(并没有</li>
<li>本文远程仓库使用GitHub, 实际结合个人需要使用</li>
</ol>
<h2 id="Checkout">Checkout</h2><p>首先你要做的事情是Subversion(以下简称svn) checkout。由于<code>Git clones</code>将工作目录（你编辑文件的地方）与存储库数据(.git)分开，因此在工作目录中一次只能有一个分支。</p>
<p><code>svn checkouts</code>是不同的：它们将工作目录中的存储库数据混合在一起，因此对于checkout的每个分支和标记都有一个工作目录。对于具有许多分支和标签的存储库，检查所有文件可能是一个负担，因此你应该从部分checkout开始。</p>
<p>1.在GitHub上找到repository的导航主页.</p>
<p>2.在repository名称的下面, 点击<code>Clone or download</code>.</p>
<p>3.选择<code>Clone with HTTPS</code>, 复制其中的链接.</p>
<p>4.在本地repository中创建一个空的checkout:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ svn co --depth empty https://github.com/user/repo</div><div class="line">Checked out revision 1.</div><div class="line">$ <span class="built_in">cd</span> repo</div></pre></td></tr></table></figure>
<p>5.获取<code>trunk</code>分支. SVN会把<code>trunk</code>桥接映射到<code>Git HEAD branch</code>(通常指<code>master</code>).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ svn up trunk</div><div class="line">A    trunk</div><div class="line">A    trunk/README.md</div><div class="line">A    trunk/gizmo.rb</div><div class="line">Updated to revision 1.</div></pre></td></tr></table></figure>
<p>6.在<code>branches</code>路径下获取空的checkout. 这是所有非<code>HEAD</code>分支存在的地方，你将在这里做<code>feature branches</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ svn up --depth empty branches</div><div class="line">Updated to revision 1.</div></pre></td></tr></table></figure>
<p>my ex:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ tree                                                                                                                                                                </div><div class="line">.</div><div class="line">├── branches</div><div class="line">│   └── more_awesome</div><div class="line">│       ├── LICENSE</div><div class="line">│       ├── README.md</div><div class="line">│       └── <span class="built_in">test</span></div><div class="line">└── trunk</div><div class="line">    ├── LICENSE</div><div class="line">    └── README.md</div></pre></td></tr></table></figure>
<h2 id="创建分支">创建分支</h2><p>你也可以使用Subversion桥接到GitHub创建分支。</p>
<p>从svn客户端，通过更新确保<code>master</code>是最新的trunk：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ svn up trunk</div><div class="line">At revision 1.</div></pre></td></tr></table></figure>
<p>接下来，你可以使用<code>svn copy</code>创建新分支:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ svn copy trunk branches/more_awesome</div><div class="line">A    branches/more_awesome</div><div class="line">$ svn commit -m <span class="string">'Added more_awesome topic branch'</span></div><div class="line">Adding    branches/more_awesome</div><div class="line"></div><div class="line">Committed revision 2.</div></pre></td></tr></table></figure>
<p>现在你能确认新分支能在github的branch下拉栏里看到:</p>
<p><img src="https://help.github.com/assets/images/help/branch/svnflow-branch-snapshot.png" alt=""></p>
<p>你可以确认新分支存在于存储库的分支下拉列表中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git fetch</div><div class="line">From https://github.com/user/repo/</div><div class="line">* [new branch]    more_awesome -&gt; origin/more_awesome</div></pre></td></tr></table></figure>
<h2 id="提交修改">提交修改</h2><p>在添加了一些功能并修复了一些错误之后，你需要将这些更改提交给GitHub。这就和你平时使用svn一样。编辑文件，并使用<code>svn commit</code>记录你的更改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ svn status</div><div class="line">M    gizmo.rb</div><div class="line">$ svn commit -m <span class="string">'Guard against known problems'</span></div><div class="line">Sending    more_awesome/gizmo.rb</div><div class="line">Transmitting file data .</div><div class="line">Committed revision 3.</div><div class="line">$ svn status</div><div class="line">?    <span class="built_in">test</span></div><div class="line">$ svn add <span class="built_in">test</span></div><div class="line">A    <span class="built_in">test</span></div><div class="line">A    <span class="built_in">test</span>/gizmo_test.rb</div><div class="line">$ svn commit -m <span class="string">'Test coverage for problems'</span></div><div class="line">Adding    more_awesome/<span class="built_in">test</span></div><div class="line">Adding    more_awesome/<span class="built_in">test</span>/gizmo_test.rb</div><div class="line">Transmitting file data .</div><div class="line">Committed revision 4.</div></pre></td></tr></table></figure>
<h2 id="切换分支">切换分支</h2><p>要在分支机构之间切换，你可能需要首先检查<code>trunk</code>的内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn co --depth empty https://github.com/user/repo/trunk</div></pre></td></tr></table></figure>
<p>然后，你可以切换到另一个分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn switch https://github.com/user/repo/branches/more_awesome</div></pre></td></tr></table></figure>
<h2 id="一个有趣的网站"><del><a href="https://svnhub.com" target="_blank" rel="external">一个有趣的网站</a></del></h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;寄人篱下, 生活所迫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Foward&quot;&gt;Foward&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;此文写给能使用git, 但是当下需要非常迫切使用SVN的开发人员&lt;/li&gt;
&lt;li&gt;本文默认你已经能够掌握git协议相
    
    </summary>
    
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>数据储存区常见攻击(一)</title>
    <link href="http://yoursite.com/2017/03/22/%E5%B8%B8%E8%A7%81%E7%9A%84sql%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2017/03/22/常见的sql攻击/</id>
    <published>2017-03-22T10:12:34.000Z</published>
    <updated>2017-04-21T05:18:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注入解释性语言">注入解释性语言</h2><p>开发Web应用程序许多的核心语言使用解释器执行, 包括SQL, Perl, PHP, 基于解释性语言的执行方式, 产生了一系列代码注入的漏洞.有的时候攻击者会提交一些专门设计的输入, 通常是有特殊意义的语法, 向应用程序实施攻击, 如果这种攻击获得成功, 它就完全攻破了目标应用程序的组件.</p>
<h3 id="避开登录">避开登录</h3><p>不管访问操作是普通用户或者管理员, 应用程序访问数据库方式大致相同. Web应用程序对数据库储存区实施自主访问控制, 基于用户账户和类型构造语句查询来增删改查. 修改查询的成功注入攻击可以避开程序的自主访问控制并获取未授权访问.</p>
<p>如果需要安全保护的应用通过查询结果控制, 攻击就可以通过修改查询来更改应用的逻辑, 以下是一个实例:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'xana'</span> <span class="keyword">and</span> <span class="keyword">password</span> = <span class="string">'secret'</span></div></pre></td></tr></table></figure>
<p>这个查询通过匹配检索用户, 如果返回一名用户的资料, 则登录成功, 建立一个通过验证的会话. 在这种情况下, 如果知道管理员的用户名为<code>admin</code>,那他就可以通过提交以下用户名和任意密码, 以管理身份登录:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin'<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>应用程序将执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'admin'</span><span class="comment">--' AND password = 'foo'</span></div></pre></td></tr></table></figure>
<p>因为其中使用了注释符号(—), 所以查询等同于:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'admin'</span></div></pre></td></tr></table></figure>
<p>于是查询完全避开了密码检查…</p>
<ul>
<li>提示</li>
</ul>
<p>即时攻击者不知道管理员的用户名, 由于大多数应用程序第一个账户为管理用户, 而且程序一般查询<em>有可能返回几名用户的同时, 只会获取处理第一名用户</em>, 于是提交以下用户名, 以整个数据库第一个用户的身份登录:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">' OR 1=1<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>应用程序将执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">''</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">--' AND password = 'foo'</span></div></pre></td></tr></table></figure>
<p>因为其中使用了注释符号(—), 所以查询等同于:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">''</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>返回整个应用所有用户的资料…</p>
<h2 id="SQL注入">SQL注入</h2><p>首先要意识到一个问题, 随着安全意识增强, SQL注入漏洞愈来愈少, 很多主流应用使用API来避免SQL注入(如果正确使用的话), 有时候查找SQL注入漏洞是一件非常困难的事情, 需要渗透测试员检测不懈的查找和挖掘. 因此这里只能列举一些比较基本的情况, 然后进一步描述最新的技巧</p>
<h3 id="利用基本漏洞">利用基本漏洞</h3><p>当一个用户搜索Wiley出版的所有书籍时, 应用程序执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">from</span> books <span class="keyword">WHERE</span> publisher=<span class="string">'Wiley'</span> <span class="keyword">and</span> published=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>该查询检查了<code>books</code>表的每一行, 提取所有作者列为<code>Wiley</code>值的结果, 并以HTML页面的结果返回给用户. 其中<code>Wiley</code>是一个数据项, 它必须包含在单引号内, 与其它查询内容分开. </p>
<p>现在思考一下, 如果用户搜索所有由O’Reilly出版的书籍会出现什么情况. 此时进行以下查询</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">from</span> books <span class="keyword">WHERE</span> publisher=<span class="string">'O'</span>Reilly<span class="string">' and published=1</span></div></pre></td></tr></table></figure>
<p>解析过程中遇到的<code>Reilly&#39;</code>表达式, 这不是有效的SQL语法, 因此应用程序生成一条错误信息, 甚至返回客户端. 如果应用程序以这种方式进行, 那它就很容易受到SQL注入, 攻击者可以提交包含引号的任意查询. 例如输入</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Wiley' OR 1=1<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>此时进行以下查询</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">from</span> books <span class="keyword">WHERE</span> publisher=<span class="string">'Wiley'</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">-- and published=1</span></div></pre></td></tr></table></figure>
<p>获取到所有书籍表中的记录</p>
<ul>
<li>提示</li>
</ul>
<p>有时候不一定需要注释符号来处理字符串末尾的引号, 可以用一个包含字符串数据结束注入的输入, 例如:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Wiley' or 'a' = 'a</div></pre></td></tr></table></figure>
<p>生成以下查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">from</span> books <span class="keyword">WHERE</span> publisher=<span class="string">'Wiley'</span> <span class="keyword">OR</span> <span class="string">'a'</span> = <span class="string">'a'</span> <span class="keyword">and</span> published=<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>这是有效查询, 和1=1攻击相同的结果.</p>
<p>前面的几个例子很明显不会造成严重的安全威胁, 因为用户本来就能通过合法的方式访问到所有的书籍信息, 但是利用这种SQL注入漏洞可以从各种表中提取任何数据, 并提升数据库和数据库服务器中的权限. 所以不管在哪个应用程序中, SQL注入漏洞都应该被视为极其严重的威胁.</p>
<h3 id="注入不同语句类型">注入不同语句类型</h3><p>我们常常出现这样的印象, 即SQL注入漏洞只存在于SELECT语句中. 实际上任何SQL语句都可能存在缺陷.</p>
<h4 id="SELECT语句">SELECT语句</h4><p>SELECT语句用户从数据库中获取信息, SQL注入的攻击点通常是查询中<code>WHERE</code>子句, 因为<code>WHERE</code>子句在SELECT语句的最后, 攻击者可以将查询截短到输入的结束位置, 而不会使整个查询失效.</p>
<h4 id="INSERT语句">INSERT语句</h4><p>如果一个应用程序允许用户自主注册, 指定他们自己的用户名和密码, 就可以用下列语法将用户资料插入<code>users</code>表中:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username, <span class="keyword">password</span>, <span class="keyword">ID</span>, privs) <span class="keyword">VALUES</span> (<span class="string">'xana'</span>, <span class="string">'secret'</span>, <span class="number">2222</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>如果<code>username</code>或<code>passowrd</code>字段存在SQL注入漏洞, 那么攻击者就可以在表中插入任何数据. 然而要想这么做, 必须保证VALUES子句的其他部分正确执行, 特别是数据项的个数和类型. 如注入<code>username</code>字段时, 尝试提交以下输入:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo', 'bar', 9999, 0)<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>它将建立一个ID为9999, privs为0的账户. 如果privs决定账户权限, 那么攻击者就能利用它创建一个管理账户.</p>
<ul>
<li>提示</li>
</ul>
<p>当设法注入一个INSERT语句时, 如果无法知道需要提交多少个参数或者参数类型, 可以通过在VALUES子句中持续增加一个新的字段, 直到程序创建了期望的账户?</p>
<p>比如注入<code>username</code>字段时, 可以提交以下输入:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Foo')<span class="comment">--</span></div><div class="line">Foo', 1)<span class="comment">--</span></div><div class="line">Foo', 1, 1)<span class="comment">--</span></div><div class="line">Foo', 1, 1, 1)<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>大多数数据库会隐式地把整数转化为字符串, 所以可以在每个位置都使用一个整数. 这里不管其他字段, 会生成一个用户名为<code>foo</code>,密码为<code>1</code>的账户.</p>
<p>如果发现值1仍然遭到拒绝, 尝试使用值2000, 许多数据库也会隐式地将它转化基于数据的数据类型.</p>
<h4 id="UPDATE语句">UPDATE语句</h4><p>UPDATE语句运行机制与INSERT语句类似, 例如修改密码时, 应用程序可能执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="string">'newsecret'</span> <span class="keyword">WHERE</span> <span class="keyword">user</span> = <span class="string">'xana'</span> <span class="keyword">and</span> <span class="keyword">password</span> = <span class="string">'secret'</span></div></pre></td></tr></table></figure>
<p>如果这项功能存在SQL注入漏洞, 就可以输入以下用户名更新管理员的密码:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin'<span class="comment">--</span></div></pre></td></tr></table></figure>
<ul>
<li>提示</li>
</ul>
<p>因为无法提前知道应用程序会对专门设计的输入执行什么操作, 因此远程探查SQL注入漏洞十分危险. 修改<code>WHERE</code>子句有可能会使整个数据库表发生彻底的改变!譬如上面的攻击者已经提交了以下用户名:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin' or 1=1<span class="comment">--</span></div></pre></td></tr></table></figure>
<p>那么应用程序可能会执行下列查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="string">'newsecret'</span> <span class="keyword">WHERE</span> <span class="keyword">user</span> = <span class="string">'admin'</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>它会重设每一名用户的密码!</p>
<p>因此渗透测试员在尝试攻击一些不会更新现有数据的模块(比如登录)时, 也应该要留意这种风险, 因为一些应用程序在用户提交的用户信息后会进行各种UPDATE查询, 这意味着针对<code>WHERE</code>子句的攻击会迁移到其他语句之中, 给用户资料带来严重破坏. 在尝试探查SQL注入漏洞前, 必须确保应用程序所有者能接受这些无法避免的风险; 同时, 强烈建议他们测试前先对数据库进行完整备份.</p>
<h4 id="DELETE语句">DELETE语句</h4><p>与UPDATE语句相仿, DELETE语句也使用<code>WHERE</code>子句告诉库表更新那些行的数据. 在UPDATE语句里的警告同样适用这种攻击.</p>
<h2 id="避开过滤">避开过滤</h2><p>有时候, 易收SQL注入攻击的应用程序可能会执行各种过滤防止攻击者无限制地利用其中存在的缺陷. 例如, 删除或者净化某些字符, 或者阻止SQL关键字. 这种过滤通常非常同意避开, 这时可尝试使用各种技巧.</p>
<h3 id="避免使用被阻止的字符">避免使用被阻止的字符</h3><p>如果注入数字数据字段或者列名称, 不一定必须使用单引号. 可以通过各种字符串函数, 使用ASCII代码构建一个字符串. 如执行下列查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename, sal, <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'xana'</span></div></pre></td></tr></table></figure>
<p>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> ename, sal <span class="keyword">FROM</span> emp <span class="keyword">where</span> ename=<span class="keyword">CHR</span>(<span class="number">120</span>)||<span class="keyword">CHR</span>(<span class="number">97</span>)||<span class="keyword">CHR</span>(<span class="number">110</span>)||<span class="keyword">CHR</span>(<span class="number">97</span>)</div></pre></td></tr></table></figure></p>
<p>MS-SQL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> ename, sal <span class="keyword">FROM</span> emp <span class="keyword">where</span> ename=<span class="keyword">CHR</span>(<span class="number">120</span>)+<span class="keyword">CHR</span>(<span class="number">97</span>)+<span class="keyword">CHR</span>(<span class="number">110</span>)+<span class="keyword">CHR</span>(<span class="number">97</span>)</div></pre></td></tr></table></figure></p>
<p>如果注释符合被阻止, 设计注入数据, 使其不会破坏周围查询语法. 如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">' or 'a'='a</div></pre></td></tr></table></figure>
<p>代替</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">' or 1=1<span class="comment">--</span></div></pre></td></tr></table></figure>
<h3 id="避免使用简单确认">避免使用简单确认</h3><p>如果SELECT关键字被阻止, 尝试以下输入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SeLeCt</div><div class="line">%00SELECT</div><div class="line">SELSELECTECT</div><div class="line">%53%45%4c%45%43%54</div><div class="line">%2553%2545%254c%2545%2543%2554</div></pre></td></tr></table></figure>
<h3 id="使用SQL注释">使用SQL注释</h3><p>和一些语言一样, SQL支持行内注释注释内容包含在<code>/*</code>与<code>*/</code>符合之间. 可以使用注释替换注入数据中的空白符. 例如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span><span class="comment">/*SHIT*/</span>username,<span class="keyword">password</span><span class="comment">/*FUCK*/</span><span class="keyword">FROM</span><span class="comment">/*BITCH*/</span><span class="keyword">users</span></div></pre></td></tr></table></figure>
<p><del>MySQL中注释还可以插入关键字中,然而我现在的版本试了一下貌似不可以-_-</del></p>
<h2 id="二阶SQL注入">二阶SQL注入</h2><p>当数据首次插入数据库时,许多应用程序能够安全处理这些数据. 但是, 一旦数据存储在数据库中, 应用程序本身或其他后台进程可能以危险的的方式处理这些数据. </p>
<p>在一些应用程序中, 用户使用单引号时以转义的方式来确认, 例如前例搜索<code>O&#39;Reilly</code>时,应用程序执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> author, title, <span class="keyword">year</span> <span class="keyword">FROM</span> books <span class="keyword">WHERE</span> publisher  <span class="string">'O''Reilly'</span></div></pre></td></tr></table></figure>
<p>用户提交的单引号被转化为两个单引号, 从而传达给数据库的搜索项与用户输入的表达式具有相同的意义.</p>
<p>回到之前用户自我注册INSERT存在SQL漏洞的应用程序, 假如开发者修复了单引号配对导致的错误, 注册用户名<code>foo&#39;</code>来建立一下查询, 它将不会在数据库中导致错误:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username, <span class="keyword">password</span>, <span class="keyword">ID</span>, privs) <span class="keyword">VALUES</span> (<span class="string">'foo'''</span>, secret, <span class="number">2248</span> , <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>到目前为止一切正常. 但是假设应用程序还执行密码修改功能, 它要求通过验证的用户能访问这项功能, 而且要求提交原始密码, 然后从数据库中提取密码进行比对. 要完成核对任务, 它首先要从数据库中提取用户的用户名, 然后建立以下查询:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'foo''</span></div></pre></td></tr></table></figure>
<p>因为保存在数据库中的用户名是字面量字符串<code>foo&#39;</code>, 但应用程序访问请求是, 数据库即返回这个值; 只有在字符串传送至数据库时才使用配对的转义序列. 因此当应用程序重复使用这个字符串并将它嵌入另一个查询中时, 就会造成一个SQL注入漏洞. 当用户尝试修改密码时, 应用程序返回以下信息, 暴露了上述缺陷:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Unclosed quotation mark before the character string &apos;foo</div></pre></td></tr></table></figure>
<p>要利用这种漏洞, 攻击者只要注册一个包含专门设计的输入用户名, 然后尝试修改密码, 例如注册以下用户名:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; or 1 in (select password from users where username=&apos;admin&apos;)--</div></pre></td></tr></table></figure>
<p>注册步骤会被应用程序安全处理. 如果有人尝试修改这个用户的密码, 他注入的查询就会执行, 返回一个类型错误的信息, 泄露管理员的密码.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Microsoft OLE DB Provider for ODBC Drivers 错误 &apos;80040e07&apos;</div><div class="line">[Microsoft][ODBC Microsoft Access 驱动程序] 标准表达式中数据类型不匹配</div><div class="line">the varchar value &apos;fme69&apos; to a column of data type int.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注入解释性语言&quot;&gt;注入解释性语言&lt;/h2&gt;&lt;p&gt;开发Web应用程序许多的核心语言使用解释器执行, 包括SQL, Perl, PHP, 基于解释性语言的执行方式, 产生了一系列代码注入的漏洞.有的时候攻击者会提交一些专门设计的输入, 通常是有特殊意义的语法, 向应用
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Job-hunting</title>
    <link href="http://yoursite.com/2017/01/01/Job-hunting/"/>
    <id>http://yoursite.com/2017/01/01/Job-hunting/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-03-22T10:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>已经重新排版，尽量挑选出简洁有效的内容</del></p>
<p><del>已找到工作, 勿念</del></p>
<ol>
<li>我目前是杭电大三学生，热爱互联网，现想找一份实习工作，研发\测试\运维均可，主要在学校易受到工具、环境、规模限制，想在实践中进行学习。我要求不高，只是大三下学期每周还有2~4门水课，所以希望在实习地区在杭州之内，最好离下沙不要太远，包住另说:）。</li>
<li>我从大一才开始学编程，大学之前并没有算法等基础，可能这方面会有些薄弱。大学基本靠自学踩坑出来的。</li>
<li>主要使用的语言工具是Python3和NodeJS，能独立开发、部署中小型web服务。（举例：Flask+uWSGI+Nginx+Supervisor+MySQL 或Express+MongoDB+Supervisor 的http服务）熟悉测试流程，遵循封闭开发原则。</li>
<li>重度Linux/Vim党，IDE-fucker。</li>
<li>大二学过半年时间的iOS，在AppStore上丢了一个第三方登录-支付流程完整的应用。<del>尝试用ReactNative重写一次，坑太多，不了了之。</del>未来不打算写移动，仅证明自学能力。</li>
<li>写过一段时间的C\Java但不是很熟</li>
<li>不参加文档式的ppt比赛<del>如xx外包\x苗\xx网+\x战杯</del>，更喜欢快速开发出实际产品的game。参加过2次hackathon。</li>
</ol>
<p>欢迎推荐~HR请通过邮箱或者其他方式联系我</p>
<p>邮箱 xana.awaken@gmail.com </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;已经重新排版，尽量挑选出简洁有效的内容&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;已找到工作, 勿念&lt;/del&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我目前是杭电大三学生，热爱互联网，现想找一份实习工作，研发\测试\运维均可，主要在学校易受到工具、环境、规模限制，想在实践中进行学
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
      <category term="job" scheme="http://yoursite.com/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>Python3修饰器和线程锁</title>
    <link href="http://yoursite.com/2016/12/29/decorator/"/>
    <id>http://yoursite.com/2016/12/29/decorator/</id>
    <published>2016-12-29T11:16:21.000Z</published>
    <updated>2017-03-16T17:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python的修饰器">Python的修饰器</h2><p>先看一个很常见的例子</p>
<p>req.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">'before_request...'</span>, args, kwargs)</div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        result = func(*args, **kwargs)</div><div class="line">        print(<span class="string">'after_request...'</span>)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@after_request   </span></div><div class="line"><span class="meta">@before_request </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    print(<span class="string">'render index.....'</span>)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    index([],<span class="number">2</span>,c=<span class="string">'fk'</span>)</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">before_request... ([], 2) &#123;<span class="string">'c'</span>: <span class="string">'fk'</span>&#125;</div><div class="line">render index.....</div><div class="line">after_request...</div></pre></td></tr></table></figure>
<h3 id="原理解释">原理解释</h3><p>你写了一个很棒的通用方法，但是有点长。但是老板这时候来了需求，要求它在不同的情况下进行一些不同的操作（例如不同情境下的验证操作）。为了遵循封闭开发原则，尽量不去改已经完成的代码，或许修饰器是一个不错而优雅的选择。</p>
<p>先举个简单例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">awesome_method</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># do a lot!</span></div><div class="line">    print(<span class="string">'main func'</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_do_that</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># ready for that</span></div><div class="line">    print(<span class="string">'before func'</span>)</div></pre></td></tr></table></figure>
<p>你想在函数<code>awesome_method</code>前先执行<code>before_do_that</code>，并且要在同一个context下，如果直接修改通用代码，不仅不简洁，而且不优雅。这个时候你利用修饰符稍加修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@before_do_that</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">awesome_method</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># do a lot!</span></div><div class="line">    print(<span class="string">'main func'</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_do_that</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </div><div class="line">        <span class="comment"># ready for that</span></div><div class="line">        print(<span class="string">'before func'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div></pre></td></tr></table></figure>
<p>这里解释一下，在一个函数添加一个修饰符，相当于把awesome_method作为before_do_that的参数，转换成了一个新的同名函数，这里的before_do_that相当于一个工厂，进去的函数都必须通过加工。</p>
<p>那么多个修饰符的情况下，代码执行顺序如何？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'w1 ready go'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w2</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'w2 ready go'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@w2</span></div><div class="line"><span class="meta">@w1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'f1'</span>)</div></pre></td></tr></table></figure>
<p>若执行<code>f1()</code>，此时相当于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w2(w1(f1))()</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">w2 ready go</div><div class="line">w1 ready go</div><div class="line">f1</div></pre></td></tr></table></figure>
<p>带参数写法如下，这次用<code>after</code>举例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        result = func(*args, **kwargs)</div><div class="line">        print(<span class="string">'after_request...'</span>, args, kwargs)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@after_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    print(<span class="string">'render index.....'</span>)</div></pre></td></tr></table></figure>
<p>此时执行 <code>index([],2,c=&#39;fk&#39;)</code>，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">render index.....</div><div class="line">after_request... ([], 2) &#123;&apos;c&apos;: &apos;fk&apos;&#125;</div></pre></td></tr></table></figure>
<p><code>**</code>表示对键值对的引用，关于<code>**</code>的用法，我们可以甚至可以写一个漂亮的字典构造函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="keyword">lambda</span> **x:x</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a(a=<span class="number">2</span>,c=<span class="number">2</span>)</div><div class="line">&#123;<span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'a'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<p>如果多个修饰符写的不好看，还有修饰符带参数的闭包写法</p>
<p>dec.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Before</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'some thing before..'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">After</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'some thing after..'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Filter</span><span class="params">(before_func, after_func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(main_func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, kargs)</span>:</span></div><div class="line"></div><div class="line">            before_result = before_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (before_result != <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> before_result</div><div class="line"></div><div class="line">            main_result = main_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (main_result !=  <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> main_result</div><div class="line"></div><div class="line">            after_result = after_func(request, kargs)</div><div class="line">            <span class="keyword">if</span> (after_result != <span class="keyword">None</span>):</div><div class="line">                <span class="keyword">return</span> after_result</div><div class="line"></div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> outer</div><div class="line"></div><div class="line"><span class="meta">@Filter(Before, After)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Index</span><span class="params">(request, kargs)</span>:</span></div><div class="line">    print(<span class="string">'index'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    Index([],<span class="number">2</span>,c=<span class="string">'fk'</span>)</div></pre></td></tr></table></figure>
<p>这个闭包利用了<code>Filter</code>和<code>outer</code>的三个参数函数，重新改写执行顺序，直到其中有一个函数抛出返回值为止。</p>
<p>至此关于修饰符的内容基本交代完毕</p>
<h2 id="多线程">多线程</h2><p>// Todo:</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python的修饰器&quot;&gt;Python的修饰器&lt;/h2&gt;&lt;p&gt;先看一个很常见的例子&lt;/p&gt;
&lt;p&gt;req.py&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
    
      <category term="Python3" scheme="http://yoursite.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】项目期末总结</title>
    <link href="http://yoursite.com/2016/12/22/program-final-summary/"/>
    <id>http://yoursite.com/2016/12/22/program-final-summary/</id>
    <published>2016-12-22T11:49:20.000Z</published>
    <updated>2016-12-30T06:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>系统架构为BS架构，基于Flask和React的web应用</p>
</blockquote>
<p><a href="http://github.com/imxana/ec_forum" target="_blank" rel="external">项目地址</a> (托管于Github)</p>
<h2 id="开发技术栈">开发技术栈</h2><h3 id="Python3">Python3</h3><p>osx下安装python3</p>
<pre><code>brew <span class="keyword">install</span> python3
</code></pre><p>ubuntu下安装python3(自带3.4版本)</p>
<pre><code>apt-<span class="built_in">get</span> install <span class="keyword">python3</span>
</code></pre><p>Python, 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。</p>
<p>为什么在这个项目选择Python而不是nodejs，因为使用Python开发快，语言简洁，没那么多技巧，所以读起来很清楚容易。加上Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。而且构架选择多，开源社区活跃。缺点是国内文档基本没有，需要自己看懂。</p>
<h3 id="Flask">Flask</h3><p>安装flask</p>
<pre><code>pip3 <span class="keyword">install</span> flask
</code></pre><p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。优点是小，定制性高，能让开发人员从0开始享受折腾的结果。缺点也就是重复造轮子，不过flask插件多，能提高开发效率。</p>
<h3 id="MySQL">MySQL</h3><p>osx下安装mysql</p>
<pre><code>brew <span class="keyword">install</span> mysql
</code></pre><p>ubuntu下安装mysql</p>
<pre><code>1. sudo apt-get <span class="operator"><span class="keyword">install</span> mysql-<span class="keyword">server</span>
<span class="number">2.</span> apt-<span class="keyword">get</span> isntall mysql-client
<span class="number">3.</span> sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libmysqlclient-dev</span>
</code></pre><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<p>MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>
<p>对我来说，sql型数据库与其说是成熟，不如说是历史遗留问题，用拼接字符串组成sql语句的执行方式，不但留下了注入式攻击漏洞，而且本身也让人多了额外的学习成本，来学习一些奇奇怪怪的语法。nosql不仅完美与JSON贴合，而且因为本身键值对的数据结构，可以放心的进行删除、插入操作，不用担心什么外键的问题。抹去一个人的数据，其所有子数据都会消除，就不用再一条条的到别的表去查找删除。尤其的表多了的时候。</p>
<p>选择MySQL的原因一部分是因为没有办法，很多公司还是用的这种数据库，MySQL是开源的这点还是值得肯定的。针对MySQL的问题有很多在社区中得到了解决。</p>
<h2 id="开发环境">开发环境</h2><h3 id="Unix-like">Unix-like</h3><p>不管如何，linux永远是最适合开发的系统环境。其对用户最小开发程度的限制，能让你高度定制你的生产环境。只要是一台Linux的终端，你就可以从0开始把它完全复原成你所用过的那台Linux的环境。有很多问题，不像win，你可以从系统层次上去解决这类问题，例如启动项，进程管理这一类。我们可以写一些简单脚本来做到一下很酷的事情。</p>
<h3 id="Vim">Vim</h3><p>下载</p>
<pre><code>apt-<span class="built_in">get</span> install <span class="keyword">vim</span>
</code></pre><p>vim像是一杯酒，越酿越醇，在unix-like上使用nvim，在一些插件的辅助下，已经成为unix-like下的最强大的编译器。</p>
<h2 id="部署环境">部署环境</h2><h3 id="Ubuntu">Ubuntu</h3><p>Ubuntu下能快速搭建工作环境，安装系统后，跑个脚本，把自己开发需要的环境，工具（git/vim和自己的配置）什么的一通自动安装好，一切简单快捷。</p>
<p>Ubuntu有开源的第三方软件安装，因此漏洞少，开源反而安全。</p>
<h3 id="Nginx">Nginx</h3><p>下载</p>
<pre><code>apt-<span class="keyword">get</span> install nginx
</code></pre><p>Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器。拥有负载均衡的功能，但是在单台服务器上无法体现。</p>
<h3 id="uWSGI">uWSGI</h3><p>下载</p>
<pre><code>pip3 <span class="keyword">install</span> uwsgi
</code></pre><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。</p>
<h3 id="Supervisord">Supervisord</h3><p>下载</p>
<pre><code>pip <span class="keyword">install</span> supervisor
</code></pre><p>Supervisor是一个客户/服务器系统，它可以在类Unix系统中管理控制大量进程。Supervisor使用python开发，有多年历史，目前很多生产环境下的服务器都在使用Supervisor。</p>
<h2 id="测试工具">测试工具</h2><h3 id="unittest（单元测试）">unittest（单元测试）</h3><p>The Python unit testing framework, sometimes referred to as “PyUnit,” is a Python language version of JUnit, by Kent Beck and Erich Gamma. JUnit is, in turn, a Java version of Kent’s Smalltalk testing framework. Each is the de facto standard unit testing framework for its respective language.</p>
<p>下载</p>
<pre><code>pip3 <span class="keyword">install</span> unittest
</code></pre><h3 id="curl（脚本测试）">curl（脚本测试）</h3><p>下载</p>
<pre><code>apt-<span class="keyword">get</span> install curl
</code></pre><p>curl  is  a  tool  to  transfer  data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS,  TELNET  and TFTP). The command is designed to work without user interaction.</p>
<p>curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections,cookies, file transfer resume, Metalink, and more. As you will see below, the number of features will  make  your  head spin!</p>
<p>curl is powered by libcurl for all transfer-related features. See libcurl(3) for details.</p>
<h2 id="遇到的问题">遇到的问题</h2><h3 id="pymysql无法使用localhost连接MySQL的解决方法">pymysql无法使用localhost连接MySQL的解决方法</h3><p>我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行</p>
<p>源抛错代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(host=<span class="string">'127.0.0.1'</span>,user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure>
<p>解决方法：使用mysql中的.sock文件进行连接，放弃通过IP匹配本地的方法。</p>
<p>执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin variables| grep socket</div></pre></td></tr></table></figure>
<p>查看socket所在位置，然后尝试使用格式如下的连接     </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>,unix_socket=<span class="string">'/var/run/mysqld/mysqld.sock'</span>)</div></pre></td></tr></table></figure>
<h3 id="MySQL的问题以及解决过程">MySQL的问题以及解决过程</h3><p>我一开始使用MySQL我就后悔了，因为我深深的体会到，在sql型数据库中，当表之间关系复杂以后，要删除一条信息是有多么的困难。而几乎所有的第三方MySQL库使用的还是原生的sql语句。且不说sql语句的拼接被x问题，sql的高阶语法本身就非常的反人类。加上我已经习惯了noSQL带来的好处（直接字典\对象操作），仿佛就从天堂到了地狱。</p>
<h4 id="The_problem">The problem</h4><p>前台说请求报错，她那里格式正常。启动服务器简单脚本测试，发送get正常，post报<code>pipeBroken</code>。重启应用，好了。过了半天，一发post，跪。</p>
<h4 id="Debug">Debug</h4><p>get能用，post挂了，肯定是数据库问题，看了下错误类型，连接管道断了，那就是pymysql的问题。</p>
<p>第一反应，连接对象过期了，定期更新it，无解。</p>
<p>加快更新频率，无解。</p>
<p>启用连接池，加大连接节点数，加快更新频率，均无解。此时已过2周，暂时用无限手动重启应用的方法应付问题。</p>
<p>通过<code>supervisor</code>查应用日志，发现启动应用大约过了半天时间一发<code>post</code>服务器才会<code>pipeBroken</code>，而报错期间并没有主动断开。就是过期了啊（葛优瘫）</p>
<h4 id="Fix_up">Fix up</h4><p>经过一段时间的思考，我感觉是MySQL本身的问题，查了一会相关资料，把服务器日志<code>pipeBroken</code>的报文Google了一下，发现是MySQL长时间没有操作，进入睡眠了。。</p>
<p>进入MySQL交互界面输入</p>
<pre><code><span class="operator"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%timeout%'</span>;</span>
</code></pre><p>发现<code>wait_timeout</code>的值为28800s，相等于8小时没操作MySQL就会断开连接。于是我用最简单暴力的方法：</p>
<pre><code><span class="operator"><span class="keyword">set</span> <span class="keyword">global</span> wait_timeout=<span class="number">2880000</span>;</span>
</code></pre><p>服务器再也不频繁抛错了。至于之前的那些解决方案……先留着那些代码吧</p>
<h4 id="improve">improve</h4><p>修改MySQL变量不是权宜之计，MySQL休眠是因为长期没有操作，所以自动断开连接节点，而且不是所有的服务器都支持修改MySQL全局变量的，有时候root也不能改- -。所以用计时器每隔一段时间向MySQL发一次查询，重置连接时间。若还抛出错误<code>pipeBroken</code>的时候换一条新的管道。</p>
<p>实际效果：MySQL能够平稳的运行好几天，几天之内查询成功率在90%左右，仍然不太能够令人满意，但是相比以前，已经进步了很多。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;系统架构为BS架构，基于Flask和React的web应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/imxana/ec_forum&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
  </entry>
  
  <entry>
    <title>大三读《黑客与画家》</title>
    <link href="http://yoursite.com/2016/11/28/artists_and_hackers/"/>
    <id>http://yoursite.com/2016/11/28/artists_and_hackers/</id>
    <published>2016-11-28T00:10:52.000Z</published>
    <updated>2016-12-07T13:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Forward">Forward</h1><p>实际上，作为一本2004年发行的书，我之前已经「预读」过这本书，那个时候互联网创业可能更加的「流行」，那个时候，大概就是几年前吧，绝对想不到创业能够发展的如此迅速。</p>
<h1 id="校园监狱">校园监狱</h1><p>这种情况到目前仍然没有改变。在十六、十七世纪时，青少年作为社会的低级成员，在社会中发挥了更大的作用，比如学徒，帮手等，即时是最没用的那些青少年，招进来也能进行一些基础工作，比如倒水，扫地等。那个时候成年人对于青少年的看法也没有像现在这么糟糕。当然，如果青少年能够尊重成年人，成年人也会更加尊重青少年，但是我并没有看到这一点，一种所谓的「平等」和「青春期」的概念在做崇，两者之间的鸿沟被划的很开。青少年从在成年之前并没有被教育自己是低级成员，但是成年后却严格笃定这一点。</p>
<p>生活也是一名实践学科。在学校里的畸形生活，某种程度上类似于监狱。然而最大的问题是，并不告诉青少年们这一点，而把监狱交给犯人来管理。一面告诉你你是平等的，一面限制了你的诸多自由。我不认为「校园是社会的缩影」，社会要更友好一些。</p>
<p>所谓的老师的教学内容，不过也是短暂实践中自己的不完全总结。而且很多老师，很有可能未曾离开校园氛围，从未接触过社会，我把这种老师称为「老狱卒」。而一些「监狱长」则洞悉监狱规则，会在监狱中保持着微妙的平衡。有些老师很优秀，但是仅仅是昙花一现，不能代表整体。</p>
<p>毕业生一旦就业，人生立即跨入另一个阶段，没有任何的缓冲空间。这也难怪人一到社会中去时，就对曾经所处的青少年有如此大的意见。</p>
<p>另外，校园的最大缺陷在于无聊。能获得的信息极其有限，青少年心智发展几乎为0。不阐述。</p>
<h1 id="竭泽而渔">竭泽而渔</h1><p>「创新，创业！」</p>
<p>首先要明白一点，蛋糕再大，也是有限的。标题有些过激了，我想表达的是，创业这个词被过度消费了。</p>
<p>实际上到目前为止，能够成为「new idea」的东西已经不多，到目前为止，你现在还能想到未被实践过的idea吗？某种程度上，是因为技术发展速度，被大大放缓了。</p>
<p>从技术型创新，到功能型创新，到开发工具及其开发工具的创新，包括市场上出现各种平台（然而平台上却都是空空如也，如果一个大公司打算收购你，我猜大概不是因为你做的东西有多棒，而是看中了你背后的使用用户群体。）到最后就是以上创新的各种功能排列组合式创新，等到这种类型的创新的蛋糕也被分完了，就只能够等着新蛋糕的出现。不过那个时候，你有信心与那些工具成熟，流水线作业的大公司竞争吗？</p>
<p>然后有人说，我们不比创新，我们比运营，在某些方面比别人做的更好。我的想法是，不如加入一个大公司，因为是在做同样的事情，虽然自由更少，但大公司一般做的更好。</p>
<p>题外话：一次创作者被频繁打击，被ZF，被愤青，被同行，一些优秀的作品被埋没，如果不从政策上改革，有些行业将永无出头之日。</p>
<h1 id="校园招聘">校园招聘</h1><p>（前几天的观摩招聘的感想作业，800字）</p>
<p>观摩的感想，说实话和大一去看的时候差不多，毕竟是面向整个学校的招聘，不是单单只有计算机相关的。</p>
<p>总结一下，有些企业是真的不靠谱。</p>
<p>这种观摩，说句实话，有点像监狱里的人在释放之前，让你先见见外面的变化。和我一起的几个小伙伴面对面试人员，不由不同程度地表现出了自己的恐惧。</p>
<p>说实话，我有点被他们的恐惧感染了，不过总体上心态还是很轻松，不是因为我有多厉害，而是我本身对这种市场一样招聘没有多大兴趣，而且就我所见，需要到学校里来招聘的，一般都是找不到人的。难道你希望你的同事都是20出头，水平可能还不如你的毕业生？</p>
<p>但是在计算机相关的职位招聘里，我看到的需求的职位，仍然没有什么变化，有点让我失望。就从语言来看，整个会场就是 C，Java，C。Java，甚至连.net的也不多，互联网氛围，工程师导向的企业并不多，更多的为了招聘熟练工。这侧面反映了那个企业并不了解自己使用的技术，并不知道Python等其他高级语言的好处，只是觉得如果我使用这些老的工具的话，如果员工跑了，我能更快的找到替代的人（然而他们根本也没想过为什么他们不愿意留下来，或者会被淘汰）。从职位来看，永远都是那么几个职位，有没有CTO问问自己，我们为什么需要测试？我们为什么需要运维？看别人有，所以我们也要有，应该吧。</p>
<p>假如我是创业者，我的竞争对手开始在招Oracle工程师，那我会松一口气；如果他们开始找lisp工程师了，我会如坐针毡，因为这是一家黑客导向的企业，他们内耗少效率极高，创新与开发速度会很快，我们的进度将永远赶不上他们。（xana注：引用）</p>
<p>一般来说，付出与收获在总体上呈正比，在个体上却不一定。运气某种程度上呈决定性作用。有点人只是简历写的好，然而那些有大量开源项目，却不屑于写简历的人，却被某些不识货的企业鄙夷。当然，hacker肯定希望加入工程师导向的企业，尊重也很重要，至少是互相尊重。</p>
<p>因为我本身不太喜欢这种市场一样的招聘，置身于人海之中，感觉自己像商品一样在买家中随波逐流，所以并没有仔细看他们的职位和要求。不过看到一家学长创业的企业，工程师导向，人员需求要求非常清晰，不像「软件开发工程师」这样泛泛而谈，居然还把就职福利也写上了，画风明显和其他海报不一样，一看就比其它靠谱多了。一般一个企业会把自己最好的一面展示给别人看，有些企业展示的东西都让人看不下去了，那那些没有看见的部分呢？</p>
<h1 id="不能说的话">不能说的话</h1><p>你会发现我到现在有些地方说的很含糊，有种欲言又止的感觉。就算在国外，有些话也是不能说的。这种规则会使你养成小心谨慎的习惯，甚至有些神经过敏。在批判一个东西时，往往还是需要肯定它的部分。因为人们不太能接受自我的否定（尽管批评往往是对的），当权者往往利用这一点来笼络民心，排除异己。</p>
<p>到现在，你被问到觉得有什么话是不能说的，你可能回答「没有」，但是从从长远的历史上看，从日心说到自然选择，真理一般都难以被大众接受。或者我们换一种说法，有什么话说了，你身边的人会不高兴？</p>
<p>我们谈笑风生地+1s，为什么没有被打死？因为膜法师已经有了民众基础，你说个别的试试？</p>
<p>(待续)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Forward&quot;&gt;Forward&lt;/h1&gt;&lt;p&gt;实际上，作为一本2004年发行的书，我之前已经「预读」过这本书，那个时候互联网创业可能更加的「流行」，那个时候，大概就是几年前吧，绝对想不到创业能够发展的如此迅速。&lt;/p&gt;
&lt;h1 id=&quot;校园监狱&quot;&gt;校园监狱&lt;/h
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】pymysql无法使用localhost连接MySQL的解决方法</title>
    <link href="http://yoursite.com/2016/11/09/pymysql_localhost/"/>
    <id>http://yoursite.com/2016/11/09/pymysql_localhost/</id>
    <published>2016-11-09T12:05:27.000Z</published>
    <updated>2016-12-29T11:25:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行</p>
<p>源抛错代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(host=<span class="string">'127.0.0.1'</span>,user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure>
<p>解决方法：使用mysql中的.sock文件进行连接，放弃通过IP匹配本地的方法。</p>
<p>执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin variables| grep socket</div></pre></td></tr></table></figure>
<p>查看socket所在位置，然后尝试使用格式如下的连接     </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pymysql.Connect(user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>,unix_socket=<span class="string">'/var/run/mysqld/mysqld.sock'</span>)</div></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/6885164/pymysql-cant-connect-to-mysql-on-localhost" target="_blank" rel="external">原stackoverflow上的回答</a></p>
<p>思考</p>
<p>可以写一个.sh脚本，动态生成配置文件，而不需要手动修改它</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的阿里服务器快过期了，在迁移项目的部署过程中抛了一个pymysql不能连接127.0.0.1的错误，host改成localhost也不行&lt;/p&gt;
&lt;p&gt;源抛错代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】Python中你不应该做的事</title>
    <link href="http://yoursite.com/2016/11/05/things-not-to-do-in-python/"/>
    <id>http://yoursite.com/2016/11/05/things-not-to-do-in-python/</id>
    <published>2016-11-04T16:05:27.000Z</published>
    <updated>2016-11-14T10:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题">标题</h1><p>译文标题：Python中你不应该做的事</p>
<p>原文标题：Things You Shouldn’t Do in Python</p>
<p>原文链接: <a href="https://www.airpair.com/python/posts/things-not-to-do-in-python" target="_blank" rel="external">https://www.airpair.com/python/posts/things-not-to-do-in-python</a></p>
<h1 id="疑难句">疑难句</h1><p>1</p>
<p>“Premature optimization is the root of all evil (or at least most of it) in programming.” — Donald Knuth</p>
<p>“在编程中过早的优化是一切（或至少大部分）罪恶的根源。” - 高德纳</p>
<p>2</p>
<p>A word of advice: If you program outside the conventional rules, make heavy use of syntax checkers and secondary tools to ensure that the only code that disobeys the rules is precisely the code you intended.</p>
<p>一句忠告：如果您在传统的规则之外进行编程，请不要吝啬大量使用语法检查和辅助工具，以确保唯一违背规则的那些代码能达到所预期的结果。</p>
<p>3</p>
<p>“By understanding a machine-oriented language, the programmer will tend to use a much more efficient method; it is much closer to reality.” (Knuth again)</p>
<p>“通过了解一个面向机器的语言，程序员会倾向于使用一种更有效的方法，它更接近现实”。（又是克努特）</p>
<p>4</p>
<p>Standard python dictionaries are very useful. However, sometimes it is more convenient to use unquoted class member names to gain access to data stored in dictionaries rather than brackets and quoted strings.</p>
<p>标准的Python字典是很有用。但是有时使用不带引号的类成员的名字来访问在字典中存储的数据比括号和引用字符串数据更加方便。</p>
<p>5</p>
<p>Conclusion</p>
<p>There are aesthetics with strong proponents and opponents but:</p>
<ul>
<li>There really are no objective Do’s and Don’ts in programming.</li>
<li>Anything for which there is machine code is permitted.</li>
<li>Learn new “dirty tricks”, not just “good practices”.</li>
<li>Use what works and make it useful for others.</li>
<li>Don’t make it cost too much (unless it pleases you to do so).</li>
<li>Explain the why and how of unconventional methods with care and efficiency.</li>
<li>Accept criticism gladly, because surely you will be rightly criticized.<br>Don’t just work… PLAY! Make mistakes!</li>
</ul>
<p>结论</p>
<p>有着相当一部分很强烈的支持和反对的美学，但是请注意：</p>
<ul>
<li>在编程中真的有没有客观上的Do’s和Don’ts。</li>
<li>任何事情上使用机器代码都是允许的。</li>
<li>学习新的“肮脏把戏”，而不仅仅是“良好做法”。</li>
<li>使用有效的工具，并使其让他人也可用。</li>
<li>不要为一件事花费太多（除非你高兴这样做）。</li>
<li>谨慎而效率地解释为何以及如何使用那些非常规的方法。</li>
<li>开心接受批评，因为你一定会得到正确的批评。</li>
<li>不要只是工作…去享受！去犯错误！</li>
</ul>
<p>6</p>
<p>There will always be people who will seek solutions to problems come hell or high water and other people who will wag a finger and look sternly over their lorgnettes at the egregious methods used by the problem solvers. This battle between hackers and pedants inevitably results in a lively history of online discussions containing very strong opinions and, sometimes even, useful examples.</p>
<p>总是会有一些无论如何困难都在寻求解决问题办法的人和其他对着提出惊人方案的解决者一脸正色地在长柄眼镜上摇摇手指的人。黑客和学究之间的这一战不可避免地会导致一些强烈意见和网上讨论，有时甚至是有用的案例。</p>
<h1 id="单词本">单词本</h1><p>come hell or high water  就算天崩地裂/无论如何困难</p>
<p>Duck typing  <a href="https://en.wikipedia.org/wiki/Duck_typing#Concept_examples" target="_blank" rel="external">wiki</a></p>
<p>premature 过早的</p>
<p>optimization 优化</p>
<p>lorgnettes 长柄眼镜</p>
<p>pedants 卖弄知识的人</p>
<p>inevitably 不可避免的</p>
<p>Impedance 阻抗</p>
<p>Mismatch 不协调的</p>
<p>cleverness 灵巧</p>
<p>obfuscation 混淆</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标题&quot;&gt;标题&lt;/h1&gt;&lt;p&gt;译文标题：Python中你不应该做的事&lt;/p&gt;
&lt;p&gt;原文标题：Things You Shouldn’t Do in Python&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href=&quot;https://www.airpair.com/python
    
    </summary>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】使用supervisor守护进程</title>
    <link href="http://yoursite.com/2016/10/22/supervisor/"/>
    <id>http://yoursite.com/2016/10/22/supervisor/</id>
    <published>2016-10-22T03:55:59.000Z</published>
    <updated>2016-12-29T11:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>误导向</del></p>
<h2 id="Forward">Forward</h2><p>当初我一看到supervisor，第一反应是nodejs的那个supervisor，一个修改保存文件之后自动重启node应用的一个好用的小工具。然而这个supervisor是Linux上的用于守护进程的脚本（当然后来我才知道它是python写的）。</p>
<h2 id="Easy_Start">Easy Start</h2><p>首先安装supervisor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install supervisord</div></pre></td></tr></table></figure></p>
<p>然后执行<code>echo_supervisord_conf</code>，打印出默认sv的例子，并保持到默认路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure></p>
<p>然后编辑<code>supervisord.conf</code>文件，以ec_forum为例，在文件最后添加下列内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[program:ec]</div><div class="line">command=python3 /root/workspace/service/ec_forum/app.py</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">stdout_logfile=/root/workspace/service/ec_forum/logs/supervisor_stdout.log</div><div class="line">stderr_logfile=/root/workspace/service/ec_forum/logs/supervisor_stderr.log</div></pre></td></tr></table></figure></p>
<p>program 后面跟的是你的项目名，启动用。<br>比如重启应用，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl restart ec</div></pre></td></tr></table></figure></p>
<p>command 你要执行的进程命令<br>autostart 自动启动<br>autorestart 自动重启<br>stdout_logfile 标准输出流（可选）<br>stderr_logfile 标准错误流（可选）</p>
<p>这里输出流是服务器日志的重要来源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;误导向&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;Forward&quot;&gt;Forward&lt;/h2&gt;&lt;p&gt;当初我一看到supervisor，第一反应是nodejs的那个supervisor，一个修改保存文件之后自动重启node应用的一个好用的小工具。然而这个supervisor
    
    </summary>
    
      <category term="python3" scheme="http://yoursite.com/categories/python3/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】MySQL的问题以及解决过程</title>
    <link href="http://yoursite.com/2016/10/06/mysql-bug/"/>
    <id>http://yoursite.com/2016/10/06/mysql-bug/</id>
    <published>2016-10-06T03:55:37.000Z</published>
    <updated>2016-12-30T00:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>牢骚向</del></p>
<h2 id="Forword">Forword</h2><p>我一开始使用MySQL我就后悔了，因为我深深的体会到，在sql型数据库中，当表之间关系复杂以后，要删除一条信息是有多么的困难。而几乎所有的第三方MySQL库使用的还是原生的sql语句。且不说sql语句的拼接被x问题，sql的高阶语法本身就非常的反人类。加上我已经习惯了noSQL带来的好处（直接字典\对象操作），仿佛就从天堂到了地狱。</p>
<h2 id="The_problem">The problem</h2><p>前台说请求报错，她那里格式正常。启动服务器简单脚本测试，发送get正常，post报<code>pipeBroken</code>。重启应用，好了。过了半天，一发post，跪。</p>
<h3 id="Debug">Debug</h3><p>get能用，post挂了，肯定是数据库问题，看了下错误类型，连接管道断了，那就是pymysql的问题。</p>
<p>第一反应，连接对象过期了，定期更新it，无解。</p>
<p>加快更新频率，无解。</p>
<p>启用连接池，加大连接节点数，加快更新频率，均无解。此时已过2周，暂时用无限手动重启应用的方法应付问题。</p>
<p>通过<code>supervisor</code>查应用日志，发现启动应用大约过了半天时间一发<code>post</code>服务器才会<code>pipeBroken</code>，而报错期间并没有主动断开。就是过期了啊（葛优瘫）</p>
<h3 id="Fix_up">Fix up</h3><p>经过一段时间的思考，我感觉是MySQL本身的问题，查了一会相关资料，把服务器日志<code>pipeBroken</code>的报文Google了一下，发现是MySQL长时间没有操作，进入睡眠了。。</p>
<p>进入MySQL交互界面输入</p>
<pre><code><span class="operator"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%timeout%'</span>;</span>
</code></pre><p>发现<code>wait_timeout</code>的值为28800s，相等于8小时没操作MySQL就会断开连接。于是我用最简单暴力的方法：</p>
<pre><code><span class="operator"><span class="keyword">set</span> <span class="keyword">global</span> wait_timeout=<span class="number">2880000</span>;</span>
</code></pre><p>服务器再也不频繁抛错了。至于之前的那些解决方案……先留着那些代码吧</p>
<h2 id="Final">Final</h2><p>在条件允许的情况下，尽量使用更加稳定而简单的nosql数据库，避免给自己挖坑</p>
<h2 id="improve（date:_Dec-）">improve（date: Dec.）</h2><p>修改MySQL变量不是权宜之计，MySQL休眠是因为长期没有操作，所以自动断开连接节点，而且不是所有的服务器都支持修改MySQL全局变量的，有时候root也不能改- -。所以用计时器每隔一段时间向MySQL发一次查询，重置连接时间。若还抛出错误<code>pipeBroken</code>的时候换一条新的管道。</p>
<p>实际效果：MySQL能够平稳的运行好几天，几天之内查询成功率在90%左右，仍然不太能够令人满意，但是相比以前，已经进步了很多。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;牢骚向&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;Forword&quot;&gt;Forword&lt;/h2&gt;&lt;p&gt;我一开始使用MySQL我就后悔了，因为我深深的体会到，在sql型数据库中，当表之间关系复杂以后，要删除一条信息是有多么的困难。而几乎所有的第三方MySQL库使用的还是原生的
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】数据库连接池</title>
    <link href="http://yoursite.com/2016/10/03/socket_pool/"/>
    <id>http://yoursite.com/2016/10/03/socket_pool/</id>
    <published>2016-10-03T08:11:27.000Z</published>
    <updated>2016-12-29T11:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>科普向</del></p>
<h2 id="forward">forward</h2><p>在后端连接数据库的时候，测试时我们一般初始化一个连接对象，把所有的操作都引入这个对象，然后进行数据库的操作。在实际生产时这样有一个问题，如果这个连接对象崩掉了，那么服务器就肯定挂掉。或者同时有大量访问请求的时候，可能访问会变慢。而每次访问去生成一个连接对象，处理完之后就close肯定是不现实的，因为会吃服务器资源。所以我们需要一个连接池，用于处理比较复杂的实际情况。这就是我对连接池的初步理解。</p>
<h2 id="socket_pool">socket_pool</h2><p>以实际代码为例：</p>
<p>一开始先创建10个连接对象，放入一个连接池中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> pymysql.Connect(host=<span class="string">'127.0.0.1'</span>,user=MyConfig.USERNAME,passwd=MyConfig.PASSWORD,db=<span class="string">'ec_forum'</span>,charset=<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"><span class="string">'''pymysql socket pool'''</span></div><div class="line">socket_limit = <span class="number">10</span></div><div class="line">socket_pool = []</div><div class="line">socket_update = socket_limit</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(socket_limit):</div><div class="line">    socket_pool.append(get_conn())</div></pre></td></tr></table></figure>
<p>以ID筛选方法为例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_select</span><span class="params">(self, ec_id, table=<span class="string">'ec_user'</span>)</span>:</span></div><div class="line">    <span class="string">'''select ec_event just by t_id, and extension'''</span></div><div class="line">    conn = socket_pool.pop() <span class="comment"># 从连接池pop出一个连接对象</span></div><div class="line">    cursor = conn.cursor()</div><div class="line">    err,res = <span class="keyword">True</span>,()</div><div class="line">    query_name = self.get_query_name(table)</div><div class="line">    sql = <span class="string">"select * from %s where %s=%r;"</span> % (table,query_name,ec_id)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> cursor.execute(sql) == <span class="number">1</span>:</div><div class="line">            rs = cursor.fetchone()</div><div class="line">            <span class="keyword">if</span> bool(rs):</div><div class="line">                err,res = <span class="keyword">False</span>,rs</div><div class="line">    <span class="keyword">except</span> BrokenPipeError <span class="keyword">as</span> e:</div><div class="line">        conn = get_conn() <span class="comment"># 连接对象已失效，重新生成</span></div><div class="line">        <span class="keyword">raise</span> e</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        conn.rollback() <span class="comment"># 这里错误类型分开写，以处理不同异常下conn</span></div><div class="line">        <span class="keyword">raise</span> e</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        cursor.close()</div><div class="line">        socket_pool.append(conn) <span class="comment"># 总之把连接对象放回连接池</span></div><div class="line">    <span class="keyword">return</span> err,res</div></pre></td></tr></table></figure>
<p>从连接池中pop和push连接对象，这样能处理多个用户同时处理的线程问题。当然最好要做个同步锁，我这里没做，因为两个用户如果不小心用到了一个连接对象，也不会造成什么问题。</p>
<p>最后定期更新池中对象的有效性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_conn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> socket_update</div><div class="line">    socket_update+=<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> socket_update &gt;= socket_limit:</div><div class="line">        socket_update = <span class="number">0</span></div><div class="line">    print(<span class="string">"[update pymysql connection.. Pipe %s]"</span>%socket_update)</div><div class="line">    socket_pool[socket_update] = get_conn()</div><div class="line">    <span class="keyword">global</span> t    <span class="comment">#Notice: use global variable!</span></div><div class="line">    t = threading.Timer(<span class="number">7200.0</span>, update_conn)</div><div class="line">    t.start()</div><div class="line"></div><div class="line">t = threading.Timer(<span class="number">7200.0</span>, update_conn)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> MyConfig.TESTING:</div><div class="line">    t.start()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;科普向&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;forward&quot;&gt;forward&lt;/h2&gt;&lt;p&gt;在后端连接数据库的时候，测试时我们一般初始化一个连接对象，把所有的操作都引入这个对象，然后进行数据库的操作。在实际生产时这样有一个问题，如果这个连接对象崩掉了，那么服务器就
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>新学期扯淡</title>
    <link href="http://yoursite.com/2016/09/28/wc-new/"/>
    <id>http://yoursite.com/2016/09/28/wc-new/</id>
    <published>2016-09-28T15:51:48.000Z</published>
    <updated>2016-09-28T17:49:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近非常闲，闲的我都在玩腻游戏之后开始写东西来排遣剩下的时间。</p>
</blockquote>
<h1 id="先对最近的小朋友的问题做一个统一的回复：">先对最近的小朋友的问题做一个统一的回复：</h1><h2 id="大神抱大腿~">大神抱大腿~</h2><p>1 我不是大神，你看我后面的回答就知道了<br>2 请阅读<a href="http://mikumiku.com.cn/2016/07/23/sorry/" target="_blank" rel="external">这篇文章</a></p>
<h2 id="学长你在做啥">学长你在做啥</h2><p>我的项目基本开源，自己去看，欢迎fork和star</p>
<h2 id="在哪，在Github？能给个链接么">在哪，在Github？能给个链接么</h2><p>我叫这个 <code>imxana</code></p>
<h2 id="我计算机零基础，学什么入门好？">我计算机零基础，学什么入门好？</h2><p>建议从C语言开始学起，教材请不要使用任何视频网站或者各种《C语言xx》,请使用《数据结构》。或者，学一点JS（逃</p>
<h2 id="JS是啥？">JS是啥？</h2><p>JavaScript，灵活的语法，能写网页应用，iOS和Android应用软件，电脑上的软件，还能部署服务器，厉害吧（雾</p>
<h2 id="有什么推荐的书吗？">有什么推荐的书吗？</h2><p>JS的话是红宝书，当年我把整本书的例子都打了一遍以上，受益匪浅。书名是这个《JavaScript高级程序设计》</p>
<h2 id="我想做一个黑客，但是没有基础，要学哪些东西">我想做一个黑客，但是没有基础，要学哪些东西</h2><p>孩子你这样问问题会被打的</p>
<h2 id="作为一个纯菜鸟，要注意些什么">作为一个纯菜鸟，要注意些什么</h2><p>这是个非常好的问题。</p>
<p>首先，日常环境下尽量脱离windows，强迫自己熟悉unix-like系统，趁时间多多折腾。</p>
<p><strong>在掌握基本的Debug能力以后</strong>，生产环境尽量脱离IDE，尽量避免由生产环境不同而导致运行结果的差异。</p>
<p><del>不要加入由老师主导的社团。</del></p>
<p>你必须掌握基本的开发、协作工具，了解一些最基本的知识，才能和前辈们平等的交流，不然怪不得别人不愿意和你说话。遇到耐心的前辈，要珍惜，要问问题时，请反复检查自己的语言组织。</p>
<h2 id="我应该从什么语言入门？/Python（或其他）难吗，有什么书推荐？怎么学？">我应该从什么语言入门？/Python（或其他）难吗，有什么书推荐？怎么学？</h2><p>No Silver Bullet.</p>
<p>语言是工具，任何语言的语法，看半小时官方文档足以记住基本使用。具体的语言要看具体需求，不同的语言在不同的场景下有优劣之分，所以不要把学语言看成一种目的，学语言是为了服从某种另外的目的。<del>当然你要写解释器当我没说</del></p>
<h2 id="但是我不知道你在说什么啊？">但是我不知道你在说什么啊？</h2><p>好吧你要这么想也行，就看官方文档吧，带好词典</p>
<h2 id="我想做iOS开发，但是我没有iPhone">我想做iOS开发，但是我没有iPhone</h2><p>Mac上的Xcode自带所有iOS设备模拟器，只要版本一样，和实际硬件完全相同。</p>
<h2 id="我也没有Mac呀">我也没有Mac呀</h2><p>。。。还是有解决方案的，比如黑苹果什么的，但是不推荐。</p>
<h2 id="求推荐Mac型号">求推荐Mac型号</h2><p>那你想要的是哪一款？这款？好就这款吧，挺不错的</p>
<h2 id="如何成为一个优秀的程序员？">如何成为一个优秀的程序员？</h2><p>《21天精通C++》</p>
<h2 id="我最近很迷茫">我最近很迷茫</h2><p>我们玩网游的时候，一般会建两个号，一个大号，一个小号。一般大号用来踩坑，做过一些难以回首的事情，浪费了很多资源在一些弯路上，最后我们不再用它；小号用来享乐，外形各种好看，属性各种强大，升级过程各种捷径，各种开心，最后这个小号变成了我们的大号。我们的人生也是一个网游，只不过，我们都只能是第一个号。</p>
<h2 id="我最近学的很累/某个很简单的问题很久未解决">我最近学的很累/某个很简单的问题很久未解决</h2><p>一般这种情况是书看的多，代码打的欠少。简称欠打</p>
<h2 id="你能带带我吗？">你能带带我吗？</h2><p>看情况</p>
<h2 id="抱一个粗壮的大腿很重要吗">抱一个粗壮的大腿很重要吗</h2><p>现在的人能拉下脸坚持问一个人问题的人还真不多，大多数都三分钟热度做别的事情去了。所以我的态度是，很重要，但看你能抱多久。</p>
<p>我作为一个资深社区吸血鬼，平时基本对所在社团没有贡献，一直在索取，感觉很棒（逃</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近非常闲，闲的我都在玩腻游戏之后开始写东西来排遣剩下的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;先对最近的小朋友的问题做一个统一的回复：&quot;&gt;先对最近的小朋友的问题做一个统一的回复：&lt;/h1&gt;&lt;h2 id=&quot;大神抱大腿~&quot;&gt;大神抱
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>【实验班】单元测试</title>
    <link href="http://yoursite.com/2016/09/22/unittest/"/>
    <id>http://yoursite.com/2016/09/22/unittest/</id>
    <published>2016-09-22T14:11:50.000Z</published>
    <updated>2016-11-08T03:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>科普向</del></p>
<h2 id="forward">forward</h2><p>单元测试的好处与必要性我就不多说了，以现在做的<code>ec_forum</code>项目为例，说说现在我所做的。</p>
<h2 id="unittest">unittest</h2><h3 id="测试原理">测试原理</h3><p>我使用的单元测试模块是python原生的<code>unittest</code>，其实用什么的模块并不重要，<del>反正都是无尽的assert</del>，它的结构如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ECTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">1</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">2</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_name1</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">3</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_name2</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">4</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">name3_test</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="number">5</span>)</div><div class="line">		</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure>
<p>然后我们看输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">2</div><div class="line">.1</div><div class="line">4</div><div class="line">2</div><div class="line">.</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran 2 tests <span class="keyword">in</span> 0.000s</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure></p>
<p>可以看出，在进行每一项测试时，<code>ECTestCase</code>类会找到<code>test</code>开头的方法，在执行时会执行一次<code>setUp</code>，执行结束时执行一次<code>tearDown</code>，执行完成后输出一个<code>.</code>，执行完所有方法为止。如果中途报错即立刻停止测试。<del>别忘记到数据库里去删测试账号。</del></p>
<p>一般<code>setUp</code>和<code>tearDown</code>方法里，我一般是注册与销毁n个随机信息的账号，发表和删除同一篇文章，并用这些账号测试。这里的测试是单线程的，所以不用担心<code>self</code>属性被多线篡改的问题。这两个方法里尽量少放东西，这样后期测试多了以后速度影响会比较大，我只是把生成两篇文章改成了把其中一篇不太用的文章移到了其中一个测试里，测试速度就从1.7s提升到了0.9s。</p>
<h3 id="关于覆盖率">关于覆盖率</h3><p>能够触及到代码的每一个角落当然是最吼的（100%），不过这样改起来的东西也多，因此我们在assert的时候尽量用巧妙的方法。比如code_information修改频繁的话，那就去比对状态码，如果状态码修改频繁的话，就去比对message，甚至是返回值的数据类型，数组、字符串长度范围等。测试覆盖率越高，后期可见或不可见的坑就越少。</p>
<p>记得在提交版本的时候，先做一次<code>make test</code>，从而尽量避免提交bug版本。</p>
<h3 id="先功能，还是先测试？">先功能，还是先测试？</h3><p>如果需求炒鸡明确的话，建议测试先行，一定程度上先测试能起到规范功能的作用，某种意义上比文档作用更大。</p>
<p>如果需求是在变化的话，走一步看一步的那种，实际上单元测试也不是必要的，或者想我这种只有一个人的话，那就随意。脚本测试也够用了（比如注册机）</p>
<h2 id="others">others</h2><p>不为测试而写测试，我最初更向是一种『哦？！这就是单元测试啊！』的感觉，在开发路程中实际感觉到需要这么一种东西来确保我的<code>真实</code>进度，然后从简单的脚本测试到单元测试，感觉很自然的就过度过去了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;科普向&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;forward&quot;&gt;forward&lt;/h2&gt;&lt;p&gt;单元测试的好处与必要性我就不多说了，以现在做的&lt;code&gt;ec_forum&lt;/code&gt;项目为例，说说现在我所做的。&lt;/p&gt;
&lt;h2 id=&quot;unittest&quot;&gt;unitt
    
    </summary>
    
      <category term="python3" scheme="http://yoursite.com/categories/python3/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>又他喵的要阳光长跑了</title>
    <link href="http://yoursite.com/2016/09/13/run-again/"/>
    <id>http://yoursite.com/2016/09/13/run-again/</id>
    <published>2016-09-13T08:54:40.000Z</published>
    <updated>2016-09-13T09:38:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了下校内网发现距离微调过了，于是开始划线。。</p>
<p><strong>long_run.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8 </span></div><div class="line">ifo = &#123; <span class="number">1</span>:<span class="string">'体活'</span>, <span class="number">2</span>:<span class="string">'副馆'</span>, <span class="number">3</span>:<span class="string">'二教'</span>, <span class="number">4</span>:<span class="string">'九教'</span> &#125;</div><div class="line">data = &#123; <span class="string">'12'</span>:<span class="number">580</span>,<span class="string">'23'</span>:<span class="number">650</span>,<span class="string">'34'</span>:<span class="number">400</span>,<span class="string">'14'</span>:<span class="number">380</span> &#125;</div><div class="line">result = dict()</div><div class="line">aim = <span class="number">2000</span> <span class="comment"># m:2000 f:1500 </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join((<span class="keyword">lambda</span> x:(x.sort(),x)[<span class="number">1</span>])(list(s)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></div><div class="line">    rec(<span class="string">''</span>,<span class="number">0</span>)</div><div class="line">    keys = sorted(result, key=<span class="keyword">lambda</span> k:result[k])</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> keys:</div><div class="line">        <span class="keyword">print</span> result[k], k</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec</span><span class="params">(path, dis)</span>:</span></div><div class="line">    <span class="keyword">if</span> dis &gt;= aim:</div><div class="line">        result[path[:<span class="number">-2</span>]] = dis</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">if</span> path == <span class="string">''</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'1234'</span>:</div><div class="line">            rec(i, <span class="number">0</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> len(path) &gt; <span class="number">2</span>:</div><div class="line">            dis_key = sort(path[<span class="number">-3</span>]+path[<span class="number">-1</span>])</div><div class="line">            dis = dis + data[sort(dis_key)]</div><div class="line">        <span class="keyword">if</span> path[<span class="number">-1</span>] <span class="keyword">in</span> <span class="string">'13'</span>:</div><div class="line">            rec(path+<span class="string">'-2'</span>, dis)</div><div class="line">            rec(path+<span class="string">'-4'</span>, dis)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            rec(path+<span class="string">'-1'</span>, dis)</div><div class="line">            rec(path+<span class="string">'-3'</span>, dis)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    show()</div></pre></td></tr></table></figure>
<p><del>本来思路是用图的，感觉太麻烦换成树也行，但是突然发现自己已经差不多完全忘记数据结构了。后来回寝室翻翻书，最后还是用无脑递归，两节课没听就在搞这个东西。（汗）</del></p>
<p><strong>result：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="number">2000</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">2000</span> <span class="number">4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">2010</span> <span class="number">1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">2010</span> <span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-1</span></div><div class="line"><span class="number">2010</span> <span class="number">3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span></div><div class="line"><span class="number">2010</span> <span class="number">2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-2</span></div><div class="line"><span class="number">2010</span> <span class="number">4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">2010</span> <span class="number">4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">2010</span> <span class="number">2</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span></div><div class="line"><span class="number">2010</span> <span class="number">3</span><span class="number">-2</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">2030</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-1</span></div><div class="line"><span class="number">2030</span> <span class="number">1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">2080</span> <span class="number">3</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">2080</span> <span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-3</span></div><div class="line"><span class="number">2100</span> <span class="number">4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">2100</span> <span class="number">1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-2</span></div><div class="line"><span class="number">2100</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-3</span></div><div class="line"><span class="number">2100</span> <span class="number">2</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">2100</span> <span class="number">3</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>2000m…恕我眼拙注意有个整数400……平时跑的那条路变成1800+m不再考虑，等于原来二九要跑4趟的，现在变成5趟了，跑5趟也太蠢了吧，一个点要刷3次卡？万一排队怎么办？</p>
<p>所有的2010m结果其实是一样的，8种不同的姿势跑一周而已。</p>
<p>另外从去年的经验看，请尽量避免二教这个点，排队人数极其容易50+，导致速度不够从而…</p>
<p>另附女生的新路线</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="number">1520</span> <span class="number">1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">1520</span> <span class="number">4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">1540</span> <span class="number">1</span><span class="number">-2</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">1540</span> <span class="number">4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-1</span></div><div class="line"><span class="number">1540</span> <span class="number">3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">1540</span> <span class="number">1</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">1560</span> <span class="number">3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">1560</span> <span class="number">4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">1560</span> <span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">1560</span> <span class="number">4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">1580</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-1</span></div><div class="line"><span class="number">1580</span> <span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">1600</span> <span class="number">3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span></div><div class="line"><span class="number">1600</span> <span class="number">4</span><span class="number">-3</span><span class="number">-4</span><span class="number">-3</span><span class="number">-4</span></div><div class="line"><span class="number">1610</span> <span class="number">4</span><span class="number">-1</span><span class="number">-2</span><span class="number">-3</span></div><div class="line"><span class="number">1610</span> <span class="number">3</span><span class="number">-2</span><span class="number">-1</span><span class="number">-4</span></div><div class="line"><span class="number">1630</span> <span class="number">4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-1</span></div><div class="line"><span class="number">1630</span> <span class="number">1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p><del>最短路线居然他喵的没变</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了下校内网发现距离微调过了，于是开始划线。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;long_run.py&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>立项报告：实验班交流论坛</title>
    <link href="http://yoursite.com/2016/09/12/%E7%AB%8B%E9%A1%B9%E6%8A%A5%E5%91%8A%EF%BC%9A%E5%AE%9E%E9%AA%8C%E7%8F%AD%E4%BA%A4%E6%B5%81%E8%AE%BA%E5%9D%9B/"/>
    <id>http://yoursite.com/2016/09/12/立项报告：实验班交流论坛/</id>
    <published>2016-09-12T05:55:52.000Z</published>
    <updated>2016-12-23T05:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章更新于：2016年12月23日 星期五 13时44分12秒 CST</p>
<p>来源：<a href="https://github.com/imxana/ec_forum/blob/dev/doc/introduction.md" target="_blank" rel="external">Github</a></p>
<h1 id="实验班交流问答平台">实验班交流问答平台</h1><p>A forum of experimental class. ;)</p>
<h1 id="项目背景与意义">项目背景与意义</h1><p>设立实验班交流论坛，是为了促进内部交流，内外交流，鼓励分享，活跃技术氛围。。</p>
<h1 id="项目用户">项目用户</h1><p>面向全师生，质量驱动，通过高质量问答、发表优质文章来获取声望</p>
<hr>
<h1 id="项目功能">项目功能</h1><h2 id="一期目标">一期目标</h2><h3 id="用户档案管理">用户档案管理</h3><ul>
<li>注册与登录</li>
<li>通讯录与档案，如项目记录、github、博客地址等等</li>
<li>单元测试（覆盖率90%以上）</li>
</ul>
<h3 id="文章系统">文章系统</h3><ul>
<li>鼓励用户发表文章</li>
<li>评论，收藏</li>
<li>声望相应变换(做好接口)</li>
<li>单元测试（覆盖率90%以上）</li>
</ul>
<hr>
<h2 id="二期目标">二期目标</h2><h3 id="声望系统">声望系统</h3><ul>
<li>基于声望值给予对应的行为规范，如支持与反对等</li>
<li>声望权限系统、声望变化接口</li>
<li>用户声望动态计算？</li>
<li>单元测试（覆盖率90%以上）</li>
</ul>
<h3 id="问答系统">问答系统</h3><ul>
<li>鼓励具有高质量、代表性的提问，及高质量的回答</li>
<li>鼓励高质量回答</li>
<li>根据赞同与被赞变化声望</li>
</ul>
<hr>
<h2 id="三期目标">三期目标</h2><h3 id="内部公告与通知管理">内部公告与通知管理</h3><ul>
<li>公告看板</li>
<li>站点短消息</li>
</ul>
<h3 id="界面完善">界面完善</h3><ul>
<li>调研，运营</li>
</ul>
<hr>
<h1 id="项目实现方案">项目实现方案</h1><blockquote>
<p>基本的系统架构与技术路线</p>
</blockquote>
<h2 id="系统架构">系统架构</h2><p>典型的BS架构，以浏览器的使用为主。目前主要以PC端交互为主，但部分关键或常用功能应保证移动WEB兼容性。同时，在技术架构上，应考虑全端支持的可扩展性。</p>
<h2 id="技术路线">技术路线</h2><ul>
<li>单页应用</li>
<li>前端 express(暂) 搭建的静态页面服务</li>
<li>后端技术栈 Python3 + Flask + MySQL.</li>
<li>开发与部署平台  *nix</li>
<li>项目托管 Github</li>
<li>项目原型 Quora &amp; SF</li>
</ul>
<p>因为流量不大，项目轻量，加上需要根据需求快速部署开发，所以选择py</p>
<p>不用node的原因是因为写腻了</p>
<p>第一次在项目中使用单元测试，使用的是py的unittest</p>
<p>附：单页应用的优缺点<br>作者：clia<br>链接：<a href="https://www.zhihu.com/question/20792064/answer/22784862" target="_blank" rel="external">https://www.zhihu.com/question/20792064/answer/22784862</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
<p>优点：<br>1、分离前后端关注点，前端负责界面显示，后端负责数据存储和计算，各司其职，不会把前后端的逻辑混杂在一起；<br>2、减轻服务器压力，服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；<br>3、同一套后端程序代码，不用修改就可以用于Web界面、手机、平板等多种客户端；</p>
<p>缺点：<br>1、SEO问题，现在可以通过Prerender等技术解决一部分；<br>2、前进、后退、地址栏等，需要程序进行管理；<br>3、书签，需要程序来提供支持；</p>
<h1 id="项目成员与分工">项目成员与分工</h1><ul>
<li><p>金云天</p>
<ul>
<li>项目负责人：项目策划与管理、负责整体技术架构、团队管理</li>
<li>后台开发、运维、部署、总体单元测试</li>
</ul>
</li>
<li><p>余小兰</p>
<ul>
<li>前台开发：参与各关键功能的开发，web独立开发，测试</li>
</ul>
</li>
<li><p>韩培</p>
<ul>
<li>移动端：安卓独立开发，测试</li>
</ul>
</li>
</ul>
<h1 id="项目的学习价值">项目的学习价值</h1><p>本应用是典型的基于WEB的信息管理应用，利于掌握WEB应用开发的基本要素和技术</p>
<p>Flask是最好的WEB后端开发框架，其涉及的各种设计模式与开发技术，是后端工程师的必备技能。（雾）</p>
<h1 id="可行性分析">可行性分析</h1><ul>
<li>该项目来源于我们正在进行的实践，持续的需求和即时的用户反馈将会推动项目的健康发展</li>
</ul>
<h1 id="难点与风险">难点与风险</h1><ul>
<li>需求并未定型，除了技术能力，还需要产品设计能力</li>
<li>工作量可能过小（老师说的）</li>
<li>….</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章更新于：2016年12月23日 星期五 13时44分12秒 CST&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://github.com/imxana/ec_forum/blob/dev/doc/introduction.md&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="python3" scheme="http://yoursite.com/categories/python3/"/>
    
    
      <category term="实验班" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C%E7%8F%AD/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>我为暑假续一秒</title>
    <link href="http://yoursite.com/2016/08/30/16Aug/"/>
    <id>http://yoursite.com/2016/08/30/16Aug/</id>
    <published>2016-08-30T15:43:55.000Z</published>
    <updated>2016-09-02T04:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python3">Python3</h1><p><a href="https://github.com/imxana/show-me-the-code" target="_blank" rel="external">imxana/show-me-the-code</a></p>
<p>部分练习 ( 0~13, 21, 22 )</p>
<h1 id="Linux">Linux</h1><p><a href="https://github.com/imxana/shell_test" target="_blank" rel="external">imxana/shell_test</a></p>
<p>《Linux Shell脚本攻略》学习代码（更新中），顺便一提作者是一个20岁的印度大学生</p>
<h1 id="邮箱迁移">邮箱迁移</h1><p>New_email: <a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#120;&#97;&#110;&#97;&#46;&#x61;&#x77;&#97;&#x6b;&#x65;&#x6e;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#120;&#97;&#110;&#97;&#46;&#x61;&#x77;&#97;&#x6b;&#x65;&#x6e;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>部分迁移情况</p>
<table>
<thead>
<tr>
<th>item</th>
<th>state</th>
</tr>
</thead>
<tbody>
<tr>
<td>Aliyun</td>
<td>√</td>
</tr>
<tr>
<td>Amazon</td>
<td>√</td>
</tr>
<tr>
<td>AppCan</td>
<td>remove</td>
</tr>
<tr>
<td>Apple</td>
<td>√</td>
</tr>
<tr>
<td>Coding</td>
<td>√</td>
</tr>
<tr>
<td>Docker Cloud</td>
<td>√</td>
</tr>
<tr>
<td>Facebook</td>
<td>√</td>
</tr>
<tr>
<td>Github</td>
<td>√</td>
</tr>
<tr>
<td>Instagram</td>
<td>√</td>
</tr>
<tr>
<td>iturning</td>
<td>√</td>
</tr>
<tr>
<td>Leap Motion</td>
<td>√</td>
</tr>
<tr>
<td>Microsoft</td>
<td>remove</td>
</tr>
<tr>
<td>Segmentfault</td>
<td>√</td>
</tr>
<tr>
<td>Steam</td>
<td>√</td>
</tr>
<tr>
<td>Twitter</td>
<td>√</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python3&quot;&gt;Python3&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/imxana/show-me-the-code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;imxana/show-me-the-code&lt;
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>月亮忘记了</title>
    <link href="http://yoursite.com/2016/08/19/moon/"/>
    <id>http://yoursite.com/2016/08/19/moon/</id>
    <published>2016-08-19T12:18:48.000Z</published>
    <updated>2016-08-19T15:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>看见的，看不见了。<br>夏风轻轻吹过，在瞬间消失无踪，<br>记住的，遗忘了。<br>只留下一地微微晃动的迷离树影……</p>
<p>看不见的，是不是就等于不存在？<br>也许只是被浓云遮住，<br>也许刚巧风砂飞入眼帘，<br>我看不见你，<br>却依然感到温暖。</p>
</blockquote>
<p>每一个黄昏过后，大家焦虑地等待，却再也没有等到月亮升起。</p>
<p>潮水慢慢平静下来，海洋凝固成一面漆黑的水镜，没有月亮的夜晚，世界变的清冷幽寂。</p>
<p>正要登陆月球的太空船，在星海中迷航，没有人知道他们在哪里。</p>
<p>科学家沮丧得发狂，国王像孩子般无助地望着天空发呆。没有人知道该怎么办。</p>
<p>电视不断重复播报月亮失踪的消息，世界末日的恐慌瞬间弥漫全球。</p>
<p>还好，月亮出来了。</p>
<p>一车车微笑的月亮，运往每个哀伤的黑暗城市。</p>
<p>莹润可爱的月亮，发出温柔的光芒，焦虑的人们，暂时忘记了害怕。</p>
<p>它们永远不会忧伤，它们永远带着甜蜜笑容。</p>
<p>从窗口望出去，又可以看到皎洁的明月，世界又恢复一片欢乐。</p>
<blockquote>
<p>他们在无意间相遇，<br>却为幽暗的生命带来温柔美好的光亮。</p>
</blockquote>
<p>男孩为他包上柔软的毛巾。点上一盏小灯为他取暖。<br>将他抱在怀中，轻轻摇晃。温柔地为他唱歌，对他说话。月亮慢慢地睁开眼睛，发出一点幽微的光亮。</p>
<p>一开始，他像个婴儿般地只会左右晃动，光芒忽明忽灭<br>。</p>
<p>慢慢地，他学会滚动，顽皮地在屋里四处走动。</p>
<p>午夜时分，他偶尔会不由自主地飘了起来，但他有些怕高。</p>
<p>他的光芒，每天都有小小的变化。</p>
<p>他安安静静、慢慢地长大了。</p>
<p>太阳出来时，他总是晦暗地沉睡不醒。</p>
<p>太阳下山后，却精神抖擞地清亮起来。</p>
<p>他们躲进妈妈的衣柜，想象掉落神秘无底的黑洞。<br>妈妈一直都找不到他。</p>
<p>他们在海上漂流了三天三夜，还遇到海啸与恐怖的鲨鱼。<br>妈妈忙得没空来救他。</p>
<p>他们脸上涂满颜色，做出可怕的表情，还大声尖叫。<br>妈妈却一点也没有被吓着。</p>
<p>月亮学会空中旋转的那个晚上，他们在窗前整夜跳舞。<br>妈妈早就累得睡着了。</p>
<p>世界停电的夜晚，他们爬到屋顶。静静欣赏黑暗世界的惊喜。<br>没有人与他们分享这神秘安静的时刻。</p>
<p>渐渐地，男孩上学总是迟到，<br>上课总是沉沉睡去。</p>
<p>渐渐地，他的朋友愈来愈少。</p>
<p>他跟月亮也愈来愈孤单。</p>
<p>“你是天上掉下来的月亮吗？”<br>“你记得你的家在哪里吗？”<br>“你害怕一个人回到天空吗？”<br>白云缓缓飘过，小鸟在林中唱着忧伤的歌曲，天色渐渐暗了下来。</p>
<p>他们发现池塘的小鱼，在月亮靠近时，会微笑着朝他游过来。</p>
<p>草丛里飞舞的萤火虫，就好像在人间起舞的点点繁星。</p>
<p>他们喜欢在雨中散步，聆听雨水滴滴答答落在伞面的清脆声音。</p>
<p>秘密基地里的玫瑰花，在夜晚幽幽绽放迷人的花香。</p>
<p>男孩打电话给在远方的爸爸，兴奋地诉说：“我有一个真正的月亮喔，当我快乐或难过的时候，他都会陪着我，我要永远和他在一起……”<br>爸爸只是回答：“要乖乖地听妈妈的话。”</p>
<p>日子一切如常，路灯不断增加。<br>科学家有着更多解不开的困惑，<br>太空人依旧在星际里迷航……</p>
<p>公园里的大树毫无来由地突然枯萎，叶子在瞬间落尽，暗淡无光地月亮垂挂在树上，萧瑟地迎风摇晃。</p>
<p>河水不再流动，宛如一滩死水。<br>天气变得十分怪异，在热天午后，竟飘起了漫天大雪。</p>
<p>街边角落堆满了丢弃的月亮。城市里似乎隐匿着各式各样的怪兽，处处充满着危机，每个人的情绪似乎都变得异常暴烈。</p>
<blockquote>
<p>记住的是不是永远不会消失？<br>我守护如泡沫般脆弱的梦境，<br>快乐才刚开始，悲伤却早已潜伏而来。</p>
</blockquote>
<p>早上，校长演讲时说：“世界上本来就不需要月亮，小朋友不要……”<br>讲到这里，他忽然口吐白沫，倒地不起。可怕的是，没有人想要去救他。</p>
<p>放学时，老师生气地对男孩说：“明天请妈妈到学校来一趟。”<br>并要求他不要再带着月亮到学校来了。</p>
<p>傍晚，爸爸打电话来，他和妈妈讲了好久，妈妈却始终一言不发。<br>晚上，房间里传来低声的啜泣，屋里的气氛安静得令人感到窒息。</p>
<p>世界好像被宇宙遗弃了。</p>
<blockquote>
<p>但是，最深的黑夜即将过去，<br>你看，月亮出来了。</p>
</blockquote>
<p>一夜之间，月亮记起许多往事，飘到高空时也不再感到害怕。</p>
<p>但他却再也无法回到男孩的家。</p>
<p>他飘到窗外，看着熟悉的景物，着急的发出低沉的呜咽。<br>男孩更是难过得俯在墙角大声哭泣。</p>
<p>暴风雨来了，<br>男孩忧伤地问：“你还想听听伞下的雨声吗？”<br>月亮点点头。<br>他替月亮撑起一把伞。<br>雨，滴滴答答地敲出轻快的旋律。</p>
<p>黄昏的时候，一阵突来的狂风，将他们吹得好高好远，他紧紧抱住他的月亮。</p>
<p>风在耳边尖锐地呼啸，雨不断地迎面打来。</p>
<p>他们奋力穿过一层层浓密的乌云，不知过了多久，世界突然安静下来。</p>
<p>所有的喧闹在瞬间退至远方，<br>所有的烦恼消失无踪，<br>点点星光在四周缓缓流动，<br>他们感到非常欢乐。</p>
<p>月亮轻轻地转动，男孩慢慢地睡着，<br>梦里依稀闻到一股淡淡的百合花香。</p>
<blockquote>
<p>看不见的，看见了。<br>夏风轻轻吹过，草丛树叶翻舞飞扬。<br>遗忘的，记住了。<br>乌云渐渐散去，一道柔和的月光洒落在窗前……</p>
</blockquote>
<p>(完)</p>
<blockquote>
<p>梗概：</p>
<p>看不见的，是不是就等于不存在？<br>记住的，是不是永远不会消失？</p>
<p>每一个黄昏过后，大家焦虑地等待，却再也没有等到月亮升起。<br>潮水慢慢平静下来，海洋凝固成一面漆黑的水镜，没有月亮的夜晚，世界变得凄冷幽寂。</p>
<p>但是，最深的黑夜即将过去，月亮出来了……</p>
</blockquote>
<p>— 1999年几米画本《月亮忘记了》</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看见的，看不见了。&lt;br&gt;夏风轻轻吹过，在瞬间消失无踪，&lt;br&gt;记住的，遗忘了。&lt;br&gt;只留下一地微微晃动的迷离树影……&lt;/p&gt;
&lt;p&gt;看不见的，是不是就等于不存在？&lt;br&gt;也许只是被浓云遮住，&lt;br&gt;也许刚巧风砂飞入眼帘，&lt;br&gt;我看不见你，&lt;b
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
</feed>
