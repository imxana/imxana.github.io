<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XANA&#39;s Blog</title>
  <subtitle>I can be who you are</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-25T10:02:50.800Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XANA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【闲聊】How to Deal with the Poor</title>
    <link href="http://yoursite.com/2018/05/25/how-to-deal-with-the-poor/"/>
    <id>http://yoursite.com/2018/05/25/how-to-deal-with-the-poor/</id>
    <published>2018-05-25T09:36:12.000Z</published>
    <updated>2018-05-25T10:02:50.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何处理穷人之灭霸做的好——看油管节目后引发的思考</p>
</blockquote>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>单纯的从历史纵向来看，人类发展史从人类进入文明社会到现在高度文明，不管是人口数量还是人口质量都发生了翻天覆地的变化。但是有一点几乎不变，就是底层劳动人民所得几乎不变（兑换成粮食来计算）甚至目前一些地区所得不如古巴比伦时代人民所得多。造成这一现象的原因要从长说起。</p>
<p>我们知道在地球上土地有限，食物产出量随时间是线性增长，而人口是指数增长的。每当人口数量超过环境容纳量（K值）时，就会出现大规模人口锐减的情况，比如饥荒、瘟疫、战争、暴乱。这时，如何处理低端人口就成为每一个王国要处理的问题。有一派人认为应该要保持压迫，因为根据需求理论，给穷人资源只会产生更多的无用人口，这也是历史上最多的做法，当然还有另一派人的救济做法，不过这本来就是违反生物学的做法，当然以失败告终。</p>
<p>那穷人是不是就应该去死呢？这听起来很不人道，因为这个理论最初就是用在人的身上的。后来一个叫达尔文的家伙把这个理论推广到动物身上，控制某一个种群的数量，是不是就听起来没那么残酷了？</p>
<p>因此回到原来的问题，总结一下穷人永远是穷人的原因，这个现在还包括穷人永远存在，穷人收入几乎不变。总的来说，人首先要满足食物和生育，因此只要有多余的收入，穷人就会多生孩子，然后重新变得很穷，因此就是一个资源变成人口的过程。（哪怕穷人在某一个时间点集体蒸发，剩余的富人也很快人口上升，最终又会两极分化，重新演变成原来的过程。</p>
<p>而底端想往上爬是一件几乎不可能的事情。不用说既得利益者手里有一大堆资源可以来搞你，底端本身相互之间就存在各种斗争，而且这种斗争是为了一点点资源而你死我活的。</p>
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>地球上的人口也就是近代史这几百年才从几亿变为60亿的，究其原因为随着科技的发展，粮食产出的大幅度提高，穷人有能力和意愿养活更多的孩子，战争和疾病也得到了抑制；然而底层的情况仍然按照规律运行着。穷人仍然存在，而且一直存在。</p>
<p>近代也有一些反对残酷做法的声音，他们举的例子如下：第一，人们现在生育的欲望开始降低（比如日本虽然发达，但是人口生育低，已经进入老龄化）（难怪有人说避孕套是人类历史上最伟大的发明）；第二，粮食等资源得到的科技的帮助（杂交等）获得极大的发展，不存在因为资源不足而暴乱的情况……</p>
<p>我相信这些问题马克思应该也是研究过的，在共产主义的最终形态里，是没有家庭这一概念的，你需要性就会给你性，你需要孩子就分配给你孩子，因为公共资源是极大富足的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如何处理穷人之灭霸做的好——看油管节目后引发的思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历史&quot; class=&quot;headerlink&quot; title=&quot;历史&quot;&gt;&lt;/a&gt;历史&lt;/h2&gt;&lt;p&gt;单纯的从历史纵向来看
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>我又来找工作了^^</title>
    <link href="http://yoursite.com/2018/05/22/resume/"/>
    <id>http://yoursite.com/2018/05/22/resume/</id>
    <published>2018-05-22T01:30:31.000Z</published>
    <updated>2018-05-25T10:09:43.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>姓名：金云天 / 现居住地：杭州</p>
<p>学校：杭州电子科技大学/软件工程/大四应届生</p>
<p>联系方式：<code>MTc3NjQ1OTE0NTA=</code></p>
<p>邮箱：<em>xana.awaken@gmail.com</em></p>
<p>需求职位：<em>U3D客户端</em> 或其他相关职位</p>
<p>我从去年辞职以后自学了半年多的游戏设计、常用编程模式、Unity3d和Shader，有一定的图形学基础，目标是写一个能用到所学内容的独立游戏，并且能够一直保持更新扩展维护。</p>
<p>能熟练使用Unity3d，熟悉人物模型，物理引擎、UGUI、C#脚本，写过很多小游戏；会写一定程度的Unity-Shader，了解各种光的计算、卡通风格的渲染、广告牌等技术。</p>
<p>熟悉Git-flow工作流，能有效快速的处理bug~（前同事用了都说好</p>
<p>我自学能力很强，乐意接受并钻研分享新技术，以前写Web和iOS，能够熟练使用 Python/NodeJS/Swift/OC 每种至少有一个商业应用或者比赛作品，轻度Linux/Vim党。个人控制欲也比较强，写项目希望能完整掌握所有的细节。</p>
<p>欢迎推荐~HR请通过邮箱或者其他方式联系我~</p>
<h2 id="U3D游戏相关经历"><a href="#U3D游戏相关经历" class="headerlink" title="U3D游戏相关经历"></a>U3D游戏相关经历</h2><p>目前使用U3D进行开发，目前在做的作品demo链接：<a href="http://mikumiku.com.cn/2018/04/29/CharactorSimulator/" target="_blank" rel="external">交互模拟</a> <a href="http://mikumiku.com.cn/2018/05/16/May6/" target="_blank" rel="external">更新1</a>，（开源模型/标准库动画/触发检测/ScriptableObject/Shader/UGUI 运行环境：PC + U3D）</p>
<p>自学过一段时间的图形学，学习过Directx11（读的是原版龙书），会写一些简单的shader，了解性能优化。ShaderLab demo链接：<a href="http://mikumiku.com.cn/2018/05/08/AntiEffect/" target="_blank" rel="external">AntiEffect</a>，（自定义顶点/片源着色器 运行环境：PC + U3D）</p>
<h2 id="其他游戏经历"><a href="#其他游戏经历" class="headerlink" title="其他游戏经历"></a>其他游戏经历</h2><p>使用缘之空游戏内的素材写过一个半成品的iOS游戏（语言使用swift2）。游戏部分截图：<a href="http://mikumiku.com.cn/2016/01/12/worst_code_of_year/" target="_blank" rel="external">YZK</a></p>
<p>参加过三次hackathon，使用NodeJS快速开发游戏主要逻辑和长短请求处理。最好的一次成绩：<a href="https://mp.weixin.qq.com/s/I2_spfIfHM8QcuYT3Jh_PQ" target="_blank" rel="external">【链接】2016“龙驰杯”浙江高校Hackathon大赛圆满落幕</a> 作品源码：<a href="https://github.com/Gklub/DemoX_Model" target="_blank" rel="external">DemoX</a></p>
<p>大一写过五六个使用RPGmaker制作的游戏，其中最长的一个花了两个月整理素材，还有一个帮助姬友实现小说剧情化。</p>
<h2 id="与游戏无关的经历"><a href="#与游戏无关的经历" class="headerlink" title="与游戏无关的经历"></a>与游戏无关的经历</h2><blockquote>
<p>仅证明自学能力</p>
</blockquote>
<p>使用Objective-C写过iOS商业应用 集成支付宝/微信/QQ，独立上传过App Store。 App Store应用名：水南照相馆；文档主页：<a href="http://mikumiku.com.cn/2016/03/20/snzxg/" target="_blank" rel="external">水南照相馆技术支持文档</a>。之后还尝试用ReactNative重写一次，坑太多（RN版本更新太快），复刻界面后不了了之。</p>
<p>大三上学期使用python的flask框架写了一个为实验班搭建的论坛，后端技术栈 Python3 + Flask + Mysql，开发与部署平台 Linux / Supervisor + Nginx + uWsgi，自动化运维+测试。项目GitHub地址：<a href="https://github.com/imxana/ec_forum" target="_blank" rel="external">Experimental_Class_Forum_Backend</a></p>
<p>大三下写过一个跨国公司商业用python-django项目。原公司最初使用 svn/django-fbv 经个人坚持后转型 git-flow/django-cbv 最大的收获是 从0到1掌握Django，通过读Django源码深入解读cbv系统（view的结构组织和生命周期）和模板系统，并掌握前端基本技能（jq+Bootstrap3）。网站实现国际化，并至少支持两种语言，官网：<a href="http://www.ebizbank.com" target="_blank" rel="external">ebizbank</a></p>
<p>大四毕设，学车和看书。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人简介&quot;&gt;&lt;a href=&quot;#个人简介&quot; class=&quot;headerlink&quot; title=&quot;个人简介&quot;&gt;&lt;/a&gt;个人简介&lt;/h2&gt;&lt;p&gt;姓名：金云天 / 现居住地：杭州&lt;/p&gt;
&lt;p&gt;学校：杭州电子科技大学/软件工程/大四应届生&lt;/p&gt;
&lt;p&gt;联系方式：&lt;co
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【Unity】May 6 Study Progerss</title>
    <link href="http://yoursite.com/2018/05/16/May6/"/>
    <id>http://yoursite.com/2018/05/16/May6/</id>
    <published>2018-05-16T05:50:31.000Z</published>
    <updated>2018-05-25T10:06:11.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>动图（大图）杀猫，流量预警</p>
</blockquote>
<h2 id="AntiShader"><a href="#AntiShader" class="headerlink" title="AntiShader"></a>AntiShader</h2><p>Last Update: <a href="http://mikumiku.com.cn/2018/05/08/AntiEffect/" target="_blank" rel="external">2018/05/08</a></p>
<ul>
<li>改进了反色Shader，现在物体会被平行光源/点光源影响了</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/AntiSpecular.gif" alt="AntiSpecular.gif"></p>
<h2 id="CharactorSimulator"><a href="#CharactorSimulator" class="headerlink" title="CharactorSimulator"></a>CharactorSimulator</h2><p>Last Update: <a href="http://mikumiku.com.cn/2018/04/29/CharactorSimulator/" target="_blank" rel="external">2018/04/29</a></p>
<ul>
<li>添加了物品栏满后无法拾取的互动提示</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/PackageFullTips.gif" alt="PackageFullTips.gif"></p>
<ul>
<li>和NPC互动会控制玩家位置</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/NPCTalking.gif" alt="NPCTalking.gif"></p>
<ul>
<li><p>NPC在对话一定范围内会朝向玩家</p>
</li>
<li><p>添加快速转身</p>
</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/QuickTurn.gif" alt="QuickTurn.gif"></p>
<ul>
<li>设计一个玩家技能</li>
</ul>
<p><img src="https://oi3qt7c8d.qnssl.com/SkillDemo.gif" alt="SkillDemo.gif（TODO"></p>
<h2 id="hackathon设计构思（备胎"><a href="#hackathon设计构思（备胎" class="headerlink" title="hackathon设计构思（备胎"></a>hackathon设计构思（备胎</h2><p>写一个123木头人的即时游戏</p>
<p>角色：主机（蒙眼人），其他玩家（木头人，自由观察者）</p>
<p>开始条件：主机开始</p>
<p>结束条件：主机消灭其他玩家，或者被其他玩家消灭</p>
<p>意外处理：无重连，玩家掉线即被消灭</p>
<ul>
<li>基础玩法</li>
</ul>
<p>场地：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">         人          人 人 人</div><div class="line">========================================</div><div class="line">   |               人↓              |</div><div class="line">  ===================================</div></pre></td></tr></table></figure>
<p>设计主机的转身cd，转身会释放一个很帅的反色球，在球内移动的玩家会被消灭（或设置重力掉到下一个败者场景）</p>
<p>再次转身收回反色球</p>
<ul>
<li>进阶玩法</li>
</ul>
<p>把主机设计成ai，使用生存模式，设计道具使玩家竞争（香蕉皮，炸弹，固定的障碍等</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;动图（大图）杀猫，流量预警&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;AntiShader&quot;&gt;&lt;a href=&quot;#AntiShader&quot; class=&quot;headerlink&quot; title=&quot;AntiShader&quot;&gt;&lt;/a&gt;AntiShad
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="ShaderLab" scheme="http://yoursite.com/tags/ShaderLab/"/>
    
  </entry>
  
  <entry>
    <title>【ShaderLab】时空断裂效果</title>
    <link href="http://yoursite.com/2018/05/08/AntiEffect/"/>
    <id>http://yoursite.com/2018/05/08/AntiEffect/</id>
    <published>2018-05-08T03:33:05.000Z</published>
    <updated>2018-05-08T04:24:45.223Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>居然写出来了，没想过能写出来</p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://oi3qt7c8d.qnssl.com/AntiEffect.gif" alt="AntiEffect.gif"></p>
<p>AntiEffect.shader<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">Shader "Custom/AntiTexture"</div><div class="line">&#123;</div><div class="line">	Properties</div><div class="line">	&#123;</div><div class="line">		_MainTex ("Texture", 2D) = "white" &#123;&#125;</div><div class="line">		[Enum(Const,1,Gradient,2)] _RenderType ("Render Type", Int) = 1</div><div class="line">		[Enum(AntiConst,1,AntiInverse,2)] _ColorType ("Color Type", Int) = 1</div><div class="line">		_Radius ("Radius", Range(0, 10)) = 0.0</div><div class="line">		_StartPos ("Start Position", Vector) = (0, 0, 0, 0)</div><div class="line">	&#125;</div><div class="line">	SubShader</div><div class="line">	&#123;</div><div class="line">		Pass</div><div class="line">		&#123;</div><div class="line">			CGPROGRAM</div><div class="line">			#pragma vertex vert</div><div class="line">			#pragma fragment frag</div><div class="line"></div><div class="line">			sampler2D _MainTex;</div><div class="line">			half _Radius;</div><div class="line">			fixed3 _StartPos;</div><div class="line">			int _RenderType;</div><div class="line">			int _ColorType;</div><div class="line"></div><div class="line"></div><div class="line">			#include "UnityCG.cginc"</div><div class="line"></div><div class="line">			struct a2v</div><div class="line">			&#123;</div><div class="line">				float4 vertex : POSITION;</div><div class="line">				float2 uv : TEXCOORD0;</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			struct v2f</div><div class="line">			&#123;</div><div class="line">				float2 uv : TEXCOORD0;</div><div class="line">				float4 vertex : SV_POSITION;</div><div class="line">				float3 worldPos : TEXCOORD1;</div><div class="line">			&#125;;</div><div class="line"></div><div class="line"></div><div class="line">			v2f vert (a2v v)</div><div class="line">			&#123;</div><div class="line">				v2f o;</div><div class="line">				o.vertex = UnityObjectToClipPos(v.vertex);</div><div class="line">				o.worldPos = mul(unity_ObjectToWorld,  v.vertex);</div><div class="line">				o.uv = v.uv;</div><div class="line">				return o;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			bool inRange(float3 pos)</div><div class="line">			&#123;</div><div class="line">				return distance(pos, _StartPos.xyz) &lt; _Radius;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			fixed4 frag (v2f i) : SV_Target</div><div class="line">			&#123;</div><div class="line">				fixed4 col = tex2D(_MainTex, i.uv);</div><div class="line"></div><div class="line">				// improve performance</div><div class="line">				if (_RenderType == 1)</div><div class="line">				&#123;</div><div class="line">					if (_ColorType == 2)</div><div class="line">					&#123;</div><div class="line">						col = 1 - col;</div><div class="line">					&#125;</div><div class="line">					return col;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				switch(_ColorType)</div><div class="line">				&#123;</div><div class="line">					case 1:</div><div class="line">						if (inRange(i.worldPos))</div><div class="line">						&#123;</div><div class="line">							col = 1 - col;</div><div class="line">						&#125;</div><div class="line">						break;</div><div class="line">					case 2:</div><div class="line">						if (!inRange(i.worldPos))</div><div class="line">						&#123;</div><div class="line">							col = 1 - col;</div><div class="line">						&#125;</div><div class="line">						break;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				return col;</div><div class="line">			&#125;</div><div class="line">			ENDCG</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote>
<p>复制粘贴在车上和旅馆里用手机打的字：</p>
</blockquote>
<p>想要实现的效果</p>
<p>全局断裂 效果</p>
<p>一开始是考虑这样一个效果，从某个点（比如player的中心）开始生成一个逐渐变大的球，在球范围内的物体开始产生效果（比如反色）</p>
<p>直接效果</p>
<p>对于一些简单的情况当然是可以做到的，比如物体A要被断裂，判断断裂球是否与A碰撞，从碰撞时在物体的shader传入几个参数（物体a的中心和断裂中心以计算断裂直线轨迹，还有断裂传播速度以获取半径），不过由于每帧要判断顶点或片元是否处于断裂球内，这样shader的计算量会变得相当大，可能会遇到一个性能瓶颈。</p>
<p>还有一个问题，如果只是简单的贴图shader还好，对于本身shader就很复杂的物体改写shader也是一件很痛苦的事情。或者说构建很复杂的物体，比如一个简单的人物模型上面就有几十几百个子物体，要这样全部改一遍根本不可能。</p>
<p>而且material和shader是多对一的关系，基本上就告别共用material了。（后记：对于Unity来说，shader即材质，没有更换shader的说法</p>
<p>间接效果</p>
<p>还有一个更加简单的办法，就是使用屏幕后处理。由名思义就是在所有渲染完成，呈现最终屏幕上的最终效果后，再进行最终的处理。</p>
<p>这样就简单了，因为只是处理一个tex2d，只要传入一个平面坐标和扩散速度，这个shader写起来就没有任何难度可言。但是这样做就不好控制深度问题，比如我不想影响被A挡住的B，但是不可能，因为先屏幕后处理再渲染B的话会出现诡异的位置情况。</p>
<p>（补个图）<br><img src="https://oi3qt7c8d.qnssl.com/AntiScreen.gif" alt="AntiScreen.gif"></p>
<p>这大概就是一个取舍问题。</p>
<p>无论如何，直接效果还是需要进行实验的，大致进度如下：（回去用那个猫模型为例）</p>
<p>反色材质shader → 动态反色材质shader → 加上触发器 → 加上传入参数功能</p>
<p>（然后摸了一周）</p>
<blockquote>
<p>这是写完后的想法：</p>
</blockquote>
<p>构思这个东西断断续续大概花了一周的时间，虽然一个很简单的想法，但是写起来不知道为什么那么痛苦。特别是shader的Debug，因为shader几乎没有Debug的方法，只能凭经验判断是哪里出了错。而且shaderlab对于初学者极不友好，我是在读了大概不知道多少个例子（而且是很陈旧的例子）之后，在脑子中推断语法，还要时时刻刻考虑性能问题。上面的代码我给出了一个<code>_RenderType</code>，从而在非碰撞时，设计一个能够跳过片元着色器的逻辑判断的分支。</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>感谢下列文章，虽然无法根本解决问题，但是为我提供了宝贵的思考价值：</p>
<p>【链接】UnityShader使用枚举切换整体色调<br><a href="https://blog.csdn.net/chy555chy/article/details/79065485" target="_blank" rel="external">https://blog.csdn.net/chy555chy/article/details/79065485</a></p>
<p>【链接】【猫猫的UnityShader之旅】之使用顶点的世界坐标<br><a href="https://blog.csdn.net/dbtxdxy/article/details/45679371" target="_blank" rel="external">https://blog.csdn.net/dbtxdxy/article/details/45679371</a></p>
<p>【链接】unity几种优化建议<br><a href="https://blog.csdn.net/ElyXiao/article/details/51980863" target="_blank" rel="external">https://blog.csdn.net/ElyXiao/article/details/51980863</a></p>
<p>以及《Unity Shader入门精要》，从附带的代码中解决了我绝大多数的困惑</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;居然写出来了，没想过能写出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://oi3
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Shader" scheme="http://yoursite.com/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】人物交互</title>
    <link href="http://yoursite.com/2018/04/29/CharactorSimulator/"/>
    <id>http://yoursite.com/2018/04/29/CharactorSimulator/</id>
    <published>2018-04-29T01:21:39.000Z</published>
    <updated>2018-05-08T04:19:58.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>动图杀猫，流量预警</p>
</blockquote>
<p>手撸了一个人物互动的例子，目前已经实现了一部分功能，一些看似简单的东西还是需要考虑很多东西的。这时候之前学到的东西都有用了，比如卡通shader和常用的设计模式等等，都帮助了我很多，同时下了一堆例子来别人是怎么设计库存的，又感觉打开了新世界的大门。通过模仿别人的设计模式来设计自己的功能，然后独立设计子功能再对照他人的设计，想想某个局部为什么要这样设计，都是有益的。</p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>以下列出了目前实现的功能，项目目前放在GitHub上</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>场景中的Prefab</p>
<p><input type="checkbox" disabled checked> 基本场景，人物模型，光</p>
<p><input type="checkbox" disabled checked> 人物控制，人物物理效果，自动追踪镜头</p>
<p><input type="checkbox" disabled checked> 几种不同类型的互动道具实例</p>
<p><input type="checkbox" disabled checked> 互动道具简单的物体效果，只禁止xz轴旋转（思考？</p>
<p><input type="checkbox" disabled checked> 互动NPC</p>
<p><input type="checkbox" disabled> 互动NPC的简单自发行为</p>
<h3 id="简单拓展"><a href="#简单拓展" class="headerlink" title="简单拓展"></a>简单拓展</h3><p>用于测试互动效果的实际情况</p>
<p><input type="checkbox" disabled checked> 显示player2(npc)的视角，添加视角切换功能</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-switchview.gif" alt="第二视角"></p>
<h3 id="UI功能"><a href="#UI功能" class="headerlink" title="UI功能"></a>UI功能</h3><p>这部分目前仅仅是设置panel的active属性，后面要考虑做一个完整的controller来管理所有的面板，控制depth等</p>
<p><input type="checkbox" disabled checked> [H] 显示帮助</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-ui-help.gif" alt="显示帮助"></p>
<p><input type="checkbox" disabled checked> [T] 显示提示栏</p>
<p><input type="checkbox" disabled checked> [I] 显示库存</p>
<h3 id="道具互动"><a href="#道具互动" class="headerlink" title="道具互动"></a>道具互动</h3><p><input type="checkbox" disabled checked> [R] 显示可互动的范围</p>
<p><input type="checkbox" disabled checked> 标记互动范围的可互动物体，用高亮边缘着色</p>
<p><input type="checkbox" disabled checked> 高亮边缘着色时，物体上方同时提示互动按键</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-reachpick.gif" alt="互动范围"></p>
<p><input type="checkbox" disabled checked> [C] 检查互动范围内的物体，用另一种高亮边缘着色</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-check.gif" alt="检查"></p>
<p><input type="checkbox" disabled checked> [1-9，0，MouseWheel] 选定当前道具栏内的道具</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-itemselect.gif" alt="选择道具"></p>
<p><input type="checkbox" disabled checked> [E] 拾取可互动范围内的一个物体</p>
<p><input type="checkbox" disabled checked> [Q] 丢弃当前道具栏选定的道具</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-itemdiscard.gif" alt="丢弃道具"></p>
<p><input type="checkbox" disabled checked> [F] 使用当前道具栏选定的道具</p>
<p><img src="https://oi3qt7c8d.qnssl.com/cs-itemuse.gif" alt="丢弃道具"></p>
<h3 id="人物互动"><a href="#人物互动" class="headerlink" title="人物互动"></a>人物互动</h3><p><input type="checkbox" disabled> bh3式人物互动效果</p>
<h2 id="扯淡"><a href="#扯淡" class="headerlink" title="扯淡"></a>扯淡</h2><blockquote>
<p>关于提高自学效率</p>
</blockquote>
<p>Richard Feynman说如果你想成为天才，就在你的头脑里随时准备好12个需要解决的问题。每当你的生活中发生一件事，就把这些问题拿出来检查一下，看其中是否有问题会得到进展。我觉得普通人都不缺乏解决问题的能力，缺乏的还是发现问题的能力。当然并不需要像Feynman准备那么多问题（一般人也不具备那样发掘问题的能力），至少做到不断地在你的todolist上添加一些挑战性的事情，然后从日常的其他事件中不经意的就能够解决一些。（甚至有一些通过简单的精神训练就可以）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;动图杀猫，流量预警&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手撸了一个人物互动的例子，目前已经实现了一部分功能，一些看似简单的东西还是需要考虑很多东西的。这时候之前学到的东西都有用了，比如卡通shader和常用的设计模式等等，都帮助了我很多，同时
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】April 21 Daily</title>
    <link href="http://yoursite.com/2018/04/21/unreal_renderring/"/>
    <id>http://yoursite.com/2018/04/21/unreal_renderring/</id>
    <published>2018-04-21T04:12:17.000Z</published>
    <updated>2018-04-29T01:24:06.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>老了再去思考怎么安逸吧</p>
</blockquote>
<h1 id="Assets-store"><a href="#Assets-store" class="headerlink" title="Assets store"></a>Assets store</h1><p>unity官网的素材商店已经几乎处在dead的边缘，不管是实体素材还是脚本素材的贵的一比，而且作者无暇维护。好多高评分的素材都是尼玛四年前五年前的评论，而unity早就更新换代几百遍了。话虽如此，我还是花了20美刀买了两个脚本（Dynamic  bones，里面真的就是两个脚本），真的肉痛，虽然想过用盗版，但还是想想算了，难得的作者还在更新，兼容性和文档又这么好的素材也难得。目前的unity开发者在assets store花上几万块的人也不在少数，但对于初学者来说可能是一笔负担。幸好商店里的免费素材足够多（当然很多都是为完整版打广告的预览版），可以让你前期过渡足够的时间。使用商店里的素材的好处就是你可以让素材跟着账号走，不需要考虑版权问题等，说到底就是图个心安。</p>
<h1 id="使用mmd模型"><a href="#使用mmd模型" class="headerlink" title="使用mmd模型"></a>使用mmd模型</h1><p>unity是无法直接使用mmd导出的.pmx人物模型的，但是有一个日本大神写了一个unity插件<a href="http://stereoarts.jp" target="_blank" rel="external">MMD4Mecanim</a>可以把.pmx完全转化为unity的人物model。我们可以下载一些开源的mmd模型，例如绊爱（目前唯一开源的YouTuber形象），v家（模型开源但是需要有账号）进行尝试。插件下好后是一个 .unitypachage，导入后项目内原本不被识别的.pmx模型文件，其inspector界面就变成了一个用户协议签署界面，同意下一步后就是一个model的生成配置界面，这里可以导入.vmd文件来生成，这样就是一个完整的mmd动画（音乐另配）。</p>
<p>不用担心兼容性的问题，这里的mmd模型已经完全变成Unity的人物model了，注意把模型的Rig类型改成humanoid（旧版动画是Legacy）。这里可以利用骨骼脚本实现乳摇啊、飘逸裙底啊的效果（没错，就是那个20美刀的脚本）至于调的效果如何，这是一个强迫症的问题。当然你调的越仔细效果越逼真（可以玩一天/捂脸</p>
<p><img src="https://oi3qt7c8d.qnssl.com/aichan.gif" alt="用绊爱替换U酱，这里还需要给对zz妹子的头发使用骨骼脚本设置参数使其变得柔软，再对头部添加碰撞器避免穿模"></p>
<h1 id="卡通风格的Shader"><a href="#卡通风格的Shader" class="headerlink" title="卡通风格的Shader"></a>卡通风格的Shader</h1><p>卡通类型的人物不需要真实的光影效果，他们都有两个很明显的特点：1.人物边缘有明显的描线或者其他效果；2.大片面积的相同颜色。实现这两个效果实际上并不复杂，仅需两个简单的pass即可完成，这里简单提供下思路：1.边缘上的点扩展其法线（向量归一扩展后再归一）2.把高光判断条件从曲线型函数改为区间函数。</p>
<p>渲染部分的内容已经没必要继续往下看了，现在还是需要完成一个完整的功能，这几天一直在思考这个（反正有需要的时候再读</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;老了再去思考怎么安逸吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Assets-store&quot;&gt;&lt;a href=&quot;#Assets-store&quot; class=&quot;headerlink&quot; title=&quot;Assets store&quot;&gt;&lt;/a&gt;Asse
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Shader" scheme="http://yoursite.com/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>【ShaderLab】光</title>
    <link href="http://yoursite.com/2018/04/16/light/"/>
    <id>http://yoursite.com/2018/04/16/light/</id>
    <published>2018-04-16T08:38:35.000Z</published>
    <updated>2018-04-18T04:19:25.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>n个月后重读《Unity Shader入门精要》（第六章</p>
</blockquote>
<h1 id="光与材质"><a href="#光与材质" class="headerlink" title="光与材质"></a>光与材质</h1><p>首先要明白一件事情，物体的呈现的颜色不是物体的性质。物体的颜色取决于物体的材质和光。</p>
<p>而光有分为好几种，一是最简单的平行光，它没有所谓的光源，光强均等，是一种理想模型（例如狭义上的太阳光），二是点光源，例如基本上所有的灯光都是点光源，它的光强与它有限的距离成反比，还有其他衍生下去的光类型，不外乎这几种性质：照射距离，光的强度（颜色）。</p>
<p>物体的材质包括对各个颜色分量的处理程度，因此对某个颜色处理得更宽容，物体就偏向呈现那个颜色。还包括反射率，漫反射率，和环境光率，这些都直接影响到物体呈现的效果。</p>
<p>物体除了被光直接照亮，反射到摄像机中，还有其他的光线。例如密室中一个物体被聚光灯照亮，背部也不是完全的黑暗。这就是部分散射光和环境光的作用。总体来说，「从摄像机看到某位置的」光=反射光+散射光+环境光，这有一个具体的公式，有兴趣的可以查阅相关资料</p>
<h1 id="标准光照模型（数学基础"><a href="#标准光照模型（数学基础" class="headerlink" title="标准光照模型（数学基础"></a>标准光照模型（数学基础</h1><p>裴祥风（Bui Tuong Phong）提1975年出的的标准光照模型，基本方法是把进入摄像机的光线分为四个部分，每个部分用各自的方法计算贡献度。由简单至复杂陈列如下：</p>
<h2 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h2><p>环境光用于描述所有其他的间接光照，但在标准光照模型中，通常使用一个全局变量环境光来近似模拟间接光照：</p>
<script type="math/tex; mode=display">c_{ambiet}\,=\,g_{ambiet}</script><h2 id="自发光"><a href="#自发光" class="headerlink" title="自发光"></a>自发光</h2><p>光线可以由光源直接进入摄像机而不进行反射。自发光的表面并不会照亮其他物体，只是使自身看起来更亮而已。计算时直接使用材质的自发光颜色：</p>
<script type="math/tex; mode=display">c_{emissive}\,=\,m_{emissive}</script><h2 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h2><p>漫反射光照符合兰伯特定律（Lambert’s law）：反射光线强度与表面法线和光源方向间夹角的余弦成正比。因此漫反射部分计算如下：</p>
<script type="math/tex; mode=display">c_{diffuse} = ( c_{light} · m_{diffuse} )\max(0, \ n·l)</script><p>其中$c_{light}$光源颜色，$m_{diffuse}$为材质的漫反射颜色，$n$为表面法线，$l$为指向光源的单位矢量</p>
<h2 id="高光反射"><a href="#高光反射" class="headerlink" title="高光反射"></a>高光反射</h2><p>这里的高光反射都是经验模型，不符合真实世界情况。它用于计算那些镜面反射的光线，使物体看起来比较有光泽。</p>
<p>已知表面法线$n$，光源方向$l$，视角方向$v$这三个矢量，可以推出第四个矢量反射方向$r$：</p>
<script type="math/tex; mode=display">r = 2(n·l)n-l</script><p>这样就可以利用Phone模型，计算高光反射部分如下</p>
<script type="math/tex; mode=display">c_{specular} = ( c_{light} · m_{specular} )\max(0, v·r) ^{m_{gloss}}</script><p>其中$c_{light}$为光源颜色和强度， $m_{specular}$为材质的高光反射颜色。$m_{gloss}$为材料的光泽度（gloss），也成为反光度（shininess），$m_{gloss}$越小，亮点就越大。</p>
<p>Blinn使用了一个更简单的修改方法来得到类似的效果，它的基本思想是避免计算反射方向$r$。因此引入一个新的矢量$h$，它是通过$v$和$l$的取平均后再归一得到的，即</p>
<script type="math/tex; mode=display">h = \frac{v+l}{|v+l|}</script><p>然后使用$n$和$h$之间的夹角进行计算</p>
<script type="math/tex; mode=display">c_{specular} = ( c_{light} · m_{specular} )\max(0, n·h) ^{m_{gloss}}</script><p>在硬件实现时如果摄像机和光源足够近（$v$和$l$都是定值，因此$h$是常量），Blinn模型会更快。如果$v$和$l$不是定值时Phong模型可能更快一点。Blinn方法由于简化计算从而在某些情况可能更快，而且在一些情况下更符合实验结果。但是注意，这两种光照模型都是经验模型，不应该认为Blinn是『正确的』Phong模型的近似。</p>
<p>标准光照模型是一个经验模型，因为裴祥风先提出、Blinn的方法简化计算，因此这种模型称为Blinn-Phone模型。</p>
<h1 id="实现（Unity-Shader"><a href="#实现（Unity-Shader" class="headerlink" title="实现（Unity Shader"></a>实现（Unity Shader</h1><h2 id="漫反射光照模型"><a href="#漫反射光照模型" class="headerlink" title="漫反射光照模型"></a>漫反射光照模型</h2><p>上一节我们给出漫反射部分的计算公式：</p>
<script type="math/tex; mode=display">c_{diffuse} = ( c_{light} · m_{diffuse} )\max(0, \ n·l)</script><ul>
<li>saturate(x)函数把x截取在[0,1]内</li>
</ul>
<h3 id="逐顶点光照"><a href="#逐顶点光照" class="headerlink" title="逐顶点光照"></a>逐顶点光照</h3><p>DiffuseVertexLevel.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">Shader "Unity Shaders Book/Chapter 6/Diffuse Vertex-Level" &#123;</div><div class="line">  Properties &#123;</div><div class="line">    _Diffuse ("Diffuse", Color) = (1, 1, 1, 1)</div><div class="line">  &#125;</div><div class="line">  SubShader &#123;</div><div class="line">    Pass &#123;</div><div class="line">      Tags &#123; "LightMode"="ForwardBase" &#125;</div><div class="line"></div><div class="line">      CGPROGRAM</div><div class="line"></div><div class="line">      #pragma vertex vert</div><div class="line">      #pragma fragment frag</div><div class="line"></div><div class="line">      #include "Lighting.cginc"</div><div class="line"></div><div class="line">      fixed4 _Diffuse;</div><div class="line"></div><div class="line">      struct a2v &#123;</div><div class="line">        float4 vertex : POSITION;</div><div class="line">        float3 normal : NORMAL;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      struct v2f &#123;</div><div class="line">        float4 pos : SV_POSITION;</div><div class="line">        fixed3 color : COLOR;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      v2f vert(a2v v) &#123;</div><div class="line">        v2f o;</div><div class="line">        // Transform the vertex from object space to projection space</div><div class="line">        o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</div><div class="line"></div><div class="line">        // Get ambient term</div><div class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</div><div class="line"></div><div class="line">        // Transform the normal from object space to world space</div><div class="line">        fixed3 worldNormal = normalize(mul(v.normal, (float3x3)_World2Object));</div><div class="line">        // Get the light direction in world space</div><div class="line">        fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz);</div><div class="line">        // Compute diffuse term</div><div class="line">        fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));</div><div class="line"></div><div class="line">        o.color = ambient + diffuse;</div><div class="line"></div><div class="line">        return o;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">        return fixed4(i.color, 1.0);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ENDCG</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  FallBack "Diffuse"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="逐像素光照"><a href="#逐像素光照" class="headerlink" title="逐像素光照"></a>逐像素光照</h3><p>DiffusePixelLevel.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">Shader "Unity Shaders Book/Chapter 6/Diffuse Pixel-Level" &#123;</div><div class="line">  Properties &#123;</div><div class="line">    _Diffuse ("Diffuse", Color) = (1, 1, 1, 1)</div><div class="line">  &#125;</div><div class="line">  SubShader &#123;</div><div class="line">    Pass &#123;</div><div class="line">      Tags &#123; "LightMode"="ForwardBase" &#125;</div><div class="line"></div><div class="line">      CGPROGRAM</div><div class="line"></div><div class="line">      #pragma vertex vert</div><div class="line">      #pragma fragment frag</div><div class="line"></div><div class="line">      #include "Lighting.cginc"</div><div class="line"></div><div class="line">      fixed4 _Diffuse;</div><div class="line"></div><div class="line">      struct a2v &#123;</div><div class="line">        float4 vertex : POSITION;</div><div class="line">        float3 normal : NORMAL;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      struct v2f &#123;</div><div class="line">        float4 pos : SV_POSITION;</div><div class="line">        float3 worldNormal : TEXCOORD0;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      v2f vert(a2v v) &#123;</div><div class="line">        v2f o;</div><div class="line">        // Transform the vertex from object space to projection space</div><div class="line">        o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</div><div class="line"></div><div class="line">        // Transform the normal from object space to world space</div><div class="line">        o.worldNormal = mul(v.normal, (float3x3)_World2Object);</div><div class="line"></div><div class="line">        return o;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">        // Get ambient term</div><div class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</div><div class="line"></div><div class="line">        // Get the normal in world space</div><div class="line">        fixed3 worldNormal = normalize(i.worldNormal);</div><div class="line">        // Get the light direction in world space</div><div class="line">        fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</div><div class="line"></div><div class="line">        // Compute diffuse term</div><div class="line">        fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLightDir));</div><div class="line"></div><div class="line">        fixed3 color = ambient + diffuse;</div><div class="line"></div><div class="line">        return fixed4(color, 1.0);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ENDCG</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  FallBack "Diffuse"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="半兰伯特模型"><a href="#半兰伯特模型" class="headerlink" title="半兰伯特模型"></a>半兰伯特模型</h3><p>Valve在开发HF的时候在兰伯特模型（即漫反射光照模型）上进行修改，因此称为半兰伯特光照模型，广义的半兰伯特光照模型的公式如下</p>
<script type="math/tex; mode=display">c_{diffuse} = ( c_{light} · m_{diffuse} )（\alpha(n·l) +\beta）</script><p>使用了一次函数来代替max函数防止负值，绝大多数情况下，$\alpha$和$\beta$的值为0.5，即</p>
<script type="math/tex; mode=display">c_{diffuse} = ( c_{light} · m_{diffuse} )（0.5(n·l) +0.5）</script><p>修改DiffusePixelLevel.shader中的片源着色器：</p>
<p>HalfLambert.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    // Compute diffuse term</div><div class="line">    fixed halfLambert = dot(worldNormal, worldLightDir) * 0.5 + 0.5;</div><div class="line">    fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * halfLambert;</div><div class="line"></div><div class="line">    fixed3 color = ambient + diffuse;</div><div class="line"></div><div class="line">    return fixed4(color, 1.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是三个光照的对比效果：（半兰伯特很明显能够使背光面照亮</p>
<p><img src="https://oi3qt7c8d.qnssl.com/diff.gif" alt="diff.gif"></p>
<h2 id="高光反射模型"><a href="#高光反射模型" class="headerlink" title="高光反射模型"></a>高光反射模型</h2><p>上一节我们给出高光反射部分的计算公式：</p>
<script type="math/tex; mode=display">c_{specular} = ( c_{light} · m_{specular} )\max(0, v·r) ^{m_{gloss}}</script><ul>
<li>reflect(i,n)函数用于计算反射方向（i：入射方向，n：法线方向）</li>
</ul>
<h3 id="逐顶点光照-1"><a href="#逐顶点光照-1" class="headerlink" title="逐顶点光照"></a>逐顶点光照</h3><p>SpecularVertexLevel.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">Shader "Unity Shaders Book/Chapter 6/Specular Vertex-Level" &#123;</div><div class="line">  Properties &#123;</div><div class="line">    _Diffuse ("Diffuse", Color) = (1, 1, 1, 1)</div><div class="line">    _Specular ("Specular", Color) = (1, 1, 1, 1)</div><div class="line">    _Gloss ("Gloss", Range(8.0, 256)) = 20</div><div class="line">  &#125;</div><div class="line">  SubShader &#123;</div><div class="line">    Pass &#123;</div><div class="line">      Tags &#123; "LightMode"="ForwardBase" &#125;</div><div class="line"></div><div class="line">      CGPROGRAM</div><div class="line"></div><div class="line">      #pragma vertex vert</div><div class="line">      #pragma fragment frag</div><div class="line"></div><div class="line">      #include "Lighting.cginc"</div><div class="line"></div><div class="line">      fixed4 _Diffuse;</div><div class="line">      fixed4 _Specular;</div><div class="line">      float _Gloss;</div><div class="line"></div><div class="line">      struct a2v &#123;</div><div class="line">        float4 vertex : POSITION;</div><div class="line">        float3 normal : NORMAL;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      struct v2f &#123;</div><div class="line">        float4 pos : SV_POSITION;</div><div class="line">        fixed3 color : COLOR;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      v2f vert(a2v v) &#123;</div><div class="line">        v2f o;</div><div class="line">        // Transform the vertex from object space to projection space</div><div class="line">        o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</div><div class="line"></div><div class="line">        // Get ambient term</div><div class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</div><div class="line"></div><div class="line">        // Transform the normal from object space to world space</div><div class="line">        fixed3 worldNormal = normalize(mul(v.normal, (float3x3)_World2Object));</div><div class="line">        // Get the light direction in world space</div><div class="line">        fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</div><div class="line"></div><div class="line">        // Compute diffuse term</div><div class="line">        fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLightDir));</div><div class="line"></div><div class="line">        // Get the reflect direction in world space</div><div class="line">        fixed3 reflectDir = normalize(reflect(-worldLightDir, worldNormal));</div><div class="line">        // Get the view direction in world space</div><div class="line">        fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - mul(_Object2World, v.vertex).xyz);</div><div class="line"></div><div class="line">        // Compute specular term</div><div class="line">        fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(reflectDir, viewDir)), _Gloss);</div><div class="line"></div><div class="line">        o.color = ambient + diffuse + specular;</div><div class="line"></div><div class="line">        return o;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">        return fixed4(i.color, 1.0);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ENDCG</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  FallBack "Specular"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="逐像素光照-1"><a href="#逐像素光照-1" class="headerlink" title="逐像素光照"></a>逐像素光照</h3><p>SpecularPixelLevel.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">Shader "Unity Shaders Book/Chapter 6/Specular Pixel-Level" &#123;</div><div class="line">  Properties &#123;</div><div class="line">    _Diffuse ("Diffuse", Color) = (1, 1, 1, 1)</div><div class="line">    _Specular ("Specular", Color) = (1, 1, 1, 1)</div><div class="line">    _Gloss ("Gloss", Range(8.0, 256)) = 20</div><div class="line">  &#125;</div><div class="line">  SubShader &#123;</div><div class="line">    Pass &#123;</div><div class="line">      Tags &#123; "LightMode"="ForwardBase" &#125;</div><div class="line"></div><div class="line">      CGPROGRAM</div><div class="line"></div><div class="line">      #pragma vertex vert</div><div class="line">      #pragma fragment frag</div><div class="line"></div><div class="line">      #include "Lighting.cginc"</div><div class="line"></div><div class="line">      fixed4 _Diffuse;</div><div class="line">      fixed4 _Specular;</div><div class="line">      float _Gloss;</div><div class="line"></div><div class="line">      struct a2v &#123;</div><div class="line">        float4 vertex : POSITION;</div><div class="line">        float3 normal : NORMAL;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      struct v2f &#123;</div><div class="line">        float4 pos : SV_POSITION;</div><div class="line">        float3 worldNormal : TEXCOORD0;</div><div class="line">        float3 worldPos : TEXCOORD1;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      v2f vert(a2v v) &#123;</div><div class="line">        v2f o;</div><div class="line">        // Transform the vertex from object space to projection space</div><div class="line">        o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</div><div class="line"></div><div class="line">        // Transform the normal from object space to world space</div><div class="line">        o.worldNormal = mul(v.normal, (float3x3)_World2Object);</div><div class="line">        // Transform the vertex from object spacet to world space</div><div class="line">        o.worldPos = mul(_Object2World, v.vertex).xyz;</div><div class="line"></div><div class="line">        return o;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">        // Get ambient term</div><div class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</div><div class="line"></div><div class="line">        fixed3 worldNormal = normalize(i.worldNormal);</div><div class="line">        fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</div><div class="line"></div><div class="line">        // Compute diffuse term</div><div class="line">        fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLightDir));</div><div class="line"></div><div class="line">        // Get the reflect direction in world space</div><div class="line">        fixed3 reflectDir = normalize(reflect(-worldLightDir, worldNormal));</div><div class="line">        // Get the view direction in world space</div><div class="line">        fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - i.worldPos.xyz);</div><div class="line">        // Compute specular term</div><div class="line">        fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(reflectDir, viewDir)), _Gloss);</div><div class="line"></div><div class="line">        return fixed4(ambient + diffuse + specular, 1.0);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ENDCG</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  FallBack "Specular"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Blinn-Phong光照模型"><a href="#Blinn-Phong光照模型" class="headerlink" title="Blinn-Phong光照模型"></a>Blinn-Phong光照模型</h3><p>上一节中提到了Phong光照模型的实习，但是我们提出来另一种Blinn光照模型，即引入一个矢量$h$来避免计算反射方向$r$：</p>
<script type="math/tex; mode=display">h = \frac{v+l}{|v+l|}</script><p>然后使用$n$和$h$之间的夹角进行计算（Blinn模型）：</p>
<script type="math/tex; mode=display">c_{specular} = ( c_{light} · m_{specular} )\max(0, n·h) ^{m_{gloss}}</script><p>修改SpecularPixelLevel.shader中的片源着色器：</p>
<p>BlinnPhong.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">  ...</div><div class="line"></div><div class="line">  // Compute diffuse term</div><div class="line">  fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * max(0, dot(worldNormal, worldLightDir));</div><div class="line"></div><div class="line">  // Get the view direction in world space</div><div class="line">  fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - i.worldPos.xyz);</div><div class="line">  // Get the half direction in world space</div><div class="line">  fixed3 halfDir = normalize(worldLightDir + viewDir);</div><div class="line">  // Compute specular term</div><div class="line">  fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0, dot(worldNormal, halfDir)), _Gloss);</div><div class="line"></div><div class="line">  return fixed4(ambient + diffuse + specular, 1.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是三个高光的对比效果：（Blinn-Phong模型看起来更大更亮一些。</p>
<p><img src="https://oi3qt7c8d.qnssl.com/spe.gif" alt="spe.gif"></p>
<h2 id="使用Unity内置函数"><a href="#使用Unity内置函数" class="headerlink" title="使用Unity内置函数"></a>使用Unity内置函数</h2><p>与BlinnPhong.shader中代码几乎一致，修改部分代码如下</p>
<p>BlinnPhongUseBuildInFunctions.shader</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">v2f vert(a2v v) &#123;</div><div class="line">	v2f o;</div><div class="line">  ...</div><div class="line"></div><div class="line">  // Use the build-in funtion to compute the normal in world space</div><div class="line">  o.worldNormal = UnityObjectToWorldNormal(v.normal);</div><div class="line">  ...</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fixed4 frag(v2f i) : SV_Target &#123;</div><div class="line">  ...</div><div class="line">  fixed3 worldNormal = normalize(i.worldNormal);</div><div class="line">  //  Use the build-in funtion to compute the light direction in world space</div><div class="line">  // Remember to normalize the result</div><div class="line">  fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  // Use the build-in funtion to compute the view direction in world space</div><div class="line">  // Remember to normalize the result</div><div class="line">  fixed3 viewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="UnityCG-cginc的常用函数"><a href="#UnityCG-cginc的常用函数" class="headerlink" title="UnityCG.cginc的常用函数"></a>UnityCG.cginc的常用函数</h3><div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>float3 WorldSpaceViewDir(float4 v)</td>
<td>模型空间的顶点位置-&gt;世界空间中该点到摄像机的观察方向（内部使用UnityWorldSpaceViewDir）</td>
</tr>
<tr>
<td>float3 UnityWorldSpaceViewDir(float4 v)</td>
<td>世界空间的顶点位置-&gt;世界空间中该点到摄像机的观察方向</td>
</tr>
<tr>
<td>float3 ObjSapceViewDir(float4 v)</td>
<td>模型空间的顶点位置-&gt;模型空间中该点到摄像机的观察方向</td>
</tr>
<tr>
<td>float3 WorldSpaceLightDir(float4 v)</td>
<td>前向渲染中，模型空间的顶点位置-&gt;世界空间中该点到摄像机的光照方向。没有归一化（内部使用UnityWorldSpaceLightDir）</td>
</tr>
<tr>
<td>float3 UnityWorldSpaceLightDir(float4 v)</td>
<td>前向渲染中，世界空间的顶点位置-&gt;模型空间中该点到摄像机的光照方向。没有归一化</td>
</tr>
<tr>
<td>float3 ObjSpaceLightDir(float4 v)</td>
<td>前向渲染中，模型空间的顶点位置-&gt;模型空间中该点到摄像机的光照方向。没有归一化</td>
</tr>
<tr>
<td>float3 UnityObjectToWorldNormal(float3 norm)</td>
<td>法线方向，模型空间-&gt;世界空间</td>
</tr>
<tr>
<td>float3 UnityObjectToWorldDir(float3 dir)</td>
<td>方向矢量，模型空间-&gt;世界空间</td>
</tr>
<tr>
<td>float3 UnityWorldToObjectDir(float3 dir)</td>
<td>方向矢量，世界空间-&gt;模型空间</td>
</tr>
</tbody>
</table>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;n个月后重读《Unity Shader入门精要》（第六章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;光与材质&quot;&gt;&lt;a href=&quot;#光与材质&quot; class=&quot;headerlink&quot; title=&quot;光与材质&quot;&gt;&lt;/a&gt;光与材质&lt;/h1&gt;&lt;p
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Shader" scheme="http://yoursite.com/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>【闲聊】我理想中的极客部落</title>
    <link href="http://yoursite.com/2018/04/15/Ideal-Geeklub/"/>
    <id>http://yoursite.com/2018/04/15/Ideal-Geeklub/</id>
    <published>2018-04-15T14:41:46.000Z</published>
    <updated>2018-04-16T11:48:21.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>看群里人聊天有感而发</p>
</blockquote>
<h2 id="之前的极客部落"><a href="#之前的极客部落" class="headerlink" title="之前的极客部落"></a>之前的极客部落</h2><p>大二曾经赌气，在所有社交平台上发了「不再干涉组织和社团的相关事宜」的文字，大抵是抗争失败而表达了对geeklub发展的不满。但是作为一个大四快毕业的老逼，还是对曾经心中的社团有感情的，因为这个社团，我认识了很多正常途径不会遇到的朋友，比如基东斌神，比如12届的学长们（快一个班那么多了），和他们的相处使我从一个一无所知的内向小白，发展到一个厚脸皮、技术还算可以的老逼，从性格上还是见识上都经历了一个很大的跨度。理论上没有这个社团，我就不会遇见这些人，也不会有这么大的改变。而且这如果是一般的那种社团，也不会有这种氛围的，因为这是我大学里见过的最牛逼的社团</p>
<p>极客部落貌似最初面试挺麻烦的，我大一的时候是中途加入的，第二学期的时候作为一个真小白，在隔壁漫研社（我也是这个社的初代成员之一，大一自己成立的）跑过来厚着脸皮和学长一起吃了几次饭以后，稍微熟悉一下关系。之后偷偷加到gk的群里，于是就绕过繁琐的内部考核机制，基本上也不算gk的成员，但是参加了gk的全部活动。这当然是后话了，我只想说的是，你只要脸皮够厚，有些事还是做得到的。</p>
<p>有一点我是很诧异的，现在的新生是不是都被洗脑了，愿意相信老师，不愿相信学长学姐，这是我最不能理解的。大学老师只把你们当做免费劳动力，在你们意识到这些事情的时候狠狠的压榨你们（万恶的资本主义）。我那时候对学长学姐还是很仰慕的，但有时候不太了解上几届的人际关系，因此还做了些一厢情愿的傻事……不过我觉得都是值得的。</p>
<p>以前的gk不需要广告，强者上场，弱智退散，本部的那些技术社团根本无法与gk同台竞技，特别是12届有些强的令人发指（真的屌，软工一个小破学院，根本拿不到学校资源，各种拉赞助搞活动，各种帮张云擦xx）。但是自从软工合并、学长的离开以后社团变得有些死气沉沉，我也曾苦苦思索社团的出路。社长完全不表态，最后我们几个决定完全放权（Qi），自然生长，到时候社团如果到了那一步，该散也就散了。（毕竟我们这群人还在，本来招新也不是必要的事情。</p>
<h2 id="由盛而衰"><a href="#由盛而衰" class="headerlink" title="由盛而衰"></a>由盛而衰</h2><p>被问起社团定位的时候，我蛮尴尬的表示，社团处于放养状态。一个组织完全没有组织的作用，甚至成了负担。</p>
<p>我也曾经思考过社团转型的可能，社团目前要和hw那种区分开，发展出独特的路线，这得到了当时大多数人的默认或认同：</p>
<ol>
<li>社员不分技术，自我审查代替定期被动审查；</li>
<li>所有活动分为一个提议者和其他自愿响应者，讨论确定后自觉遵守并执行；</li>
<li>社员代谢方式为广泛吸收，沉淀筛选，反正到时候觉得自己跟不上或者不适合的自然不活跃……</li>
</ol>
<p>但是这里我犯了一个错误，就是我默认所有人都是很理性、上进、自信的。然而事实上，所有人都是短视、贪婪、畏惧、本质上又是懒惰的。你扪心自问一下，你在大学坚持做过最长的事情是什么？我没有做过坚持很长的事情，但是我把做过的事情都坚持用博客写了下来，一坚持就是四年，到目前我还常常看过去的文字来反省自己。</p>
<p>我一厢情愿的相信，作为前社长，刘昆和雾雾也思考过这个问题。但是最终没有改变，是不是也要反省一下自己呢？我觉得，你们是优秀的好社员，但真的不是一个好社长。</p>
<p>社团的机制，运作模式，以及处理具体的例子，还是最好一开始就说清楚，中途执行会带来无尽的麻烦。</p>
<h2 id="人的本能"><a href="#人的本能" class="headerlink" title="人的本能"></a>人的本能</h2><p>人的行为动机基于反馈机制，按钮会亮所以你会去按，任务有奖励或者后续剧情所以你才会去做。你加入一个组织，大抵也是想或多或少的获取到一些生存资源，这合情合理，但是形式如何呢？</p>
<p>最初是自己办的讲座分享，我们这届尝试过、效果并不好。上面焦头烂额，下面低头手机。层次差太多不行，层次相近又没有意义。最重要的事情是，分享者作为一个普通大学生，本身没有得到什么反馈，而且这些东西都是我从万千次试错中得出来的结论，听众要是不犯过同等数量级的错误，是不会理解我这么做的合理性的，这是我一个不愿意分享的重要原因。如果是那种科普类，谁都能讲的那种讲座更没有意义了，而且人只会相信实际应用的东西，理论上的无论你怎么说都很无力。最重要的是，听的人本身没兴趣，这个打击是最大的</p>
<p>其他形式有没有？有，比如问问题。但是问问题又是一门不是很高深，但是非入门不可的学问了。有兴趣可以参考我之前的一篇<a href="http://mikumiku.com.cn/2016/07/23/sorry/" target="_blank" rel="external">文章</a>。</p>
<p>因此最靠谱，最稳定的社团交流互动还是需要存在于同期生之间，特别对于萌新来说。但是问题又来了，何为良性的交流互动？我们经常能看到大家习惯性的索取姿态，平时一句话不说，有需要了伸个手。第一点，你的反馈得到了满足，但对于除开你之外的剩余成员得到了什么？第二点，如果你的问题没有解决，理论上社团生态圈是平衡了，但是你会不会因此反感社团？</p>
<p>我曾经多次提起写博客或类似的习惯，是因为要保持定时输出的好习惯。这更是一种对自己的负责。如果你和一帮小伙伴能够共同进步，一直分享这个月你学了什么，我学了什么，看到别人进步了感觉很急躁从而努力，这样你追我赶，不是挺好的嘛？</p>
<p>博客内容我也说过，我倾向写「湿货」类文章，就是解决具体问题，填具体填一个坑的文章，这种文章没有什么参考价值，但是你从中获得的解决问题的思考方法是很重要的。（这个看个人喜好</p>
<p>用文字表达也很重要，你脑袋里所谓天马行空、浩浩荡荡的想法，用文字写下来可能就区区五十个字。有时候写下来更容易分析可行性。对于萌新，还是鼓励大家学习一些于课本外的技术。记住，要培养不是新技术，是学习新技术的能力。</p>
<h2 id="理想的社团"><a href="#理想的社团" class="headerlink" title="理想的社团"></a>理想的社团</h2><p>其实不只是GK，以上说明适用于任何兴趣型社团。现在的GK已经不求你能有多少贡献了，新人们只要在大学里能够保持自我，不迷失自己就是对GK的莫大建设。如果GK还想重新成为那个我设想中社团，至少要满足以下几点：</p>
<ol>
<li>一个牛逼的社长。社长绝对、绝对要是一个牛逼的人，不仅技术要好，交际能力也要足够好，行动力也要够强，不怕搞事。</li>
<li>足够活跃的社员。大佬直接是会相互吸引的，而萌新们能够及时洞悉相处规则后也能够保持足够的活跃度。（这种事情越早了解越好</li>
<li>一个足够完整的成员信息公告板。至少我看到某个名字能够通过查询某个地方了解这个人所提供的信息，从而进一步交流。（特别是对于同期的社员来说</li>
<li>定期的集体活动。组队参加比赛之类的能够十分深刻的加深彼此的了解，能够帮你交到好朋友：）</li>
</ol>
<p>但是理想究竟是理想，新社长在百人群里办个活动（且不论活动组织性如何，有没有完整的活动说明啊，有没有签到预估人数啊）只来了5个人，GK也差不多完成了它的历史使命吧。</p>
<h2 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h2><p><a href="https://coding.net/u/hellovass/p/GeeKlub/git?public=true" target="_blank" rel="external">轲爷的在coding上为我们这一届做的GeekLub项目</a> 发展故事在  event / The Story of GeeKlub</p>
<p>（如果你有写或者看到关于对GK评价的文章或者其他，联系我我会把链接加到这里</p>
<h2 id="博客公式测试"><a href="#博客公式测试" class="headerlink" title="博客公式测试"></a>博客公式测试</h2><p>$ x^{y^z}=(1+e^x)^{-2xy^w} $</p>
<p>$ A_0A_1A_2A_3 $</p>
<p>参见这些文章<a href="https://www.cnblogs.com/Ai-heng/p/7282110.html" target="_blank" rel="external">1</a>，<a href="https://www.jianshu.com/p/a0aa94ef8ab2" target="_blank" rel="external">2</a>，<a href="https://docs.mathjax.org/en/latest/api/index.html" target="_blank" rel="external">APIdoc</a></p>
<p>（因为后面要改很多手里屯着的文章，不要问我为什么发文章这么慢，因为写的太水呀……我只是不愿意妥协而已</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看群里人聊天有感而发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;之前的极客部落&quot;&gt;&lt;a href=&quot;#之前的极客部落&quot; class=&quot;headerlink&quot; title=&quot;之前的极客部落&quot;&gt;&lt;/a&gt;之前的极客部落&lt;/h2&gt;&lt;p&gt;大二曾经赌
    
    </summary>
    
    
      <category term="GeekLub" scheme="http://yoursite.com/tags/GeekLub/"/>
    
  </entry>
  
  <entry>
    <title>【DirectX】March 2018 Progress Report</title>
    <link href="http://yoursite.com/2018/04/03/March-2018-Progress-Report/"/>
    <id>http://yoursite.com/2018/04/03/March-2018-Progress-Report/</id>
    <published>2018-04-03T08:48:30.000Z</published>
    <updated>2018-05-16T05:56:12.595Z</updated>
    
    <content type="html"><![CDATA[<p>手撸了第六章的5个例子（box/hills/skull/shapes/waves)，顺便大致过了一遍第七章：因为光(Light)在《Unity-shader入门精要》已经看过了，而且我觉得那个说的更好（</p>
<p>总之先输出一点</p>
<h2 id="Rendering-pipeline-in-GPU"><a href="#Rendering-pipeline-in-GPU" class="headerlink" title="Rendering pipeline in GPU"></a>Rendering pipeline in GPU</h2><p>渲染管线大致分解为以下几个主要阶段：</p>
<p>[输入装配（IA）阶段]</p>
<p>Input Assembelr Stage</p>
<p>[顶点着色器（VS）阶段]</p>
<p>Vertex Shader Stage</p>
<p>[细分着色器]</p>
<p>Hull Shader Stage （外壳着色器阶段）</p>
<p>Tessellator Stage （曲面细分）</p>
<p>Domain Shader Stage （域着色器）</p>
<p>[几何着色器（GS）阶段]</p>
<p>Geometry Shader Stage</p>
<p>(Stream Output Stage)（流输出）</p>
<p>[裁剪阶段]</p>
<p>[光栅化（RS）阶段]</p>
<p>Rasterizer Stage</p>
<p>[像素着色器（PS）]</p>
<p>Pixel Shader Stage</p>
<p>[和输出合并器（OM）阶段]</p>
<p>Output Merger Stage</p>
<p>…</p>
<hr>
<p>举例来说基本上你看到函数名字是以IA开头的，就是在进行输入装配阶段。细分着色器属于高阶阶段，目前我还木有遇到细分处理的例子。</p>
<h2 id="WavesDemo"><a href="#WavesDemo" class="headerlink" title="WavesDemo"></a>WavesDemo</h2><p>用Demo做例子，这里skull及之后的例子才用到了光栅化。最后一个例子WavesDemo由两部分组成，z=f(x, y)的山谷和波动的水面网格。</p>
<p><img src="https://oi3qt7c8d.qnssl.com/wavesdemo.gif" alt="wavesdemo.gif"></p>
<p>先不管update函数直接看draw</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MountainDemo.cpp (WavesDemo.cpp)</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> MountainApp::DrawScene()</div><div class="line">&#123;</div><div class="line">	assert(md3dImmediateContext);</div><div class="line">	assert(mSwapChain);</div><div class="line"></div><div class="line">	md3dImmediateContext-&gt;ClearRenderTargetView(mRenderTargetView, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">float</span>*&gt;(&amp;Colors::LightSteelBlue));</div><div class="line">	md3dImmediateContext-&gt;ClearDepthStencilView(mDepthStencilView, D3D11_CLEAR_DEPTH|D3D11_CLEAR_STENCIL, <span class="number">1.0f</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">	md3dImmediateContext-&gt;IASetInputLayout(mInputLayout);</div><div class="line">	md3dImmediateContext-&gt;IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);</div><div class="line"></div><div class="line">	UINT strike = <span class="keyword">sizeof</span>(Vertex);</div><div class="line">	UINT offset = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">//XMATRIX mxfWorldViewProj</span></div><div class="line">	XMMATRIX view  = XMLoadFloat4x4(&amp;mView);</div><div class="line">	XMMATRIX proj  = XMLoadFloat4x4(&amp;mProj);</div><div class="line"></div><div class="line">	D3DX11_TECHNIQUE_DESC techDesc;</div><div class="line">	mTech-&gt;GetDesc(&amp;techDesc);</div><div class="line">	<span class="keyword">for</span> ( UINT p = <span class="number">0</span>; p &lt; techDesc.Passes; ++p)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// the land</span></div><div class="line">		md3dImmediateContext-&gt;IASetVertexBuffers(<span class="number">0</span>, <span class="number">1</span>, &amp;mLandVB, &amp;strike, &amp;offset);</div><div class="line">		md3dImmediateContext-&gt;IASetIndexBuffer(mLandIB, DXGI_FORMAT_R32_UINT, <span class="number">0</span>);</div><div class="line"></div><div class="line">		XMMATRIX world = XMLoadFloat4x4(&amp;mGridWorld);</div><div class="line">		XMMATRIX worldViewProj = world*view*proj;</div><div class="line">		mfxWorldViewProj-&gt;SetMatrix(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">float</span>*&gt;(&amp;worldViewProj));</div><div class="line">		mTech-&gt;GetPassByIndex(p)-&gt;Apply(<span class="number">0</span>, md3dImmediateContext);</div><div class="line">		md3dImmediateContext-&gt;DrawIndexed(mGridIndexCount, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">		<span class="comment">// the waves</span></div><div class="line">		md3dImmediateContext-&gt;RSSetState(mWireframeRS); <span class="comment">// wf set</span></div><div class="line">		md3dImmediateContext-&gt;IASetVertexBuffers(<span class="number">0</span>, <span class="number">1</span>, &amp;mWavesVB, &amp;strike, &amp;offset);</div><div class="line">		md3dImmediateContext-&gt;IASetIndexBuffer(mWavesIB, DXGI_FORMAT_R32_UINT, <span class="number">0</span>);</div><div class="line"></div><div class="line">		world = XMLoadFloat4x4(&amp;mWavesWorld);</div><div class="line">		worldViewProj = world*view*proj;</div><div class="line">		mfxWorldViewProj-&gt;SetMatrix(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">float</span>*&gt;(&amp;worldViewProj));</div><div class="line">		mTech-&gt;GetPassByIndex(p)-&gt;Apply(<span class="number">0</span>, md3dImmediateContext);</div><div class="line">		md3dImmediateContext-&gt;DrawIndexed(<span class="number">3</span>*mWaves.TriangleCount(), <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">		md3dImmediateContext-&gt;RSSetState(<span class="number">0</span>); <span class="comment">// wf reset</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	HR(mSwapChain-&gt;Present(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>mTech是fx文件（HLSL，包含VS和PS）编译后赋值的私有<code>ID3DX11EffectTechnique*</code>成员</p>
<p>mVB和mIB（根据对象取别名）是私有函数<code>BuildGeometryBuffers</code>（根据对象取别名）的最终产物（存放顶点和索引缓冲，这是三角形带的一种表示方法）</p>
<p>draw函数依赖于<code>md3dImmediateContext</code>这个上下文环境（和以前写WebCanvas类似），按照流程很明显的就是 IA-&gt;IA(VS/PS)-&gt;IA(GS)-&gt;IA(RS)-&gt;DrawIndexed 尽管顺序略有不同，但是基本上包含了所有阶段需要的参数。细分着色器中部分是DirectX11的新特性，目前还没有用到</p>
<p>接着看update部分（即mainloop），这里涉及到动画处理，如果涉及过设计模式会好理解很多，这是典型的序列型模式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MountainDemo.cpp</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> MountainApp::UpdateScene(<span class="keyword">float</span> dt)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// Convert Spherical to Cartesian coordinates.</span></div><div class="line">	<span class="keyword">float</span> x = mRadius*sinf(mPhi)*cosf(mTheta);</div><div class="line">	<span class="keyword">float</span> z = mRadius*sinf(mPhi)*sinf(mTheta);</div><div class="line">	<span class="keyword">float</span> y = mRadius*cosf(mPhi);</div><div class="line"></div><div class="line">	<span class="comment">// Build the view matrix.</span></div><div class="line">	XMVECTOR pos    = XMVectorSet(x, y, z, <span class="number">1.0f</span>);</div><div class="line">	XMVECTOR target = XMVectorZero();</div><div class="line">	XMVECTOR up     = XMVectorSet(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">	XMMATRIX V = XMMatrixLookAtLH(pos, target, up);</div><div class="line">	XMStoreFloat4x4(&amp;mView, V);</div><div class="line"></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="comment">// Every quarter second, generate a random wave.</span></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">float</span> t_base = <span class="number">0.0f</span>;</div><div class="line">	<span class="keyword">if</span>( (mTimer.TotalTime() - t_base) &gt;= <span class="number">0.25f</span> )</div><div class="line">	&#123;</div><div class="line">		t_base += <span class="number">0.25f</span>;</div><div class="line"></div><div class="line">		DWORD i = <span class="number">5</span> + rand() % <span class="number">190</span>;</div><div class="line">		DWORD j = <span class="number">5</span> + rand() % <span class="number">190</span>;</div><div class="line"></div><div class="line">		<span class="keyword">float</span> r = MathHelper::RandF(<span class="number">1.0f</span>, <span class="number">2.0f</span>);</div><div class="line"></div><div class="line">		mWaves.Disturb(i, j, r);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	mWaves.Update(dt);</div><div class="line"></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="comment">// Update the wave vertex buffer with the new solution.</span></div><div class="line">	<span class="comment">//</span></div><div class="line"></div><div class="line">	D3D11_MAPPED_SUBRESOURCE mappedData;</div><div class="line">	HR(md3dImmediateContext-&gt;Map(mWavesVB, <span class="number">0</span>, D3D11_MAP_WRITE_DISCARD, <span class="number">0</span>, &amp;mappedData));</div><div class="line"></div><div class="line">	Vertex* v = <span class="keyword">reinterpret_cast</span>&lt;Vertex*&gt;(mappedData.pData);</div><div class="line">	<span class="keyword">for</span>(UINT i = <span class="number">0</span>; i &lt; mWaves.VertexCount(); ++i)</div><div class="line">	&#123;</div><div class="line">		v[i].Pos = mWaves[i];</div><div class="line">		v[i].Color = XMFLOAT4(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	md3dImmediateContext-&gt;Unmap(mWavesVB, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>update的前面部分是把球坐标转换成直角坐标，来构筑mView（最终<code>worldViewProj = world*view*proj</code>，记得这个公式），中后部分用于处理水面动画，Waves对象使用了设计模式中<a href="http://mikumiku.com.cn/2017/11/11/game_programming_patterns/#%E6%9B%B4%E6%96%B0%E6%96%B9%E6%B3%95" target="_blank" rel="external">更新方法</a>，设计一个update的方法，把mainloop中的deltatime作为参数传入子部件的update中，以保持同步的时间步长，后面的一个for主要是将waves同步的数据更新到mVB中，先来看看waves的update是如何设计的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Waves.cpp</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> Waves::Update(<span class="keyword">float</span> dt)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">float</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">// Accumulate time.</span></div><div class="line">	t += dt;</div><div class="line"></div><div class="line">	<span class="comment">// Only update the simulation at the specified time step.</span></div><div class="line">	<span class="keyword">if</span>( t &gt;= mTimeStep )</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// Only update interior points; we use zero boundary conditions.</span></div><div class="line">		<span class="keyword">for</span>(DWORD i = <span class="number">1</span>; i &lt; mNumRows<span class="number">-1</span>; ++i)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span>(DWORD j = <span class="number">1</span>; j &lt; mNumCols<span class="number">-1</span>; ++j)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">// After this update we will be discarding the old previous</span></div><div class="line">				<span class="comment">// buffer, so overwrite that buffer with the new update.</span></div><div class="line">				<span class="comment">// Note how we can do this inplace (read/write to same element)</span></div><div class="line">				<span class="comment">// because we won't need prev_ij again and the assignment happens last.</span></div><div class="line"></div><div class="line">				<span class="comment">// Note j indexes x and i indexes z: h(x_j, z_i, t_k)</span></div><div class="line">				<span class="comment">// Moreover, our +z axis goes "down"; this is just to</span></div><div class="line">				<span class="comment">// keep consistent with our row indices going down.</span></div><div class="line"></div><div class="line">				mPrevSolution[i*mNumCols+j].y =</div><div class="line">					mK1*mPrevSolution[i*mNumCols+j].y +</div><div class="line">					mK2*mCurrSolution[i*mNumCols+j].y +</div><div class="line">					mK3*(mCurrSolution[(i+<span class="number">1</span>)*mNumCols+j].y +</div><div class="line">					     mCurrSolution[(i<span class="number">-1</span>)*mNumCols+j].y +</div><div class="line">					     mCurrSolution[i*mNumCols+j+<span class="number">1</span>].y +</div><div class="line">						 mCurrSolution[i*mNumCols+j<span class="number">-1</span>].y);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// We just overwrote the previous buffer with the new data, so</span></div><div class="line">		<span class="comment">// this data needs to become the current solution and the old</span></div><div class="line">		<span class="comment">// current solution becomes the new previous solution.</span></div><div class="line">		<span class="built_in">std</span>::swap(mPrevSolution, mCurrSolution);</div><div class="line"></div><div class="line">		t = <span class="number">0.0f</span>; <span class="comment">// reset time</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>典型的<a href="http://mikumiku.com.cn/2017/11/11/game_programming_patterns/#%E5%8F%8C%E7%BC%93%E5%86%B2" target="_blank" rel="external">双缓冲</a>，避免同时读写同一块内存。这里注意到三个mk参数，找到其赋值的init函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Waves.cpp</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> Waves::Init(UINT m, UINT n, <span class="keyword">float</span> dx, <span class="keyword">float</span> dt, <span class="keyword">float</span> speed, <span class="keyword">float</span> damping)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// 	mWaves.Init(200, 200, 0.8f, 0.03f, 3.25f, 0.4f);</span></div><div class="line">	mNumRows = m;</div><div class="line">	mNumCols = n;</div><div class="line">	mVertexCount = m*n;</div><div class="line">	mTriangleCount = (m<span class="number">-1</span>)*(n<span class="number">-1</span>)*<span class="number">2</span>;</div><div class="line"></div><div class="line">	mTimeStep = dt;                           <span class="comment">// 时间步长</span></div><div class="line">	mSpatialStep = dx;                        <span class="comment">// 空间步长</span></div><div class="line"></div><div class="line">	<span class="keyword">float</span> d = damping*dt+<span class="number">2.0f</span>;                <span class="comment">// 阻尼系数（速度？）*dt + 常数</span></div><div class="line">	<span class="keyword">float</span> e = (speed*speed)*(dt*dt)/(dx*dx);  <span class="comment">// pow(（水波速度 / dv）, 2)</span></div><div class="line">	mK1     = (damping*dt<span class="number">-2.0</span>f)/ d;           <span class="comment">// （d(dt) - a0） / d(dt)</span></div><div class="line">	mK2     = (<span class="number">4.0f</span><span class="number">-8.0</span>f*e) / d;              <span class="comment">// (a0 - 2 * a0 * e(dt)) / d(dt)</span></div><div class="line">	mK3     = (<span class="number">2.0f</span>*e) / d;                   <span class="comment">// (2 * a0) / d(dt) / 4</span></div><div class="line"></div><div class="line">	<span class="comment">// In case Init() called again.</span></div><div class="line">	<span class="keyword">delete</span>[] mPrevSolution;</div><div class="line">	<span class="keyword">delete</span>[] mCurrSolution;</div><div class="line"></div><div class="line">	mPrevSolution = <span class="keyword">new</span> XMFLOAT3[m*n];</div><div class="line">	mCurrSolution = <span class="keyword">new</span> XMFLOAT3[m*n];</div><div class="line"></div><div class="line">	<span class="comment">// Generate grid vertices in system memory.</span></div><div class="line"></div><div class="line">	<span class="keyword">float</span> halfWidth = (n<span class="number">-1</span>)*dx*<span class="number">0.5f</span>; <span class="comment">// 这样看来dx = mSpatialStep  = 网格边长</span></div><div class="line">	<span class="keyword">float</span> halfDepth = (m<span class="number">-1</span>)*dx*<span class="number">0.5f</span>;</div><div class="line">	<span class="keyword">for</span>(UINT i = <span class="number">0</span>; i &lt; m; ++i)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">float</span> z = halfDepth - i*dx;</div><div class="line">		<span class="keyword">for</span>(UINT j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">float</span> x = -halfWidth + j*dx;</div><div class="line"></div><div class="line">			mPrevSolution[i*n+j] = XMFLOAT3(x, <span class="number">0.0f</span>, z);</div><div class="line">			mCurrSolution[i*n+j] = XMFLOAT3(x, <span class="number">0.0f</span>, z);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>理论上水波模型一般使用正弦函数，这里用了近似的函数组合来模拟，水波的某一点取决于上一帧的状态和周围四格的状态。</p>
<p>将 speed=3.25, damping=0.4, dx=0.8 带入得：</p>
<pre><code>mK1 = ( 0.4 * dt - 2.0 ) / ( 0.4 * dt + 2.0 )
mK2 = ( 4.0 - 132.0 * dt * dt )  / ( 0.4 * dt + 2.0 )
</code></pre><p>研究了一会之后，我只能说这是经验公式，这样只有前两个水波比较明显（由函数图像可得）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手撸了第六章的5个例子（box/hills/skull/shapes/waves)，顺便大致过了一遍第七章：因为光(Light)在《Unity-shader入门精要》已经看过了，而且我觉得那个说的更好（&lt;/p&gt;
&lt;p&gt;总之先输出一点&lt;/p&gt;
&lt;h2 id=&quot;Renderin
    
    </summary>
    
    
      <category term="Directx11" scheme="http://yoursite.com/tags/Directx11/"/>
    
      <category term="cpp" scheme="http://yoursite.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【DirectX】BoxDemo学习</title>
    <link href="http://yoursite.com/2018/03/23/BoxDemo-learning/"/>
    <id>http://yoursite.com/2018/03/23/BoxDemo-learning/</id>
    <published>2018-03-23T08:11:11.000Z</published>
    <updated>2018-04-15T15:13:18.481Z</updated>
    
    <content type="html"><![CDATA[<p>123</p>
<blockquote>
<p>人算不如天算</p>
</blockquote>
<p>龙书第六章中间的一个例子，用到了前几节所有的知识点。把这几百行行代码读懂就基本了解渲染管线的工作流程（日常读源码</p>
<h2 id="Demo-Debug"><a href="#Demo-Debug" class="headerlink" title="Demo Debug"></a>Demo Debug</h2><p><img src="https://oi3qt7c8d.qnssl.com/boxdemo.jpg" alt="Front"><br><img src="https://oi3qt7c8d.qnssl.com/boxdemo1.jpg" alt="Back"></p>
<h2 id="Src"><a href="#Src" class="headerlink" title="Src"></a>Src</h2><p>BoxDemo.cpp （使用D3DApp框架结构</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"><span class="comment">// BoxDemo.cpp by Frank Luna (C) 2011 All Rights Reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Demonstrates rendering a colored box.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Controls:</span></div><div class="line"><span class="comment">//        Hold the left mouse button down and move the mouse to rotate.</span></div><div class="line"><span class="comment">//      Hold the right mouse button down to zoom in and out.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//***************************************************************************************</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"d3dApp.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"d3dx11Effect.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathHelper.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Vertex</div><div class="line">&#123;</div><div class="line">    XMFLOAT3 Pos;</div><div class="line">    XMFLOAT4 Color;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> BoxApp : <span class="keyword">public</span> D3DApp</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    BoxApp(HINSTANCE hInstance);</div><div class="line">    ~BoxApp();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Init</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnResize</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateScene</span><span class="params">(<span class="keyword">float</span> dt)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DrawScene</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMouseDown</span><span class="params">(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMouseUp</span><span class="params">(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMouseMove</span><span class="params">(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildGeometryBuffers</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildFX</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildVertexLayout</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    ID3D11Buffer* mBoxVB; <span class="comment">// [vertex buffer]</span></div><div class="line">    ID3D11Buffer* mBoxIB; <span class="comment">// [index buffer]</span></div><div class="line"></div><div class="line">    ID3DX11Effect* mFX;   <span class="comment">// update in BuildFX()</span></div><div class="line">    ID3DX11EffectTechnique* mTech;</div><div class="line">    ID3DX11EffectMatrixVariable* mfxWorldViewProj;</div><div class="line"></div><div class="line">    ID3D11InputLayout* mInputLayout; <span class="comment">// update in BuildVertexLayout();</span></div><div class="line"></div><div class="line">    XMFLOAT4X4 mWorld;</div><div class="line">    XMFLOAT4X4 mView;</div><div class="line">    XMFLOAT4X4 mProj; <span class="comment">// 3 for DrawScene()</span></div><div class="line"></div><div class="line">    <span class="keyword">float</span> mTheta;</div><div class="line">    <span class="keyword">float</span> mPhi;</div><div class="line">    <span class="keyword">float</span> mRadius; <span class="comment">// 3 for rotation</span></div><div class="line"></div><div class="line">    POINT mLastMousePos; <span class="comment">// record the mouse postion for update scene</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE prevInstance,</span></span></div><div class="line">                   PSTR cmdLine, <span class="keyword">int</span> showCmd)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Enable run-time memory check for debug builds.</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(DEBUG) | defined(_DEBUG)</span></div><div class="line">    <span class="number">_</span>CrtSetDbgFlag( <span class="number">_</span>CRTDBG_ALLOC_MEM_DF | <span class="number">_</span>CRTDBG_LEAK_CHECK_DF );</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="function">BoxApp <span class="title">theApp</span><span class="params">(hInstance)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( !theApp.Init() ) <span class="comment">// minit</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> theApp.Run();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">BoxApp::BoxApp(HINSTANCE hInstance)</div><div class="line">: D3DApp(hInstance), mBoxVB(<span class="number">0</span>), mBoxIB(<span class="number">0</span>), mFX(<span class="number">0</span>), mTech(<span class="number">0</span>),</div><div class="line">  mfxWorldViewProj(<span class="number">0</span>), mInputLayout(<span class="number">0</span>),</div><div class="line">  mTheta(<span class="number">1.5f</span>*MathHelper::Pi), mPhi(<span class="number">0.25f</span>*MathHelper::Pi), mRadius(<span class="number">5.0f</span>)</div><div class="line">&#123;</div><div class="line">    mMainWndCaption = <span class="string">L"Box Demo"</span>;</div><div class="line"></div><div class="line">    mLastMousePos.x = <span class="number">0</span>;</div><div class="line">    mLastMousePos.y = <span class="number">0</span>;</div><div class="line"></div><div class="line">    XMMATRIX I = XMMatrixIdentity();</div><div class="line">    XMStoreFloat4x4(&amp;mWorld, I);</div><div class="line">    XMStoreFloat4x4(&amp;mView, I);</div><div class="line">    XMStoreFloat4x4(&amp;mProj, I); <span class="comment">// init these m-args</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">BoxApp::~BoxApp()</div><div class="line">&#123;</div><div class="line">    ReleaseCOM(mBoxVB);</div><div class="line">    ReleaseCOM(mBoxIB);</div><div class="line">    ReleaseCOM(mFX);</div><div class="line">    ReleaseCOM(mInputLayout);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> BoxApp::Init() <span class="comment">//dinit</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!D3DApp::Init())</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    BuildGeometryBuffers(); <span class="comment">//mbgb</span></div><div class="line">    BuildFX();              <span class="comment">//mbfx</span></div><div class="line">    BuildVertexLayout();    <span class="comment">//mbvl</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//******************************** Scene map (d3dapp methods) ********************************</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::OnResize()</div><div class="line">&#123;</div><div class="line">    D3DApp::OnResize();</div><div class="line"></div><div class="line">    <span class="comment">// The window resized, so update the aspect ratio and recompute the projection matrix.</span></div><div class="line">    XMMATRIX P = XMMatrixPerspectiveFovLH(<span class="number">0.25f</span>*MathHelper::Pi, AspectRatio(), <span class="number">1.0f</span>, <span class="number">1000.0f</span>);</div><div class="line">    XMStoreFloat4x4(&amp;mProj, P); <span class="comment">// update mProj</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::UpdateScene(<span class="keyword">float</span> dt)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Convert Spherical to Cartesian coordinates.</span></div><div class="line">    <span class="keyword">float</span> x = mRadius*sinf(mPhi)*cosf(mTheta);</div><div class="line">    <span class="keyword">float</span> z = mRadius*sinf(mPhi)*sinf(mTheta);</div><div class="line">    <span class="keyword">float</span> y = mRadius*cosf(mPhi);</div><div class="line"></div><div class="line">    <span class="comment">// Build the view matrix.</span></div><div class="line">    XMVECTOR pos    = XMVectorSet(x, y, z, <span class="number">1.0f</span>);</div><div class="line">    XMVECTOR target = XMVectorZero();</div><div class="line">    XMVECTOR up     = XMVectorSet(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">    XMMATRIX V = XMMatrixLookAtLH(pos, target, up);</div><div class="line">    XMStoreFloat4x4(&amp;mView, V); <span class="comment">// update mView</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::DrawScene()</div><div class="line">&#123;</div><div class="line">    md3dImmediateContext-&gt;ClearRenderTargetView(mRenderTargetView, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">float</span>*&gt;(&amp;Colors::LightSteelBlue));</div><div class="line">    md3dImmediateContext-&gt;ClearDepthStencilView(mDepthStencilView, D3D11_CLEAR_DEPTH|D3D11_CLEAR_STENCIL, <span class="number">1.0f</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    md3dImmediateContext-&gt;IASetInputLayout(mInputLayout);</div><div class="line">    md3dImmediateContext-&gt;IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);</div><div class="line"></div><div class="line">    UINT stride = <span class="keyword">sizeof</span>(Vertex);</div><div class="line">    UINT offset = <span class="number">0</span>;</div><div class="line">    md3dImmediateContext-&gt;IASetVertexBuffers(<span class="number">0</span>, <span class="number">1</span>, &amp;mBoxVB, &amp;stride, &amp;offset);</div><div class="line">    md3dImmediateContext-&gt;IASetIndexBuffer(mBoxIB, DXGI_FORMAT_R32_UINT, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Set constants</span></div><div class="line">    XMMATRIX world = XMLoadFloat4x4(&amp;mWorld);</div><div class="line">    XMMATRIX view  = XMLoadFloat4x4(&amp;mView);</div><div class="line">    XMMATRIX proj  = XMLoadFloat4x4(&amp;mProj);</div><div class="line">    XMMATRIX worldViewProj = world*view*proj;</div><div class="line"></div><div class="line">    mfxWorldViewProj-&gt;SetMatrix(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">float</span>*&gt;(&amp;worldViewProj));</div><div class="line"></div><div class="line">    D3DX11_TECHNIQUE_DESC techDesc;</div><div class="line">    mTech-&gt;GetDesc( &amp;techDesc );</div><div class="line">    <span class="keyword">for</span>(UINT p = <span class="number">0</span>; p &lt; techDesc.Passes; ++p)</div><div class="line">    &#123;</div><div class="line">        mTech-&gt;GetPassByIndex(p)-&gt;Apply(<span class="number">0</span>, md3dImmediateContext);</div><div class="line"></div><div class="line">        <span class="comment">// 36 indices for the box.</span></div><div class="line">        md3dImmediateContext-&gt;DrawIndexed(<span class="number">36</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    HR(mSwapChain-&gt;Present(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//************************* Mouse Control ***********************************************</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::OnMouseDown(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">&#123;</div><div class="line">    mLastMousePos.x = x;</div><div class="line">    mLastMousePos.y = y;</div><div class="line"></div><div class="line">    SetCapture(mhMainWnd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::OnMouseUp(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">&#123;</div><div class="line">    ReleaseCapture();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::OnMouseMove(WPARAM btnState, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>( (btnState &amp; MK_LBUTTON) != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Make each pixel correspond to a quarter of a degree.</span></div><div class="line">        <span class="keyword">float</span> dx = XMConvertToRadians(<span class="number">0.25f</span>*<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(x - mLastMousePos.x));</div><div class="line">        <span class="keyword">float</span> dy = XMConvertToRadians(<span class="number">0.25f</span>*<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(y - mLastMousePos.y));</div><div class="line"></div><div class="line">        <span class="comment">// Update angles based on input to orbit camera around box.</span></div><div class="line">        mTheta += dx;</div><div class="line">        mPhi   += dy;</div><div class="line"></div><div class="line">        <span class="comment">// Restrict the angle mPhi.</span></div><div class="line">        mPhi = MathHelper::Clamp(mPhi, <span class="number">0.1f</span>, MathHelper::Pi<span class="number">-0.1</span>f);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( (btnState &amp; MK_RBUTTON) != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Make each pixel correspond to 0.005 unit in the scene.</span></div><div class="line">        <span class="keyword">float</span> dx = <span class="number">0.005f</span>*<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(x - mLastMousePos.x);</div><div class="line">        <span class="keyword">float</span> dy = <span class="number">0.005f</span>*<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(y - mLastMousePos.y);</div><div class="line"></div><div class="line">        <span class="comment">// Update the camera radius based on input.</span></div><div class="line">        mRadius += dx - dy;</div><div class="line"></div><div class="line">        <span class="comment">// Restrict the radius.</span></div><div class="line">        mRadius = MathHelper::Clamp(mRadius, <span class="number">3.0f</span>, <span class="number">15.0f</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLastMousePos.x = x;</div><div class="line">    mLastMousePos.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//******************************* rendering pipeline *****************************************</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::BuildGeometryBuffers() <span class="comment">//dbgb</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// directx use left-handed like this:</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// |y       </span></div><div class="line">    <span class="comment">// |  /z     </span></div><div class="line">    <span class="comment">// | /       </span></div><div class="line">    <span class="comment">// |/_____x  </span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Create vertex buffer</span></div><div class="line">    Vertex vertices[] =</div><div class="line">    &#123;</div><div class="line">        &#123; XMFLOAT3(<span class="number">-1.0</span>f, <span class="number">-1.0</span>f, <span class="number">-1.0</span>f), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::White   &#125;,</div><div class="line">        &#123; XMFLOAT3(<span class="number">-1.0</span>f, +<span class="number">1.0f</span>, <span class="number">-1.0</span>f), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Black   &#125;,</div><div class="line">        &#123; XMFLOAT3(+<span class="number">1.0f</span>, +<span class="number">1.0f</span>, <span class="number">-1.0</span>f), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Red     &#125;,</div><div class="line">        &#123; XMFLOAT3(+<span class="number">1.0f</span>, <span class="number">-1.0</span>f, <span class="number">-1.0</span>f), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Green   &#125;,</div><div class="line">        &#123; XMFLOAT3(<span class="number">-1.0</span>f, <span class="number">-1.0</span>f, +<span class="number">1.0f</span>), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Blue    &#125;,</div><div class="line">        &#123; XMFLOAT3(<span class="number">-1.0</span>f, +<span class="number">1.0f</span>, +<span class="number">1.0f</span>), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Yellow  &#125;,</div><div class="line">        &#123; XMFLOAT3(+<span class="number">1.0f</span>, +<span class="number">1.0f</span>, +<span class="number">1.0f</span>), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Cyan    &#125;,</div><div class="line">        &#123; XMFLOAT3(+<span class="number">1.0f</span>, <span class="number">-1.0</span>f, +<span class="number">1.0f</span>), (<span class="keyword">const</span> <span class="keyword">float</span>*)&amp;Colors::Magenta &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// color map:</span></div><div class="line"></div><div class="line">    <span class="comment">//   Yellow---Cyan</span></div><div class="line">    <span class="comment">//    /|      /|</span></div><div class="line">    <span class="comment">// Black---Red |</span></div><div class="line">    <span class="comment">//   | |     | |</span></div><div class="line">    <span class="comment">//   |Blue---|-Magenta</span></div><div class="line">    <span class="comment">//   |/      |/</span></div><div class="line">    <span class="comment">// White---Green</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    D3D11_BUFFER_DESC vbd; <span class="comment">// buffer description [vertex buffer]</span></div><div class="line">    vbd.Usage = D3D11_USAGE_IMMUTABLE;</div><div class="line">    vbd.ByteWidth = <span class="keyword">sizeof</span>(Vertex) * <span class="number">8</span>;</div><div class="line">    vbd.BindFlags = D3D11_BIND_VERTEX_BUFFER;</div><div class="line">    vbd.CPUAccessFlags = <span class="number">0</span>;</div><div class="line">    vbd.MiscFlags = <span class="number">0</span>;</div><div class="line">    vbd.StructureByteStride = <span class="number">0</span>;</div><div class="line"></div><div class="line">    D3D11_SUBRESOURCE_DATA vinitData; <span class="comment">// zone for init buffer</span></div><div class="line">    vinitData.pSysMem = vertices; <span class="comment">// set buffer container</span></div><div class="line"></div><div class="line">    HR(md3dDevice-&gt;CreateBuffer(&amp;vbd, &amp;vinitData, &amp;mBoxVB)); <span class="comment">// [vertex buffer created]</span></div><div class="line"></div><div class="line">    <span class="comment">// index map: Clockwise</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//     5-------6    1→2         1→2   2        2  1→2          7--6</span></div><div class="line">    <span class="comment">//    /|      /|    ↑ ↓     LR: ↑    ↗↓   RL: ↗↓  ↑    backRL: |  |</span></div><div class="line">    <span class="comment">//   1-------2 |    0←3         0   0 3      0 3  0            4--5</span></div><div class="line">    <span class="comment">//   | |     | |</span></div><div class="line">    <span class="comment">//   | 4-----|-7</span></div><div class="line">    <span class="comment">//   |/      |/</span></div><div class="line">    <span class="comment">//   0-------3</span></div><div class="line"></div><div class="line">    <span class="comment">// Create the index buffer</span></div><div class="line"></div><div class="line">    UINT indices[] = &#123;</div><div class="line">        <span class="comment">// front face ↙LR  1--2</span></div><div class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,        <span class="comment">// 0--3</span></div><div class="line"></div><div class="line">        <span class="comment">// back face       ↙LR        5--6  ↘RL    6--5   ↙RL      7--6</span></div><div class="line">        <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>,        <span class="comment">// (front)    |  |  (back) |  |   (rotate) |  |</span></div><div class="line">        <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>,        <span class="comment">// (anti-cw)  4--7         7--4            4--5</span></div><div class="line"></div><div class="line">        <span class="comment">// left face ↙LR   5--1</span></div><div class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>,        <span class="comment">// 4--0</span></div><div class="line"></div><div class="line">        <span class="comment">// right face ↙LR  2--6</span></div><div class="line">        <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>,        <span class="comment">// 3--7</span></div><div class="line"></div><div class="line">        <span class="comment">// top face  ↙LR   5--6</span></div><div class="line">        <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>,        <span class="comment">// 1--2</span></div><div class="line"></div><div class="line">        <span class="comment">// bottom face ↙LR 0--3</span></div><div class="line">        <span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>,        <span class="comment">// |  |</span></div><div class="line">        <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>         <span class="comment">// 4--7</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    D3D11_BUFFER_DESC ibd; <span class="comment">// buffer description [index buffer]</span></div><div class="line"></div><div class="line">    ibd.Usage = D3D11_USAGE_IMMUTABLE;</div><div class="line">    ibd.ByteWidth = <span class="keyword">sizeof</span>(UINT) * <span class="number">36</span>;</div><div class="line">    ibd.BindFlags = D3D11_BIND_INDEX_BUFFER;</div><div class="line">    ibd.CPUAccessFlags = <span class="number">0</span>;</div><div class="line">    ibd.MiscFlags = <span class="number">0</span>;</div><div class="line">    ibd.StructureByteStride = <span class="number">0</span>; <span class="comment">// set ibd args</span></div><div class="line"></div><div class="line">    D3D11_SUBRESOURCE_DATA iinitData; <span class="comment">// zone for init buffer</span></div><div class="line">    iinitData.pSysMem = indices; <span class="comment">// set buffer container</span></div><div class="line"></div><div class="line">    HR(md3dDevice-&gt;CreateBuffer(&amp;ibd, &amp;iinitData, &amp;mBoxIB)); <span class="comment">// [index buffer created]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::BuildFX() <span class="comment">//dbfx use color.fx</span></div><div class="line">&#123;</div><div class="line">    DWORD shaderFlags = <span class="number">0</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( DEBUG ) || defined( _DEBUG )</span></div><div class="line">    shaderFlags |= D3D10_SHADER_DEBUG;</div><div class="line">    shaderFlags |= D3D10_SHADER_SKIP_OPTIMIZATION;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    ID3D10Blob* compiledShader = <span class="number">0</span>;  <span class="comment">// compiling shader pointer</span></div><div class="line">    ID3D10Blob* compilationMsgs = <span class="number">0</span>; <span class="comment">// store errs or wanrings</span></div><div class="line"></div><div class="line">    <span class="comment">// main method &lt;D3DX11CompileFromFile&gt;</span></div><div class="line">    HRESULT hr = D3DX11CompileFromFile(<span class="string">L"FX/color.fx"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">"fx_5_0"</span>, shaderFlags,</div><div class="line">        <span class="number">0</span>, <span class="number">0</span>, &amp;compiledShader, &amp;compilationMsgs, <span class="number">0</span>);</div><div class="line">    <span class="comment">// and check method&lt;D3DX11CompileFromFile&gt; result below</span></div><div class="line"></div><div class="line">    <span class="comment">// compilationMsgs can store errors or warnings.</span></div><div class="line">    <span class="keyword">if</span>( compilationMsgs != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        MessageBoxA(<span class="number">0</span>, (<span class="keyword">char</span>*)compilationMsgs-&gt;GetBufferPointer(), <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        ReleaseCOM(compilationMsgs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Even if there are no compilationMsgs, check to make sure there were no other errors.</span></div><div class="line">    <span class="keyword">if</span>(FAILED(hr))</div><div class="line">    &#123;</div><div class="line">        DXTrace(<span class="number">__F</span>ILE__, (DWORD)<span class="number">__L</span>INE__, hr, <span class="string">L"D3DX11CompileFromFile"</span>, <span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// main method &lt;D3DX11CreateEffectFromMemory&gt;</span></div><div class="line">    HR(D3DX11CreateEffectFromMemory(compiledShader-&gt;GetBufferPointer(), compiledShader-&gt;GetBufferSize(),</div><div class="line">        <span class="number">0</span>, md3dDevice, &amp;mFX)); <span class="comment">// update mFX</span></div><div class="line"></div><div class="line">    <span class="comment">// Done with compiled shader.</span></div><div class="line">    ReleaseCOM(compiledShader);</div><div class="line"></div><div class="line">    mTech    = mFX-&gt;GetTechniqueByName(<span class="string">"ColorTech"</span>);</div><div class="line">    mfxWorldViewProj = mFX-&gt;GetVariableByName(<span class="string">"gWorldViewProj"</span>)-&gt;AsMatrix();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BoxApp::BuildVertexLayout() <span class="comment">//dbvl</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Create the vertex input layout.</span></div><div class="line">    D3D11_INPUT_ELEMENT_DESC vertexDesc[] =</div><div class="line">    &#123;</div><div class="line">        &#123;<span class="string">"POSITION"</span>, <span class="number">0</span>, DXGI_FORMAT_R32G32B32_FLOAT, <span class="number">0</span>, <span class="number">0</span>, D3D11_INPUT_PER_VERTEX_DATA, <span class="number">0</span>&#125;,</div><div class="line">        &#123;<span class="string">"COLOR"</span>,    <span class="number">0</span>, DXGI_FORMAT_R32G32B32A32_FLOAT, <span class="number">0</span>, <span class="number">12</span>, D3D11_INPUT_PER_VERTEX_DATA, <span class="number">0</span>&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Create the input layout</span></div><div class="line">    D3DX11_PASS_DESC passDesc;</div><div class="line">    mTech-&gt;GetPassByIndex(<span class="number">0</span>)-&gt;GetDesc(&amp;passDesc);</div><div class="line">    HR(md3dDevice-&gt;CreateInputLayout(vertexDesc, <span class="number">2</span>, passDesc.pIAInputSignature,</div><div class="line">        passDesc.IAInputSignatureSize, &amp;mInputLayout)); <span class="comment">// update mInputLayout</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>color.fx （没啥好说的，一个顶点着色器和一个像素着色器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">//***************************************************************************************</div><div class="line">// color.fx by Frank Luna (C) 2011 All Rights Reserved.</div><div class="line">//</div><div class="line">// Transforms and colors geometry.</div><div class="line">//***************************************************************************************</div><div class="line"></div><div class="line">cbuffer cbPerObject</div><div class="line">&#123;</div><div class="line">	float4x4 gWorldViewProj;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct VertexIn</div><div class="line">&#123;</div><div class="line">	float3 Pos   : POSITION;</div><div class="line">	float4 Color : COLOR;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct VertexOut</div><div class="line">&#123;</div><div class="line">	float4 PosH  : SV_POSITION;</div><div class="line">    float4 Color : COLOR;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">VertexOut VS(VertexIn vin)</div><div class="line">&#123;</div><div class="line">	VertexOut vout;</div><div class="line"></div><div class="line">	// Transform to homogeneous clip space.</div><div class="line">	vout.PosH = mul(float4(vin.Pos, 1.0f), gWorldViewProj);</div><div class="line"></div><div class="line">	// Just pass vertex color into the pixel shader.</div><div class="line">    vout.Color = vin.Color;</div><div class="line"></div><div class="line">    return vout;</div><div class="line">&#125;</div><div class="line"></div><div class="line">float4 PS(VertexOut pin) : SV_Target</div><div class="line">&#123;</div><div class="line">    return pin.Color;</div><div class="line">&#125;</div><div class="line"></div><div class="line">technique11 ColorTech</div><div class="line">&#123;</div><div class="line">    pass P0</div><div class="line">    &#123;</div><div class="line">        SetVertexShader( CompileShader( vs_5_0, VS() ) );</div><div class="line">		SetGeometryShader( NULL );</div><div class="line">        SetPixelShader( CompileShader( ps_5_0, PS() ) );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>DirectX的官网只有一个sdk下载链接，没有实例，木有文档，正常开发者下了根本没卵用。所以没有办法，只能使用各种书籍的随书源码作为参考。不过书籍上的项目一般历史久远，想要run起来还是会有一定的挑战。</p>
<p>vs的sln工程个有说法，不同版本的工程策略不同。不同版本vs构建的工程之间兼容性会有一定的问题，主要表现在开发工具（包括面向平台）、c++库等的更新迭代。当你需要打开一个远古时期的工程时，最简单粗暴的方法是下载构建版本时的vs（vs允许多版本共存）和相应的SDK，设置添加SDK的path include includepath lib 和源文件路径到项目的vc++目录中（绝大多数搜索引擎出来的vs兼容性问题的根源）。使用新的vs去跑老版本的工程会修改老工程中的配置，这样就无法再使用旧版本的vs去打开工程，而且新vs也不一定能够跑起来，可能会遇到各种问题（经常出现难以解决的情况），吃力不讨好。（突然感觉用unix-like的人控制欲都好强啊</p>
<p>bin路径一般放二进制文件(.exe)，即path环境路径；lib路径放库文件(.lib)，有时候需要用sdk工程手动build出来，因为有时候为了区分debug和release出来的库，会在debug下出来的lib文件名后加个<code>d</code>（比如<code>Effects11.lib</code>和<code>Effects11d.lib</code>其实是同一个项目<code>Effects11</code>build出来的库）；include路径中存放需要被<code>#include</code>的文件；一般使用src路径存放源文件；vs的工程文件把不管你乱七八糟存放的文件路径整理成它自己的一套映射路径，这种方案可能一些人很舒服，一些人很不舒服（比如我，乱七八糟路径太多，一个工程一个沙盒不好么）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;123&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人算不如天算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;龙书第六章中间的一个例子，用到了前几节所有的知识点。把这几百行行代码读懂就基本了解渲染管线的工作流程（日常读源码&lt;/p&gt;
&lt;h2 id=&quot;Demo-Debug&quot;&gt;&lt;a h
    
    </summary>
    
    
      <category term="Directx11" scheme="http://yoursite.com/tags/Directx11/"/>
    
      <category term="cpp" scheme="http://yoursite.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】February 2018 Progress Report</title>
    <link href="http://yoursite.com/2018/03/09/uchan-learn/"/>
    <id>http://yoursite.com/2018/03/09/uchan-learn/</id>
    <published>2018-03-09T09:36:43.000Z</published>
    <updated>2018-04-16T08:37:28.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>跟着油管上的外国教程指导下写了一个第三人称视角跳跃例子</p>
</blockquote>
<p><img src="https://oi3qt7c8d.qnssl.com/uchan.gif" alt="uchan.gif"></p>
<h2 id="使用的组件"><a href="#使用的组件" class="headerlink" title="使用的组件"></a>使用的组件</h2><p>人物模型：开源项目Unity-Chan（以下简称uchan)<br>使用到的Unity标准库：<br>Camera（MultipurposeCameraRig组件，使视角自动旋转跟踪角色后上方）<br>Characters （第三人称人物Prefab，用uchan内的女性化动作代替模型内的男性动作）<br>CrossPlatformInput（适配移动端的输入，添加简单的摇杆和较大的按钮）</p>
<h2 id="需要了解的知识"><a href="#需要了解的知识" class="headerlink" title="需要了解的知识"></a>需要了解的知识</h2><p>人物状态机，即图，在满足某个某个条件后状态即从某个顶点到达另一个顶点。一个顶点可以是段固定动画，也可以是一个动作树。</p>
<p>人物动画，是可以通过设置关键帧来进行组合剪辑来形成连贯的新动作。</p>
<p>第三人称人物Prefab的移动Animation和uchan的移动Animation有设计上的差异，前者具有移动的地面和脚本参数的设置（比如双腿交替频率），而uchan只是一个动画，即原地踏步而已。所以需要在uchan的移动动画的首帧至末帧添加一个参数来表示速度（从前者地面移动速度中获取数值），然后在移动逻辑里添加这个移动的向量，并且修改一下脚本参数使移动看起来较为顺畅。</p>
<h2 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h2><p>mac版本的unity（5.3.4版本）目前因为苹果的新的文件格式APFS，导致Unity打开项目时显示Project为空，按照网上内容新建一个分区可解决。但还是存在text元素不显示的的问题，我开始以为是哪里代码的问题，后来发现所有以前的项目的text都不见了，在win上显示正常，所以仍然是Unity的问题。</p>
<p>在win上利用AndroidStudio下载 Android-SDK 时卡住，在设置全局模式无效时，请不要使用国内乱七八糟的高校proxy，还是使用socks模式设置localhost:1080 靠谱的多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跟着油管上的外国教程指导下写了一个第三人称视角跳跃例子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://oi3qt7c8d.qnssl.com/uchan.gif&quot; alt=&quot;uchan.gif&quot;&gt;&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
      <category term="Game" scheme="http://yoursite.com/categories/Game/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】做两个游戏Demo（二）</title>
    <link href="http://yoursite.com/2018/02/16/%E5%81%9A%E4%B8%A4%E4%B8%AA%E6%B8%B8%E6%88%8FDemo%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/16/做两个游戏Demo（二）/</id>
    <published>2018-02-15T17:25:19.000Z</published>
    <updated>2018-04-15T15:14:29.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h1><p>我有好几篇博客是写了很长时间的，但是在原来那篇文章上续写然后注明时间的话，所有文章看起来就很时间错乱（你某个时间到底在干啥），还会有一种看起来好久没更新的感觉（我真的没拖更呀）。以后遇到时间间隔比较长的情况还是分篇写，这样两篇时间上并行的文章就看起来更有层次感一点，也比较利于自ji己de写tian作keng。</p>
<h1 id="LLDP"><a href="#LLDP" class="headerlink" title="LLDP"></a>LLDP</h1><h2 id="version-0-2-2-14"><a href="#version-0-2-2-14" class="headerlink" title="version 0.2 (2.14"></a>version 0.2 (2.14</h2><p>到目前完成了条形飞行道具的抛物线运动和运动过程中的旋转变换，这里使用了<code>rigidbody</code>这个物理模型，通过赋予加速度和速度的方式来代替原本的数学公式计算。（有关物理引擎的计算要使用<code>FixedUpdate</code>中）</p>
<p>优化了代码架构</p>
<h2 id="version-0-3-2-23"><a href="#version-0-3-2-23" class="headerlink" title="version 0.3 (2.23"></a>version 0.3 (2.23</h2><p>完成飞行物体初始化（即发射），绑定到UI界面中。使用<code>Queue</code>对飞行道具数量进行有限控制，销毁掉队列头部的飞行道具从而控制一定数量</p>
<p>重改并优化两个摄像机，自由视角摄像机(wasdSpaceCtrl+mouse)和鼠标控制左右边界平行拖动、滚轮缩放的远矩视角摄像机</p>
<h2 id="version-1-0-2-24"><a href="#version-1-0-2-24" class="headerlink" title="version 1.0 (2.24"></a>version 1.0 (2.24</h2><p>完成碰撞检测，主要是双方玩家、飞行道具(trigger)和地面碰撞器，以及盒型边界的接触回收。飞行初始参数可以控制但目前先使用范围随机参数。</p>
<p>此游戏已经有基本的发射、飞行、命中操作。（到这里有点想弃坑了，不过还是把它搞完把</p>
<h2 id="version-1-1"><a href="#version-1-1" class="headerlink" title="version 1.1"></a>version 1.1</h2><p>给物体加上了一个血条，并使用脚本使血条永远对着摄像机。因为摄像机群管理是我自己写的一套工具，没有使用网上推荐的那种方法，所以不能使用<code>Camera.Current</code>来确定，所以在工具里暴露一个方法，return回当前的摄像机。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Foreward&quot;&gt;&lt;a href=&quot;#Foreward&quot; class=&quot;headerlink&quot; title=&quot;Foreward&quot;&gt;&lt;/a&gt;Foreward&lt;/h1&gt;&lt;p&gt;我有好几篇博客是写了很长时间的，但是在原来那篇文章上续写然后注明时间的话，所有文章看起来就很
    
    </summary>
    
      <category term="Game" scheme="http://yoursite.com/categories/Game/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】做两个游戏Demo</title>
    <link href="http://yoursite.com/2018/02/05/%E5%81%9A%E4%B8%A4%E4%B8%AA%E6%B8%B8%E6%88%8FDemo/"/>
    <id>http://yoursite.com/2018/02/05/做两个游戏Demo/</id>
    <published>2018-02-05T12:25:19.000Z</published>
    <updated>2018-04-15T15:14:31.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h1><p>在家里躺尸一周多以后，对寒假做一个详尽而长期的计划，太短的计划让人提不起劲来（逃）。这个月大概也不要说至少什么什么了，反正做两个游戏，一个第三人称视角的策略类游戏，一个2d躲避的射击类游戏，把重点放在优化细节上。第一个游戏就是『轮流打炮』，看谁先把谁击败为止；另一个就是模仿星露谷里的牛仔游戏，可能改一些细节。</p>
<h1 id="LLDP"><a href="#LLDP" class="headerlink" title="LLDP"></a>LLDP</h1><p>Game Design:</p>
<p>在一条很长（至少隔两个屏幕）而不定（在射程内）的对战平台上，固定位置的对战双方轮流相互炮击，在尝试过程中，玩家需要找到最佳的射击角度和力度来攻击对手，击中时根据动能、动量或者其他依据来判定损失的血量。对战逻辑上本地多人比较简单，人机对战的AI使用某个经验模型*。</p>
<p>*思考：为了避免简单二分法导致最后ai无限完美命中玩家，对AI采取和人类类似的经验方式，记射击修正范围为<code>[B+N(deltaD), B+P(deltaD)]</code>（每次过大过小修正时会倾向修改一个固定的数值，而且一般上一次操作的影响权重最大，上上次也会<code>有一定影响</code>，再之前基本就不计入计算了）；稳定射击修正为<code>[-deltaA+N(deltaD), +deltaA+P(deltaD)]</code>（而命中以后，会采用类似的数值，但是会有偏差，不确定偏大或偏小），</p>
<p>注：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">P(x) = &#123; 0, x &lt;= 0      N(x) = &#123; x, x &lt;= 0</div><div class="line">       &#123; x, x &gt; 0              &#123; 0, x &gt; 0</div></pre></td></tr></table></figure></p>
<p>需要回答的问题</p>
<p>使用游戏物理引擎？否，所有物理变量可以自己掌握，不是性能问题，是掌控问题，需要自己写Debuger。</p>
<p>以上</p>
<p>必须解决的问题</p>
<p>摄像机问题，摄像机需要不停的绑定不同的物体（或者主摄像在不停的相机间变换），还有第一视角和第三视角的切换</p>
<p>回合控制问题，如果不考虑本地多人游戏的话，可以修改游戏模式，一机一角色的游戏方式根本用不着回合，加入一个内置的开火CD即可。（本地多人当然也可以，不过需要分屏）内置CD的方法比较简单，可以考虑先实现这个模式。</p>
<p>以上，貌似没有疑问了，好，明天写出来</p>
<p>Notes：根据以往的经验，实现时尽量避免犯一些经验主义的错误，比如过早优化，沉迷实现，在细节上纠结太久的时候，大概就要想想是不是走偏了……</p>
<h2 id="version-0-1（2-6"><a href="#version-0-1（2-6" class="headerlink" title="version 0.1（2.6"></a>version 0.1（2.6</h2><p>这个小于1的版本号是我另一个写了开头的打气球游戏，对于本游戏还没有任何的可玩性，但是能够分离出一些组件，1版本号代表已经可以有基本的完整玩法了。这个气球游戏大概内容是一个自由移动的主角和和一个自由视角的摄像机，我需要提取出摄像机部分的代码，顺便把这个未完成的场景变成一个实验池。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Foreward&quot;&gt;&lt;a href=&quot;#Foreward&quot; class=&quot;headerlink&quot; title=&quot;Foreward&quot;&gt;&lt;/a&gt;Foreward&lt;/h1&gt;&lt;p&gt;在家里躺尸一周多以后，对寒假做一个详尽而长期的计划，太短的计划让人提不起劲来（逃）。这个月大
    
    </summary>
    
      <category term="Game" scheme="http://yoursite.com/categories/Game/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>【总结】二〇一七年年末总结</title>
    <link href="http://yoursite.com/2017/12/31/goodbye2017/"/>
    <id>http://yoursite.com/2017/12/31/goodbye2017/</id>
    <published>2017-12-30T16:38:26.000Z</published>
    <updated>2018-04-15T15:21:08.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于目前的状态"><a href="#关于目前的状态" class="headerlink" title="关于目前的状态"></a>关于目前的状态</h1><p>（我仔细想了一下去年的这个时候我在干嘛之后，发现那个时候和现在其实并没有什么区别。去年12月份刚刚完成实验班结业设计，人很闲，整天叫着吵着找实习，结果因为这样那样的原因在3月底才开始实习。今年不会也是这样吧</p>
<h2 id="今年的行程总结"><a href="#今年的行程总结" class="headerlink" title="今年的行程总结"></a>今年的行程总结</h2><p>上半年寒假+实习，暑假学车手续+科一，9月份买主机疯狂打游戏，10月份认真学习基础知识相当长的一段时间，11月份科二科三完成一小半+打游戏，看起来每一件事情完成度貌似都不是很高，需要检讨。（写博客大概是大学唯一坚持的事情吧</p>
<p>下半年虽然感觉浪费了很多时间，但是总体上还是基本完成辞职后定下的目标。</p>
<h2 id="明年的行程初定"><a href="#明年的行程初定" class="headerlink" title="明年的行程初定"></a>明年的行程初定</h2><p>在毕业之前把车学完，顺便补充一下基础，争取多看几本书，不在买书上节约金钱。</p>
<h1 id="需要坚持的事情"><a href="#需要坚持的事情" class="headerlink" title="需要坚持的事情"></a>需要坚持的事情</h1><h2 id="转变拖延思维"><a href="#转变拖延思维" class="headerlink" title="转变拖延思维"></a>转变拖延思维</h2><p>任务要求A时间内完成α时间的事情，若拖延β时间完成的话情况如下：</p>
<p>β间隔：低效<br>α间隔：高效<br>（A-β-α）间隔：自由支配</p>
<p>若A&gt;&gt;α，β越小，你剩余支配的时间将极多，何不省下来把它留给β’呢（况且β’是无穷无尽的）</p>
<h2 id="不进行无意义的比较"><a href="#不进行无意义的比较" class="headerlink" title="不进行无意义的比较"></a>不进行无意义的比较</h2><p>不和任何无法数值化的概念进行比较，特别是和人辩论的时候。</p>
<p>数字才有意义。</p>
<p>PS：其实我在社团上投入了很多时间，但是没有意义，无法响应号召的活动没有可行性。</p>
<p>PPS：GK部落什么的，已经无所谓了。因为已经没有大佬，值得去膜了。</p>
<h2 id="不在无聊的时候打游戏"><a href="#不在无聊的时候打游戏" class="headerlink" title="不在无聊的时候打游戏"></a>不在无聊的时候打游戏</h2><p>珍惜你的无聊时间！这是你创作的黄金期，比如写写文章，尝试设计，做不到的话或许去翻翻未看完的书。</p>
<p>无聊的时候任何消磨时间的行为都会带来更多的空虚和负罪。</p>
<h2 id="完善自己的方法论"><a href="#完善自己的方法论" class="headerlink" title="完善自己的方法论"></a>完善自己的方法论</h2><p>规划很重要，假如只剩两天时间来完成任务，用一天来做一个好的规划也是值得的。因为就算你完不成，也可以让后面接手的人受益。</p>
<p>文本记录也很重要，想的和写的毕竟还是有区别，大脑毕竟推测行为功能的部分比较多，写下来比较容易看出可行性。况且好记性不如烂笔头。</p>
<p>有目的的去做事情，最好是终极目的。</p>
<p>PS：主动的人很厉害，比你想象的要厉害的多。尊重主动的人，和主动的人做朋友。</p>
<h2 id="保持自我反省"><a href="#保持自我反省" class="headerlink" title="保持自我反省"></a>保持自我反省</h2><p>每一句话，每一个观点都有自己背后的意义，明白他人观点背后的立场和涵义，比明白那句话更加重要。</p>
<h2 id="保持积累"><a href="#保持积累" class="headerlink" title="保持积累"></a>保持积累</h2><p>灵感来源于积累，而非来源于无知。孩童的纯真是可耻的，沧桑后的笑容才是真实的。（大概是不喜欢小孩的原因？</p>
<p>对选择恐惧无感。为转行感到焦虑？转了再说，做不好再回来呗。那么多的选择题，不一定都是单选。</p>
<p>想做游戏却厌恶做棋牌？做棋牌也是一种积累啊，做了再说。（况且游戏模式都是通用的</p>
<p>灵感由长期积累而找到的规律（或者说追踪反复出现的一种模式）产生，大脑的动力来源于此（见某文</p>
<p>积累总是好的。想法时好时坏，积累的技术、经验、素材才是永恒（可量化</p>
<h2 id="不要脸"><a href="#不要脸" class="headerlink" title="不要脸"></a>不要脸</h2><p>一直如此</p>
<h2 id="定时输出"><a href="#定时输出" class="headerlink" title="定时输出"></a>定时输出</h2><p>写更多的博客</p>
<p>PS：催更在什么时候都是欢迎的！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于目前的状态&quot;&gt;&lt;a href=&quot;#关于目前的状态&quot; class=&quot;headerlink&quot; title=&quot;关于目前的状态&quot;&gt;&lt;/a&gt;关于目前的状态&lt;/h1&gt;&lt;p&gt;（我仔细想了一下去年的这个时候我在干嘛之后，发现那个时候和现在其实并没有什么区别。去年12月份刚刚完
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>【读书】《Theory of Fun for Game Design》</title>
    <link href="http://yoursite.com/2017/11/12/Theory_of_Fun_for_Game_Design/"/>
    <id>http://yoursite.com/2017/11/12/Theory_of_Fun_for_Game_Design/</id>
    <published>2017-11-12T07:16:24.000Z</published>
    <updated>2018-04-15T15:16:00.062Z</updated>
    
    <content type="html"><![CDATA[<p>原标题：读《快乐之道—游戏设计的黄金法则》（无法忍受频繁的非专业名词翻译版，而去读了原版）</p>
<blockquote>
<p>写一点更一点 更新时间不定</p>
</blockquote>
<h1 id="How-our-brains-work"><a href="#How-our-brains-work" class="headerlink" title="How our brains work"></a>How our brains work</h1><blockquote>
<p>对游戏的定义无助于设计师找到『快乐』，因为我们的大脑是 pattern-driven 的。</p>
</blockquote>
<p>大脑最擅长的事情是填补空白，这是通过目前所得信息，和之前累积的事物的基础上合理构造出来的，有一整套科学分支致力于解决这个问题。我们擅长描述脑中的存在，却很难有意识地观察确实存在的东西，『cognitive theory』这个理论表述了『how we think we know what we think we know』，大部分都是叫做『chunking』概念的例子。</p>
<p>『chunking』是我们一直在做的事情，比如我们能简单的描述从今天起床到上班的过程，但是很难想起细节，比如穿衣服的所有细节，你怎么扣纽扣的啊，你怎么撸袖子的啊。我们能够下意识地做这些事情，是因为这个程序已经在大脑中『chunking』化了，这个日常程序已经烧录到神经元上了，再也不用思考它了。</p>
<blockquote>
<p>当我们掌握了一个pattern，我们会厌倦它，并把它图标化。</p>
</blockquote>
<p>当『chunking』的事情不想我们期望那样运作时，这会让我陷入困境，甚至出大问题。比如汽车不像我们预期那样行进时，我们的迅速的反应程序就失灵了。因为有意识地思考效率很低，反应时间会成倍增加。如何在chunking化的世界中生活是一件有趣的事情，你可能怀疑自己现在是否真正在阅读。</p>
<p>人们不喜欢混沌，我们喜欢秩序 —— 有一定结构或者略有变化的秩序，这在艺术作品上能很明显的看出来。宇宙中没有真正无『pattern』的事物，如果你觉得某些东西像噪音，这要从自己身上找原因。</p>
<blockquote>
<p>当我们看不到pattern时，就会垂头丧气，并且最终放弃</p>
</blockquote>
<p>举个例子，你从厌恶爵士乐，到一旦掌握它的pattern，你会发现快乐的一刻。到了真正投入其中时，你就将它『chunking』化了。</p>
<blockquote>
<p>一旦我们看出了一种pattern，我们就会追踪并在它重新出现的时候感到兴奋</p>
</blockquote>
<p>然而这并不意味着你已经掌握了爵士乐，从智力理解、直觉理解到完全理解(grok)，你还有很长的路要走。grok和肌肉记忆有相似之处，第一个级别是有意识、符合逻辑的思考，比如数学运算；第二个级别是缓慢的、综合的、联想的直觉的，它就是把大脑中把事物打包并chunking的那部分，它不一定正确，但它构造了现实的近似。最后一种是不思考，通过本能做出的一整套决定。</p>
<blockquote>
<p>『练习』做的越多，我们越少在思考我们在做什么（天马行空的梦！</p>
</blockquote>
<p>触类旁通大抵就是这样的例子，你精通一种乐器后，学习另外一种就不是什么难事。你甚至不需要身体去做，只需要想象，精神训练就能让你很快的达到目标。很明显这是大脑而不是肌肉在运作。</p>
<p>我们的大脑在练习什么东西的时候，我们会梦到它。大脑的直觉部分会把神经系统烧录到大脑中，把最新的pattern转变为某些东西，并且把它和已知事物融为一体，最后将其变成一个日常程序。实际上大脑并不想特别为其重新处理一边。（重复训练是强化记录和补偿神经细胞的新陈代谢。）</p>
<h1 id="What-games-are"><a href="#What-games-are" class="headerlink" title="What games are"></a>What games are</h1><p>游戏往往被定义成一个虚拟的世界，但是它与我们大脑想象的事物有许多共同点。我们对现实的感知基本上就是对它的抽象，我们对一些游戏的规则和我们处理真实事物的方式完全一样，唯一不同的是一些细节。</p>
<h1 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h1><p>11-12 至 How our brains work</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原标题：读《快乐之道—游戏设计的黄金法则》（无法忍受频繁的非专业名词翻译版，而去读了原版）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写一点更一点 更新时间不定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;How-our-brains-work&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>【读书】《Game Programming Patterns》</title>
    <link href="http://yoursite.com/2017/11/11/game_programming_patterns/"/>
    <id>http://yoursite.com/2017/11/11/game_programming_patterns/</id>
    <published>2017-11-11T02:16:24.000Z</published>
    <updated>2018-04-15T15:17:35.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>写一点更一点 更新时间不定</p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>选书一般先看作者。</p>
</blockquote>
<p>《游戏编程模式》的作者是一个从小学开始写游戏的全平台游戏开发者，这样一个超过20年编程经验的从业人员，对游戏开发的理解已经超出很多客观因素的见识限制。</p>
<p>我需要寻找的就是这种万千世界中纷纷扰扰、风格各异的规律中寻找普世的，相同的、漂亮而易用的规律。</p>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote>
<p>设计模式：可复用面向对象软件的基础</p>
</blockquote>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>模式说明：命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象，同时支持可撤消的操作。</p>
<p>我的理解：将命令抽象化，虚拟命令内容和执行方法，具体命令实现执行方法，之后将按键指针指向它；相当于增加一个间接调用层。如果将具体命令设计为需要传入角色参数（原来相当于默认主角），那么可以同时作为AI引擎与角色之间的接口，AI代码仅提供Commands以驱动，解除紧耦合。/每次命令时仅记录行为而非状态（游戏录像文件不大的原因），支持多次撤销的话，把记录类型改为队列即可。</p>
<p>举例说明：游戏按键绑定修改/策略游戏的撤销操作</p>
<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>模式说明：享元模式，以共享的方式高效地支持大量的细粒度的对象。通过复用内存中已存在的对象，降低系统创建对象实例的性能消耗。</p>
<p>我的理解：将对象分割成两个独立的类，一个通用类（model）记录不变部分，一个实例类（保存指向通用类的一个指针）记录可变部分。将数据存于内存中是个好办法，但对于渲染毫无助益。无论是Direct3D和OpenGL都能实现实例绘制，这两种API中都需要提供两种数据（通用数据&amp;实例列表）。/将地形相关的方法写在地形类中，而不是在世界对象的地形列表中取出枚举数据再判断逻辑而决定方法，因为这样符合OO思想，而且世界对象中不使用枚举，而使用指针，因为内存开销要小得多。</p>
<p>模式举例：渲染森林树木/瓦片地形技术</p>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>模式说明：观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</p>
<p>我的理解：被观察者对象（Subject）有两个职责，它拥有一个观察者（Observer）列表，以及暴露用来修改观察者列表的共有API，这样允许外部代码来控制谁可以接受通知；另一个职责就是发送通知。程序员潜意识里认为，『通知』太慢了，其实只要不是性能瓶颈的地方，它只是同步方法的间接实现，并没有什么开销。为了避免僵尸UI，最后学到的经验就是及时删除观察者。另外，程序员关心内存碎片回收胜于内存分配（如果你希望你的游戏能够运行相当长的一段时间的话）</p>
<p>模式举例：成就解锁功能/APP的UI界面响应/角色面板血条变化</p>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>模式说明：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象（你精通JS各种工厂模式的话，可以跳过这一章）</p>
<p>我的理解：不为所有独立的对象都写一个继承基础对象生成器的特殊对象生成器（比如GhostSpawner::Spawner），而是在基类上描述一个虚拟的clone()方法，给每一个子类都提供返回给自身类型和状态相同对象的方法；这样一旦任何子类实现这个接口，只需要实例化出一个原型，然后将其作为生成器即可。（当然clone没那么好写，比如深浅拷贝的问题）</p>
<p>模式举例：怪物生成器/孵化函数</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>模式说明：确保一个类只有一个实例，并为其提供一个全局访问入口。</p>
<p>我的理解：这是一个有争议的模式。它的优点如下：不使用就不创建；运行时才初始化；单例可以被继承扩展（比如跨平台的文件系统）。它的缺点也很明显：1. 它是一个全局变量。它令代码晦涩难懂；全局变量促进了耦合；它对并发不友好。2. 它是一个画蛇添足的方案。全局变量访问很方便，但对于允许多个实例的类，访问也并不麻烦，而且不利于多人开发沟通。3. 延迟初始化剥离了你的控制。使用静态函数比使用单例简单，而且还能表面你在使用静态内存。</p>
<p>建议做法：面向对象就是让对象自己管理自己，从对象思考是否需要类；用检测来防止创建多个实例；为实例提供便捷的访问方式：传入参数（比如上下文）、从基类获取、封装全局对象。</p>
<p>模式举例：全局变量</p>
<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>模式说明：允许对象在当内部状态改变时改变其行为，就好像此对象改变了自己的类一样</p>
<p>我的理解：有限状态机（借鉴了图灵机）相当于一种状态流程图；状态枚举优于分支，用状态判断逻辑能有效封装代码。状态模式下，为每一个状态定义一个类，在需要多状态对的象中私有一个状态对象用于委托，在这种情况下，推荐使用静态状态，也可以使用实例化状态。同时可以进一步封装，把状态进入和退出函数暴露以提供支持。并发状态机用于支持不同系统间的状态；层次状态机以继承的方式处理类似的状态；下推自动机用栈记录上一次操作前的状态。</p>
<p>模式举例：横版游戏主角动作逻辑</p>
<h1 id="序列型模式"><a href="#序列型模式" class="headerlink" title="序列型模式"></a>序列型模式</h1><blockquote>
<p>大多数游戏世界的特征是时间——虚拟世界按照自己的节奏运行着</p>
</blockquote>
<h2 id="双缓冲"><a href="#双缓冲" class="headerlink" title="双缓冲"></a>双缓冲</h2><p>模式说明：使用序列操作来模拟瞬间或者同时发生的事情</p>
<p>我的理解：在一个不断被写入和读出的数据内存中，为了避免读出过快导致信息不完整，使用两块内存用于写入且在每次读出后交替指针，这样能够保证每次读出数据的完整性。（说白了避免对同一块内存同时进行读写操作）</p>
<p>模式举例：图形渲染的帧缓冲区交换，以及任何适用双缓冲的模式</p>
<h2 id="游戏循环"><a href="#游戏循环" class="headerlink" title="游戏循环"></a>游戏循环</h2><p>模式说明：游戏循环模式，实现游戏运行过程中对用户输入处理和时间处理的解耦</p>
<p>我的理解：游戏时间步长是一个问题，你可以使用非同步的固定时长（受硬件和游戏复杂度影响），也可以同步的固定时长（省电，对移动端友好，但是太慢），也可以变步时长（适应平台，但是游戏变得不稳定不确定，尤其对物理和网络模块），或者定时更新、变时渲染（适配最强，太复杂）</p>
<p>模式举例：任何游戏或游戏引擎都拥有自己的游戏循环，因为游戏循环是游戏运行的主心骨。</p>
<h2 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h2><p>模式说明：更新方法，通过每次处理一帧的行为来模拟一系列独立对象</p>
<p>我的理解：保持对象集合（更新期间谨慎处理新生和移除的对象），赋予每个对象自身的更新方法（放在组件类和代理类中，不要设置在实体类中），必要是设置独立集合来存放非激活对象。在更新时保持当前帧的状态以以防万一。</p>
<p>模式举例：游戏更新帧中对新生、死亡物体的处理</p>
<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><blockquote>
<p>快速定义并提炼大量高质量而且可维护的行为。</p>
</blockquote>
<h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>模式说明：字节码模式，将行为编码为虚拟机器上的指令，来赋予其数据的灵活性。从而让数据易于修改，易于加载，并与其他可执行部分相隔离。</p>
<p>我的理解：设置虚拟机，使游戏不需要重新编译就进行调试（需要前端界面，解释器，甚至一门新的语言），避免程序和设计打架。（设计思想，比如RPG游戏测试战斗时制作一张战斗测试专用地图，通过对话修改数据）</p>
<p>举例：修改数值测试时遇到的遥遥无期的编译问题</p>
<h2 id="子类沙盒"><a href="#子类沙盒" class="headerlink" title="子类沙盒"></a>子类沙盒</h2><p>模式说明：用一系列由基类提供的操作定义子类中的行为。</p>
<p>我的理解：把一个有大量子类的基类定义出受保护抽象方法和预定义的操作集合，确保子类能够使用。子类间能更便捷地共享代码，继承耦合最小化。（基类方法过多，可以分流到辅助类中，基类仅提供辅助类的访问方法）</p>
<p>举例：任何适用沙盒模式的情况</p>
<h2 id="类型对象"><a href="#类型对象" class="headerlink" title="类型对象"></a>类型对象</h2><p>模式说明：创造一个类来允许灵活的创造新的类，而类A的每个实例都代表了不同类型的对象。</p>
<p>我的理解：抛开经典的面向对象，在繁琐的实例中尽量使其初始化于一个基类中，而不是各个继承的子类（一个类型一个类）。</p>
<p>适用对象：不知道将来新的类型；不重新编译或者修改代码下，修改或添加新的类型</p>
<h1 id="解耦型模式"><a href="#解耦型模式" class="headerlink" title="解耦型模式"></a>解耦型模式</h1><blockquote>
<p>模块代码的变化通常不会影响到另一块代码</p>
</blockquote>
<h2 id="组件模式"><a href="#组件模式" class="headerlink" title="组件模式"></a>组件模式</h2><p>模式说明：允许单一的实体跨越多个领域，无需这些领域彼此耦合。</p>
<p>我的理解：在定义实例类之前，先定义更加通用的类，把各个系统抽象化为组件，为减少耦合把组件作为参数传入。组件之间的通信可以之间引用，也可以通过一个信息传递系统通过广播建立联系。</p>
<p>举例：Unity的GameObject设计</p>
<h2 id="事件队列"><a href="#事件队列" class="headerlink" title="事件队列"></a>事件队列</h2><p>模式说明：事件队列模式，对消息或事件的发送与处理进行时间上的解耦。</p>
<p>我的理解：以播放游戏音效举例，我们在主游戏循环或者专门的声音线程调用Audio.update()（参考更新方法模式）来播放声音，但是我们需要一个真正的队列。使用环状缓冲区来模拟队列。汇总请求，将与当前等待处理的请求相符的请求进行合并（播放同一个音乐，入列而不是处理时合并）。对于同步音频API，要保证队列不被同步修改（基本上就在阻塞处理进程时锁住update()）。</p>
<p>举例：中心事件总线模拟『教程引导』事件；播放游戏声音</p>
<h2 id="服务定位器"><a href="#服务定位器" class="headerlink" title="服务定位器"></a>服务定位器</h2><p>模式说明：提供服务的全局接入点，而不必让用户和实现它的具体类耦合。</p>
<p>我的理解：在某个需要服务的时候，我们往往实例化服务对象，但是这样变得耦合。把对象传入参数很直观，但是不优雅，比如渲染代码参数应该与渲染相关，而不是什么日志系统那样的东西。所以我们使用服务定位器，举例：抽象接口类Audio，实现类ConsoleAudio:Audio，用一个Locator类的provide(Audio* service)加载它， getAudio()去定位它，这样audio对ConsoleAudio的实现毫不知情，它只知道Audio的抽象接口。在未加载服务之前，一个解决方案是提供空服务(NullAudio:Audio)。</p>
<p>同时，此方法的优雅之初在于它可以用装饰器模式实现过滤信息。（替换Locator中的service_的Audio子类）</p>
<p>适用对象：需要多处被跨域调用的代码</p>
<h1 id="优化型模式"><a href="#优化型模式" class="headerlink" title="优化型模式"></a>优化型模式</h1><blockquote>
<p>列举一些常用来优化加速游戏的几个中级模式</p>
</blockquote>
<h2 id="数据局部性"><a href="#数据局部性" class="headerlink" title="数据局部性"></a>数据局部性</h2><p>模式说明：合理组织数据，充分使用CPU的缓存来加速内存读取。</p>
<p>我的理解：这个很好理解，因为CPU比RAM要快的多，所以缓存速度决定了瓶颈。将类似的数据放在连续的内存上（比如集合每个实例的相同部分的组件，虽然这反面向对象），而不是散落在整个内存中，使一次读取能命中多个有效数据。遍历无序数据时可以在修改时的有序排列代替标志筛选，某些情况下在内存中移动数据的开销其实是很小的（指针集合灵活，但对缓存不友好，反对重度继承）。</p>
<p>本模式与组件模式一起使用，优化缓存的最常见方案。</p>
<p>适用对象：游戏实体组件</p>
<h2 id="脏标记模式"><a href="#脏标记模式" class="headerlink" title="脏标记模式"></a>脏标记模式</h2><p>模式说明：将工作延期至需要其结果时才去执行，以避免不必要的工作。</p>
<p>我的理解：将多次类似的计算合并以减少逻辑复杂度，比如相对移动就可以通过递归延时重算子节点的位移。但是何时清除标记（计算结果时/检查点/后台计时器）和脏标记追踪的粒度大小是需要思考的。</p>
<p>模式举例：处理局部变换和世界变换，文本编辑器的自动保存</p>
<h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><p>模式说明：放弃单独地分配和释放对象，从固定的池中重用对象，以提高性能和内存使用率。</p>
<p>我的理解：一开始就为即将实例对象集开辟一块专用的内存空间（对象池），并实现基于对象生命周期的构造和析构方法。使用空闲表（freelist）可以使未活跃的对象自身来提升性能</p>
<p>使用情境：有频繁重用对象的情境</p>
<h2 id="空间分区"><a href="#空间分区" class="headerlink" title="空间分区"></a>空间分区</h2><p>模式说明：将对象存储在基于位置组织的数据结构中，来有效的定位对象。</p>
<p>我的理解：将空间分为小的集合，以免遍历带来的损耗。为了边际的特殊情况，一般需要遍历周围的网格。根据分区与对象的依赖关系，可以采用固定分区，或者自适应分区（二叉空间分割，k-d树分割，四叉树分割）</p>
<p>使用情境：对象的移动碰撞和相互影响（与距离有关的系统）</p>
<h1 id="笔记更新记录"><a href="#笔记更新记录" class="headerlink" title="笔记更新记录"></a>笔记更新记录</h1><p>2017-10-20 文章大致结构 概述 命令模式 （终于决定开始写博客</p>
<p>2017-10-21 至 单例模式</p>
<p>2017-10-24 至 游戏循环</p>
<p>2017-10-30 书已经看至18章，玩巫师3中</p>
<p>2017-11-3 仍旧沉迷昆特牌</p>
<p>2017-11-4 至 组件模式</p>
<p>2017-11-5 至 对象池</p>
<p>2017-11-11 完</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写一点更一点 更新时间不定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;选书一般先看作者。
    
    </summary>
    
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>【闲聊】看了100+小时的蓝营政治新闻节目有感</title>
    <link href="http://yoursite.com/2017/10/23/tw_think/"/>
    <id>http://yoursite.com/2017/10/23/tw_think/</id>
    <published>2017-10-23T07:47:21.000Z</published>
    <updated>2018-04-15T15:17:53.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>警告：本文5毛共吹，反共玻璃心党预警</p>
<p>欢迎讨论，欢迎反对</p>
</blockquote>
<h1 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h1><p>个人利益相关：95-08年前于福建，之后在浙江生活至今，对台湾问题较为关注。父亲在闽时效命于94750空军部队至退役，我印象中获得过反台独斗争演习三等功。</p>
<p>从小，大家对台的态度大抵是宝岛台湾，阿里山很美这样，不过那个时候因为长期生活在军营之中，我可能于大家认识稍有不同：那个时间点是阿扁执政前后，父亲等抱着的态度很明确，肯定要打，台陆——切确的说是台闽之间必有一战，或早或晚的事情。现在看来中共对局势的把握是多么准确，果然现在就是一触即发的形态。</p>
<p>如果你不会翻墙，你不关心政治，你大概不知道台湾最近在干什么。我简单的描述一下（实际上一言难尽）台湾现状</p>
<p>台湾是个对民主观念消费过头的地区。去年5月民进党蔡英文利用台独口号，以压倒性选票获胜执政。上来就废除九二共识，让一个律师做经济部长，连经济学常识被质询的时候都答不出来，其他官员大同小异；台湾很喜欢让大学教授和律师参政；蔡和下面的各个部长做的蠢事数不胜数，比如废除核电用爱发电；纪念日本兵，到东南亚去寻亲；全民吃香蕉，行政院长说能减肥，然而因为产量过剩连上山猴子吃到肥肥的都不要吃了。正因为如此，你和5毛争论的时候，你只要抛出这个问题：你们民主这么优秀，怎么还会选出蔡英文来啊。他就哑口无言了。</p>
<p>九二共识废除的关键：九二共识在陆表示『一个中国』，在台表示『一中各表』，但是无论如何两边都是坚持一个中国，只是台湾表示为中华民国而已，也同样是反台独的，台独和独台一定程度上对立的两股势力（台湾当时实力较强，国民党认为中华民族伟大复兴的任务在台湾）。九二共识拿掉以后，台湾『天然独』的声音抬头，很多人开始拿掉中华民国这个帽子，或者假借着中华民国这个外壳来成立台湾国，这是深绿党。目前台湾普遍泛绿，并且越往台南越绿。</p>
<h1 id="The-Parties"><a href="#The-Parties" class="headerlink" title="The Parties"></a>The Parties</h1><p>民进党任何作为的出发点是选票，为反而反，国民党提出什么，他们就竭力反对；事实上因为台湾人对中国认知度不高，以及在野的大幅抹黑，最终导致国民党声望下降，绿营趁机夺权。民进党这个党很有意思，一个决策他做不好可以有很多套说辞，我是人民选出来的所以我的做法肯定代表民意啊不然你们为什么要选我/大多数人都支持这样做的所以我的做法错了也是民意啊错了怎么会是我。所以核电被废，禁止同性恋这种提案，就这样匪夷所思的通过了。简单的说，当权者决策为己，选民被利用了。</p>
<p>民进党实际已经积极为台独铺好路，却不敢宣布台独，一是打不过，二是没人帮。台独势力目前已经对民进党失望（只能且必须拥护一个台独总统），民进党为了笼络现在还在做很多蠢事来补偿心理落差，比如提案废除汉字改为拼音，提案改时区等等等等。然而自己的各种提案根本无法完成，却搞出各种乱七八糟的东西。</p>
<p>当然你也不要以为国民党好棒棒，实际上国民党就是两岸统一的最大阻碍。它属于拿了好处不作为的。民进党是不拿好处反作为的，实际上在加快统一步伐。因为台独一旦公投通过，OK根据反分裂国家法，师出有名直接武统。很多人是蓝皮绿党，这些人非台独而是独台，更为可恶。国民党执政时面对台独时的无能为力令人发笑，连自己的中华民国都维护不了，04年的太阳花事件更是让国民党声望一落千丈。</p>
<p>新党用本土人的话说就是个笑话。</p>
<h1 id="The-State"><a href="#The-State" class="headerlink" title="The State"></a>The State</h1><p>台湾现在和文革时期差不多，民进党在阿扁时期修改过教科书，丑化共党，美化日美。现在90%年轻人拥有强烈的台独意识，以中国人为耻，以日、韩、台人为荣。（和香港类似），统派只占台湾10%左右，而且大概都是父辈那代的人。任何与大陆相关的行为都会被绿营抹红，然后被说成是统派。人民的行为，不好意思，政治优先。具体参考最近台大体育场令人瞠目结舌的中国新声音冲突事件，没错，台大，台湾的最高学府。</p>
<p>台湾媒体的新闻基本上都是胡说八道，四大媒体的新闻为了点击量不择手段。什么神州飞船是假的，没有空气国旗怎么会飘；熊猫早就灭绝了，都是工作人员假扮的（对啊吃竹子吃的好辛苦）；在油管上搜十九大，负面新闻占大多数，各种阴谋论，91岁的长者被拿出来各种消费，什么架空权力，什么开会打哈欠。部分绿党的解读有的时候也挺佩服他们的想象力的，他们能看到我们想都没想过的东西。真的是，你在墙外呆的越久，就越爱国。</p>
<p>台湾很多年轻人对大陆的恨意是你们现在无法想象的，天然独的思想已经很大程度上进入了人民的思维。简体字的评论下，随处可见的支那猪，各种毛黑说，共匪滚。现在我担心的情况是，现在武统的声音越来越高，大陆的民意是很可怕的，万一我们的民意最终要求我党武统台湾，那么那一天还是要到来（好多台湾人叫嚣你打啊，姐放鸡只会丢石头，殊不知习川会美国已经默默的把青天白日旗从台湾地图上拿掉了，同时近期对台湾政府义正言辞的指责充耳不闻）。就是这样蔡当局在撕毁九二共识（即一个中国）还是宣称，需要大陆先释放善意。</p>
<h1 id="Solusion"><a href="#Solusion" class="headerlink" title="Solusion"></a>Solusion</h1><p>十九大我是中途开始看直播的，看的异常认真，认真的不像我。很高兴的看到我国现在的主要矛盾变成不平衡不充分而不是落后的生产力了。我几个星期前就特别关注十九大就是因为蓝营节目中说不管是武统什么的对台政策最终还是看十九大的发言。然而三个半小时的谈话最终只有六百来个字谈到主权问题，而且较十八大来说内容不仅仅面向台湾，更是面向全国地区，六个任何掷地有声。发言很好的表达了我国反分裂的决心，相信每一个中国人听了都会热血沸腾。</p>
<p>对台的的政策从以前的各种反对，变成了『两岸一家亲』，这表明了我党目前已经对台湾执政党不抱有任何幻想。现在以对台人民友好为契机，提供各种便利，包括对台商的优惠，人才优待等等。（现在我觉得，共党的很多决策是科学且务实的，比如『经济是政治基础』，比西方那套民主的万能解药要不知道高到哪里去了。然而我觉得让人明白这一点，这是一项长久而艰巨的任务）</p>
<h1 id="The-Young"><a href="#The-Young" class="headerlink" title="The Young"></a>The Young</h1><p>我了解到台湾年轻人事实上根本不想支持这两个党，选票是迫于无奈。民进党无能，国民党无望，新党等对年轻人又根本没有什么吸引力。台湾的年轻人事实上并没有那么关心政治，但是对身份认同又很在意。当然是这样，从小开始唱的国歌，升的国旗和读的课本都是中华民国的，现在你让他认同PRC，我觉得也很难。</p>
<p>学生是一个很容易被煽动的群体，比如太阳花事件。被利用了都不知道，民主哪有那么简单？世界上哪一个国家民主独立不是需要血和汗的代价？中国新声音时间里一个台湾大学生被碰一下就各种炒作，难怪郑丽文说大学生连一个老伯都打不过，还搞什么台独？</p>
<p>（目前西方的民主思想在国际上影响力大不如前，发展中国家更愿意向中国模式学习。理论上，在经济发展水平没有到达一个临界点的时候，民主对国家是具有破坏性的。比如泰国现在认为它是除美国外的第二大国；印度也一样蜜汁自信，它看看中国，也打算搭建时速五六百的高铁（目前最高速度160km/h）。香港仍然认为发展变缓是大陆的问题，甚至要求恢复英国统治（不知道英国怎么想）。绝大多数民主国家把政府一般当做类似敌人的态度，又因为中国是一党制，所以中国是独裁国家。事实上民主并不是万能药，在发展中国家更是如此。</p>
<h1 id="My-Attitude"><a href="#My-Attitude" class="headerlink" title="My Attitude"></a>My Attitude</h1><p>台湾很多人现在蜜汁自信，认为让利、想方设法统一是在舔台湾，曾经解救外国的台湾群众被普遍认为是在吃豆腐，所以我希望你如果遇到台独（包括偏蓝的独台）观点的时候，能表达坚决的拒绝观点，请不要尝试任何的说明挽回：</p>
<p>『你們中國為什麼一直要。。』</p>
<p>『中国不欢迎你们，滚』</p>
<p>大家在油管发言的时候，有几点常识不要忘记：</p>
<p>大陆网民一般比较年轻，一般就可以认为是我们这代及以下，而国外是全民，在你面前是五六十岁的人也很正常。</p>
<p>统派一般是长辈，不要对台湾年轻人抱任何希望。</p>
<p>没有必要与激进派理论，国际舆论是站在我们这边的。国际舆论时时刻刻都在提醒台湾中国人的身份。未来中美关系会日益密切，台湾的美爸爸要变成叔叔了。</p>
<p>蓝皮（甚至红皮）绿蛆大有人在。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;警告：本文5毛共吹，反共玻璃心党预警&lt;/p&gt;
&lt;p&gt;欢迎讨论，欢迎反对&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Foreword&quot;&gt;&lt;a href=&quot;#Foreword&quot; class=&quot;headerlink&quot; title=&quot;Forewo
    
    </summary>
    
    
      <category term="politic" scheme="http://yoursite.com/tags/politic/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】U3D Beginner</title>
    <link href="http://yoursite.com/2017/10/13/roll_a_ball/"/>
    <id>http://yoursite.com/2017/10/13/roll_a_ball/</id>
    <published>2017-10-12T18:54:24.000Z</published>
    <updated>2018-04-15T15:21:51.592Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>手撸了官方两个例子后稍微回忆一下</p>
</blockquote>
<h2 id="Roll-a-ball"><a href="#Roll-a-ball" class="headerlink" title="Roll a ball"></a>Roll a ball</h2><p>U3D入门第一课，大概讲了一个Unity游戏的基本组成，比如摄像机，光源，实例化的物体和prefabs等。界面和iOS开发差不多，但是调参时基本上需要你自己定制界面。</p>
<p>物体碰撞模块那时候看的似懂非懂（物理引擎我还停留在box2d.js的阶段），到下一课明白基本Trigger的概念，简单来说，就是你希望Rigidbody（刚体）发生碰撞并由此发生相应的后续运动时，那就取消双方的trigger选项；如果你不希望某个物体因接触而运动时，仅仅是作为一个事件的触发器，那就将其设为Trigger。Trigger可以不受物理效果影响，一些可穿透区域的碰撞检测，可以使用Trigger来进行碰撞检测，包括进入和离开。</p>
<p>Is Kinematic 是否参与物理系统，有用的属性，相当于不受力的『恒星』，因为毕竟也是rigidbody，会有质量等参数。</p>
<p>整个游戏没有流程控制，得分事件绑定随意，最后作为PC/Mac/Linux端导出</p>
<h2 id="Space-Shooter"><a href="#Space-Shooter" class="headerlink" title="Space Shooter"></a>Space Shooter</h2><p>U3D入门第二课，教你做一个基本上完整的Web独立游戏（实际上和PC端相同）。最后补充了把此游戏构建于iOS上的补充步骤，包括控制判断和重启判断。</p>
<p>移动端和PC端的操控方式虽然不同，但是逻辑相同，所以这个部分的个人见解是需要把这个部分分离出来（当然这个时候 Oct.20 我已经知道这个实际上是一种游戏中常见的叫做『命令模式』的设计模式。例子中因为逻辑简单，比较简陋，但是如果你需要例如『改键』操作的话，是必须使用的）。</p>
<p>游戏重点包括光源（主光源，辅光源，还有补光），几种不同的碰撞器（简单的说按照游戏要求碰撞几何越简单越好）</p>
<p>任何游戏逻辑都要绑在一个gameobject上，比如总逻辑要绑在一个空的全局游戏对象上，然后任何全局设定相关的游戏参数可以一同绑在它上面，例如游戏总背景音乐。</p>
<p>所有的Controller都是Mono-Class。在Project里的都是类（当然包括Prefabs，当然），而在Hierachey里的物体都是实例化对象（如果你写过Android或者iOS原生应用就会知道这个概念），所以你把Project里的东西拖动至具体指定对象的时候<br>（非构造器），会发现拖不进去，这是当然的。这个时候我们要必须给实例化的对象加上tag，然后在Start()中用FindGameObject(s)WithTag（or CompareTag）来找到实例化的一个（类）对象。</p>
<p>PascalCase is better than camelCase for naming methods</p>
<p>U5和U4的方法大相径庭，以新的版本为准。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;手撸了官方两个例子后稍微回忆一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Roll-a-ball&quot;&gt;&lt;a href=&quot;#Roll-a-ball&quot; class=&quot;headerlink&quot; title=&quot;Roll a ball&quot;&gt;&lt;/a&gt;Ro
    
    </summary>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>【闲聊】我是个组装机白痴</title>
    <link href="http://yoursite.com/2017/09/19/comidiot/"/>
    <id>http://yoursite.com/2017/09/19/comidiot/</id>
    <published>2017-09-18T18:54:24.000Z</published>
    <updated>2018-04-15T15:20:12.346Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本来是计划近期内吃土买一台整机的，但是在好多人的指引下变得困惑不已</p>
</blockquote>
<h1 id="Foward"><a href="#Foward" class="headerlink" title="Foward"></a>Foward</h1><p>事情是这样的，我在淘宝逛到这台主机：</p>
<p><img src="https://img.alicdn.com/imgextra/i2/832641540/TB2BjNqXBoHL1JjSZFAXXc1rXXa_!!832641540.jpg" alt="scboy.taobao.com"></p>
<p>马上我就去看看它的配置，在详情页下看到了它是根据不同配置分成五个价位，这里放出前三个：</p>
<p><img src="https://img.alicdn.com/imgextra/i3/832641540/TB2vuFxXgoQMeJjy0FoXXcShVXa_!!832641540.jpg" alt="¥6699.00"></p>
<p><img src="https://img.alicdn.com/imgextra/i1/832641540/TB2g0plXEAKL1JjSZFkXXa8cFXa_!!832641540.jpg" alt="¥8699.00"></p>
<p><img src="https://img.alicdn.com/imgextra/i4/832641540/TB2RaxvXgsSMeJjSspdXXXZ4pXa_!!832641540.jpg" alt="¥10999.00"></p>
<p>恩，这个价格我是可以接受的。我拿着图1去问gay哈，gay哈表示赞同，表示没被坑</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/17.9.19/c0.png" alt=""></p>
<p>我又拿着这个图去问桐哥，桐哥表示这明显价格不对，并发给我他的配置</p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/17.9.19/c1.png" alt=""></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/17.9.19/c2.png" alt=""></p>
<p>桐哥还说前一段时间优惠大约只需要4k多。我打开一看，顿时开始怀疑人生 <a href="http://item.jd.com/1555771170.html" target="_blank" rel="external">武极 i7 7700/8G/华硕GTX1060 游戏台式电脑主机/DIY组装机</a></p>
<p><img src="http://img14.360buyimg.com/n0/jfs/t4957/89/73465466/141719/2e72323d/58da27a5N6a74cd4c.jpg" alt="握草，这配置，这价格"></p>
<p><img src="https://coding.net/u/xana/p/yinyong/git/raw/master/img/blog/17.9.19/c3.png" alt="gay哈和我都很困惑"></p>
<p>于是乎我开始准备上知乎求助，但是发现知乎好像除了我一个人全部都用的组装机，整机党是异端。</p>
<p>『自己组装很爽』『整机有猫腻』『不要用新手做借口，谁不是新手过来的？』</p>
<p>我感到很惶恐，经过几分钟的软文洗脑以后，我简单看了几个装机视频，在自己组装之前，我想看看这个机子买整机的话到底会坑我多少钱。</p>
<h1 id="配置查询"><a href="#配置查询" class="headerlink" title="配置查询"></a>配置查询</h1><p>（以下配置信息均来源于我手搜，有多个近似商品时，以型号近似为准；有多个相同商品时，以官方旗舰店为准。</p>
<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><div class="table-container">
<table>
<thead>
<tr>
<th>i5-7500</th>
<th>i7-7700</th>
<th>i7-7700k</th>
</tr>
</thead>
<tbody>
<tr>
<td>￥1399</td>
<td>￥2199</td>
<td>￥2499</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://item.jd.com/4132882.html##none" target="_blank" rel="external">https://item.jd.com/4132882.html##none</a></p>
<p> （英特尔旗舰店）</p>
<h2 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h2><p>大致参考：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>GTX1050TI</th>
<th>GTX1060TI</th>
<th>GTX1080TI</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000~1200</td>
<td>1800~2200</td>
<td>4000+</td>
</tr>
</tbody>
</table>
</div>
<p>华硕 STRIX （猛禽）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>GTX1050TI</th>
<th>GTX1060</th>
<th>GTX1070</th>
<th>GTX1080TI</th>
</tr>
</thead>
<tbody>
<tr>
<td>￥1399</td>
<td>￥2799</td>
<td>￥3799</td>
<td>￥7399</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://item.jd.com/3640705.html" target="_blank" rel="external">https://item.jd.com/3640705.html</a></p>
<p>（华硕旗舰店）</p>
<h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><p>华硕 STRIX B250I GAMING</p>
<p>   ￥1099</p>
<p><a href="https://item.jd.com/4311113.html##crumb-wrap" target="_blank" rel="external">https://item.jd.com/4311113.html##crumb-wrap</a></p>
<h2 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h2><p>ANDYSON H6 SERIES 600W金牌半模组</p>
<p>   ￥300</p>
<p>(未查到，大致300左右)</p>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>G.Skill Ripjaws DDR4 2400 8G  (*2)</p>
<p>   ￥579  ( *2= ￥1158 )</p>
<p><a href="https://item.taobao.com/item.htm?spm=a230r.1.14.13.76bf523x4s3AE&amp;id=549060502110&amp;ns=1&amp;abbucket=2##detail" target="_blank" rel="external">https://item.taobao.com/item.htm?spm=a230r.1.14.13.76bf523x4s3AE&amp;id=549060502110&amp;ns=1&amp;abbucket=2##detail</a></p>
<p>   ￥1199</p>
<p><a href="https://item.jd.com/2066808.html##none" target="_blank" rel="external">https://item.jd.com/2066808.html##none</a></p>
<h2 id="固态硬盘-HDD"><a href="#固态硬盘-HDD" class="headerlink" title="固态硬盘 HDD"></a>固态硬盘 HDD</h2><p>APACER AS340 120G</p>
<p>  ￥369.00</p>
<p><a href="https://item.jd.com/10687235944.html" target="_blank" rel="external">https://item.jd.com/10687235944.html</a></p>
<h2 id="机械硬盘-SSD"><a href="#机械硬盘-SSD" class="headerlink" title="机械硬盘 SSD"></a>机械硬盘 SSD</h2><p>希捷(SEAGATE)酷鱼系列 1TB 7200转64Mv</p>
<p>   ￥329</p>
<p><a href="https://item.jd.com/3843702.html##crumb-wrap" target="_blank" rel="external">https://item.jd.com/3843702.html##crumb-wrap</a></p>
<h2 id="机箱"><a href="#机箱" class="headerlink" title="机箱"></a>机箱</h2><p>CORSAIR 380T 白色</p>
<p>  ￥999</p>
<p><a href="https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.6.4c637810SOnu4i&amp;id=42859563387&amp;skuId=90458760832" target="_blank" rel="external">https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.6.4c637810SOnu4i&amp;id=42859563387&amp;skuId=90458760832</a></p>
<h2 id="风扇"><a href="#风扇" class="headerlink" title="风扇"></a>风扇</h2><p>Eclipse 光轮12cm</p>
<p>  ￥59 * 5 = ￥295</p>
<p><a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.1.76bf523zOCf2G&amp;id=558284350071&amp;cm_id=140105335569ed55e27b&amp;abbucket=2" target="_blank" rel="external">https://detail.tmall.com/item.htm?spm=a230r.1.14.1.76bf523zOCf2G&amp;id=558284350071&amp;cm_id=140105335569ed55e27b&amp;abbucket=2</a></p>
<h2 id="水冷"><a href="#水冷" class="headerlink" title="水冷"></a>水冷</h2><p>VTG寒霜之龙240</p>
<p>  ￥259</p>
<p><a href="https://item.jd.com/4918108.html" target="_blank" rel="external">https://item.jd.com/4918108.html</a></p>
<h1 id="计算价格"><a href="#计算价格" class="headerlink" title="计算价格"></a>计算价格</h1><p>为了直观，计算过程放到脚本中：</p>
<h2 id="简单计算"><a href="#简单计算" class="headerlink" title="简单计算"></a>简单计算</h2><p>fuck.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">cpu = [<span class="number">1399</span>, <span class="number">2199</span>, <span class="number">2499</span>]</div><div class="line"></div><div class="line">g_card = [<span class="number">1399</span>, <span class="number">2799</span>, <span class="number">3799</span>, <span class="number">7399</span>]</div><div class="line"></div><div class="line">mainboard = <span class="number">1099</span></div><div class="line"></div><div class="line">power = <span class="number">300</span></div><div class="line"></div><div class="line">ram = [<span class="number">579</span>, <span class="number">1158</span>]</div><div class="line"></div><div class="line">ssd = <span class="number">369</span></div><div class="line"></div><div class="line">hdd = <span class="number">329</span></div><div class="line"></div><div class="line">box = <span class="number">999</span></div><div class="line"></div><div class="line">fan = <span class="number">59</span> * <span class="number">5</span></div><div class="line"></div><div class="line">watercooler = <span class="number">259</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">(n)</span>:</span></div><div class="line">    cons = mainboard + power + ssd + box + fan + watercooler</div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">        cpu_p = cpu[<span class="number">0</span>]</div><div class="line">        g_card_p = g_card[<span class="number">0</span>]</div><div class="line">        ram_p = ram[<span class="number">0</span>]</div><div class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</div><div class="line">        cpu_p = cpu[<span class="number">1</span>]</div><div class="line">        g_card_p = g_card[<span class="number">1</span>]</div><div class="line">        ram_p = ram[<span class="number">0</span>]</div><div class="line">    <span class="keyword">if</span> n == <span class="number">3</span>:</div><div class="line">        cpu_p = cpu[<span class="number">2</span>]</div><div class="line">        g_card_p = g_card[<span class="number">2</span>]</div><div class="line">        ram_p = ram[<span class="number">1</span>]</div><div class="line">        cons += hdd</div><div class="line">    var = cpu_p + g_card_p + ram_p</div><div class="line">    <span class="keyword">return</span> cons + var</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</div><div class="line">        print(<span class="string">'plan %s: %s'</span>%(i, cal(i)))</div></pre></td></tr></table></figure>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plan 1: 6698</div><div class="line">plan 2: 8898</div><div class="line">plan 3: 11106</div></pre></td></tr></table></figure>
<p>纳尼。。。</p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>对海盗船的整机鉴定让我感到意外，套餐售价和成本相差无几……对前三个套餐的计算结果表面：『如果整机没有任何的问题，组装人是从网上购置零件的话，那这个贩卖是不赚，甚至亏钱的。』</p>
<p>那问题来了，京东的组装机。。。</p>
<p>—————————9.21更新—————————</p>
<p>京东的配置我也去查了一哈：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Part</th>
<th>Brand</th>
<th>Price</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>i7 7700</td>
<td>￥2199</td>
</tr>
<tr>
<td>主板</td>
<td>华硕 B250 M-ATX（紧凑型）</td>
<td>￥699</td>
</tr>
<tr>
<td>内存</td>
<td>英睿达 DDR4 2400 8GB</td>
<td>￥589</td>
</tr>
<tr>
<td>显卡</td>
<td>华硕 独立显卡 GTX1060 3GB</td>
<td>￥1899</td>
</tr>
<tr>
<td>硬盘</td>
<td>三星 固态硬盘 M.2接口 128GB</td>
<td>￥469</td>
</tr>
<tr>
<td>机箱</td>
<td>游戏悍将 中塔式机箱</td>
<td>￥209</td>
</tr>
<tr>
<td>电源</td>
<td>长城 301W-400W</td>
<td>￥329</td>
</tr>
<tr>
<td>散热器</td>
<td>九州风神 风冷</td>
<td>￥129</td>
</tr>
</tbody>
</table>
</div>
<p>（因为上面的配置都没有标注具体型号，所以价格选取时存在多个，按照最低的来算。</p>
<p>shit.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cpu = <span class="number">2199</span></div><div class="line">mb = <span class="number">699</span></div><div class="line">ram = <span class="number">589</span></div><div class="line">gc = <span class="number">1899</span></div><div class="line">ssd = <span class="number">469</span></div><div class="line">box = <span class="number">209</span></div><div class="line">power = <span class="number">329</span></div><div class="line">fan = <span class="number">129</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(cpu+mb+ram+gc+ssd+box+power+fan)</div></pre></td></tr></table></figure>
<p>ouput:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6522</div></pre></td></tr></table></figure></p>
<p>即使东西都按照最低价格算，计算价格仍高出配置价格1500多。。大概自营店批发的成本要低很多，难道说暴利的地方不在于组装费，而在于零件中间的利润？当然卖整机本来就没多少利润。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本来是计划近期内吃土买一台整机的，但是在好多人的指引下变得困惑不已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Foward&quot;&gt;&lt;a href=&quot;#Foward&quot; class=&quot;headerlink&quot; title=&quot;Foward&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>【总结】大三结束了</title>
    <link href="http://yoursite.com/2017/07/17/%E5%A4%A7%E4%B8%89%E7%BB%93%E6%9D%9F%E4%BA%86/"/>
    <id>http://yoursite.com/2017/07/17/大三结束了/</id>
    <published>2017-07-17T01:54:24.000Z</published>
    <updated>2018-04-15T15:27:36.605Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>虽然不是很明白，还是抬头向前看吧～</p>
</blockquote>
<h2 id="关于实习"><a href="#关于实习" class="headerlink" title="关于实习"></a>关于实习</h2><p>我的第一份实习工作 离学校很近 工资也不错 只是一个实习 工资就给我开了4k 而且老板下个月就承诺给我加工资 但是这4个月以来总觉得做着这个事情少了些什么</p>
<p>某天上班的时候中午是午睡时间 我没睡然后看了会星际比赛录播（刚吃过午饭 2点才开始下午班）老板看到直接摆脸色说上班不要做这种事情 那个时候我就意识到了什么 加上平时气氛又不太好 除了公事以外无话可谈 技术的事情又聊不来几句 平时又任由需求摆布改到吐血 我就有了这种事情不适合我的感觉</p>
<p>老板时时刻刻对我的警戒也让我寒心 每天下班前说的最后一句话就是让我提交代码 当然出于程序员的素养 我的代码都写成随时可以让人接手并看的一目了然的架构 果然我一走 算起来已经半个月了 老板就再也没有联系我 一点问题都没出 呵呵 真的应该学学《Write code that nobody else can read🐮》</p>
<p>而且 然后明明是一起写的那部分功能 客户找到bug了就全部甩锅给我 哦 一共两个bug 其中一个就叫做『冰山一角』了啊 所以我常常自嘲我虽然岗位上写的是后台 其实做的是全栈开发 顺便测试 顺便运维 顺便和甲方撕逼 顺便背锅</p>
<p>我问了刚辞职不久的UI 学姐 她说 你想辞就辞啊 你现在还早 大三还有的是机会 我是应届生 没有办法 辞职都要考虑很多</p>
<p>辞职不是偶然 UI学姐的离职 对潜加班的不爽 对氛围的不满 对团队水平的质疑 只是最后找了学车这个理由 一夜之间不辞而别</p>
<p>辞职前 作为一个实习生 我总结的理由如下</p>
<ol>
<li>本来就对老板没有安全感，近期又问了下，老板对未来并没有一个长远的计划，更加没有安全感</li>
<li>公司氛围不自由。我能按时完成每天任务，又不在任何感官上影响他人，你管我做什么？4个人的公司还要面子工程</li>
<li>一样的活，朝九晚四能做完，拖到加班四五个小时，就证明什么？（心疼朝九晚十才发4k的学长）如果真的按时间计费，那我认认真真coding8小时，和刷1天的日剧，有什么区别？</li>
<li>我做的事情明确超过了责任的范围（而且基本每天就没按时下过班），我提了不下2次的加薪，第一次说转正再说，第二次说你当初不是说钱不重要么（这种那客套话出来当理由的，活久见。后来在我离职的前一周可能终于察觉了什么，说下个月给你加薪，我就更加决心了离职</li>
<li>……</li>
</ol>
<p>当然上面这些原因我不可能直接给老板说，以他的性格，他肯定用人类通用规则那一套理论反驳我，类似于“一般来说”“难道不是”“至少也要”<br>之类，或者说，他仅仅只是不爽而已。我只想说员工不是傻子。明明有好的一套方案，为什么要用糟糕的那种？</p>
<p>顺便走的时候 为了避免不必要的麻烦 把离职原因全部归到自己头上 明确态度 毫无余地 不再回头</p>
<p>简历喜加一：<code>5p2t5bee5rWp6YCU572R57uc56eR5oqA5pyJ6ZmQ5YWs5Y+4</code>（ 2017.3.21 - 2017.6.30 ）</p>
<p>裸辞一周后 我开始反省到底是哪里不对劲 为什么我会放弃这样的一份实习 最后觉得 其他的原因有但不是关键 真正的理由是这个</p>
<ol>
<li>这不是一份具备创造性的工作，只是单纯的写外包而已，而且还要长期写上一段时间。没有办法进行「表达」自我。</li>
<li>这不是一份自由的事业，按时打卡的制度存在缺陷。衡量员工应该取决于他实际创造的价值，而不是时间或者其他。人因此变得消极。</li>
</ol>
<p>大概内心不自觉地意识到这两点，潜意识里开始害怕，想要光速逃离，甚至连公司里我留下的手办和书籍都没考虑就给老板从感谢信开始发信息。</p>
<h2 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h2><p>果然还是自由创造最有趣啊。可能学个乐器，可能学学板绘，可能学门新技♂术。</p>
<p>这种大热天学车，果然是在作死。</p>
<p>为了自由的创造性的事业，积累基础</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;虽然不是很明白，还是抬头向前看吧～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关于实习&quot;&gt;&lt;a href=&quot;#关于实习&quot; class=&quot;headerlink&quot; title=&quot;关于实习&quot;&gt;&lt;/a&gt;关于实习&lt;/h2&gt;&lt;p&gt;我的第一份实习工作 
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
</feed>
